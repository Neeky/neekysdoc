<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#e0e0ff" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1094.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >analyze-table</text>
<text id="details" x="10.00" y="1077" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="1077" > </text>
<g id="frames">
<g >
<title>row_ins_clust_index_entry(dict_index_t*, dtuple_t*, que_thr_t*, bool) (2 samples, 0.99%)</title><rect x="120.4" y="645" width="11.7" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="123.44" y="655.5" ></text>
</g>
<g >
<title>Buf_fetch_other::get(buf_block_t*&amp;) (1 samples, 0.49%)</title><rect x="864.5" y="597" width="5.8" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="867.48" y="607.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void (*&amp;)()&gt;(std::__invoke_other, void (*&amp;)()) (2 samples, 0.99%)</title><rect x="568.0" y="805" width="11.7" height="15.0" fill="rgb(131,131,236)" rx="2" ry="2" />
<text  x="571.03" y="815.5" ></text>
</g>
<g >
<title>row_upd_del_mark_clust_rec(unsigned long, upd_node_t*, dict_index_t*, unsigned long*, que_thr_t*, bool, mtr_t*) (5 samples, 2.46%)</title><rect x="312.3" y="645" width="29.0" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="315.27" y="655.5" >ro..</text>
</g>
<g >
<title>ib_pg_flush_co (2 samples, 0.99%)</title><rect x="568.0" y="1029" width="11.7" height="15.0" fill="rgb(120,120,226)" rx="2" ry="2" />
<text  x="571.03" y="1039.5" ></text>
</g>
<g >
<title>row_purge_reposition_pcur(unsigned long, purge_node_t*, mtr_t*) (2 samples, 0.99%)</title><rect x="1160.9" y="597" width="11.7" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="1163.94" y="607.5" ></text>
</g>
<g >
<title>row_sel_step(que_thr_t*) (4 samples, 1.97%)</title><rect x="399.5" y="629" width="23.2" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="402.46" y="639.5" >r..</text>
</g>
<g >
<title>btr_pcur_t::restore_position(unsigned long, mtr_t*, ut::Location)::{lambda(buf_block_t*)#1}::operator()(buf_block_t*) const (2 samples, 0.99%)</title><rect x="405.3" y="549" width="11.6" height="15.0" fill="rgb(136,136,241)" rx="2" ry="2" />
<text  x="408.27" y="559.5" ></text>
</g>
<g >
<title>row_upd(upd_node_t*, que_thr_t*) (5 samples, 2.46%)</title><rect x="143.7" y="693" width="29.1" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="146.69" y="703.5" >ro..</text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::is_owned() const (1 samples, 0.49%)</title><rect x="248.3" y="389" width="5.8" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="251.33" y="399.5" ></text>
</g>
<g >
<title>que_eval_sql(pars_info_t*, char const*, trx_t*) (11 samples, 5.42%)</title><rect x="108.8" y="773" width="64.0" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="111.82" y="783.5" >que_eva..</text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.49%)</title><rect x="847.0" y="501" width="5.9" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="850.04" y="511.5" ></text>
</g>
<g >
<title>trx_rseg_t::unlatch() (5 samples, 2.46%)</title><rect x="620.3" y="661" width="29.1" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="623.34" y="671.5" >tr..</text>
</g>
<g >
<title>btr_pcur_t::open(dict_index_t*, unsigned long, dtuple_t const*, page_cur_mode_t, unsigned long, mtr_t*, ut::Location) (3 samples, 1.48%)</title><rect x="207.6" y="597" width="17.5" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="210.64" y="607.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::is_owned() const (1 samples, 0.49%)</title><rect x="312.3" y="549" width="5.8" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="315.27" y="559.5" ></text>
</g>
<g >
<title>fil_space_get_flags(unsigned int) (1 samples, 0.49%)</title><rect x="754.0" y="597" width="5.9" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="757.04" y="607.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void (*&amp;)()&gt;::type std::__invoke&lt;void (*&amp;)()&gt;(void (*&amp;)()) (14 samples, 6.90%)</title><rect x="1097.0" y="821" width="81.4" height="15.0" fill="rgb(108,108,215)" rx="2" ry="2" />
<text  x="1100.00" y="831.5" >std::__in..</text>
</g>
<g >
<title>lock_rec_has_expl(unsigned long, buf_block_t const*, unsigned long, trx_t const*) (1 samples, 0.49%)</title><rect x="230.9" y="517" width="5.8" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="233.89" y="527.5" ></text>
</g>
<g >
<title>copy_page_from_iter_atomic (1 samples, 0.49%)</title><rect x="562.2" y="485" width="5.8" height="15.0" fill="rgb(119,119,225)" rx="2" ry="2" />
<text  x="565.22" y="495.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_exit() (1 samples, 0.49%)</title><rect x="236.7" y="309" width="5.8" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="239.70" y="319.5" ></text>
</g>
<g >
<title>buf_flush_page_coordinator_thread() (2 samples, 0.99%)</title><rect x="568.0" y="789" width="11.7" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="571.03" y="799.5" ></text>
</g>
<g >
<title>trx_rseg_t::latch() (1 samples, 0.49%)</title><rect x="451.8" y="693" width="5.8" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="454.77" y="703.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;buf_io_fix&gt; std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_M_insert_unique_&lt;buf_io_fix const&amp;&gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, buf_io_fix const&amp;) (1 samples, 0.49%)</title><rect x="405.3" y="341" width="5.8" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="408.27" y="351.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_enter() (1 samples, 0.49%)</title><rect x="486.7" y="517" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="489.65" y="527.5" ></text>
</g>
<g >
<title>unsigned long Counter::add&lt;64ul&gt;(Counter::Shards&lt;64ul&gt;&amp;, unsigned long, unsigned long) (1 samples, 0.49%)</title><rect x="986.6" y="613" width="5.8" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="989.55" y="623.5" ></text>
</g>
<g >
<title>trx_rseg_t::unlatch() (1 samples, 0.49%)</title><rect x="323.9" y="581" width="5.8" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="326.89" y="591.5" ></text>
</g>
<g >
<title>buf_pool_validate_instance(buf_pool_t*) (1 samples, 0.49%)</title><rect x="254.1" y="565" width="5.9" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="257.14" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;buf_io_fix&gt; &gt; &gt;::allocate(std::allocator&lt;std::_Rb_tree_node&lt;buf_io_fix&gt; &gt;&amp;, unsigned long) (1 samples, 0.49%)</title><rect x="254.1" y="293" width="5.9" height="15.0" fill="rgb(88,88,198)" rx="2" ry="2" />
<text  x="257.14" y="303.5" ></text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::locked(TTASEventMutex&lt;GenericPolicy&gt; const&amp;, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="260.0" y="501" width="5.8" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="262.95" y="511.5" ></text>
</g>
<g >
<title>log_free_check(log_t&amp;) (1 samples, 0.49%)</title><rect x="114.6" y="709" width="5.8" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="117.63" y="719.5" ></text>
</g>
<g >
<title>rw_lock_x_lock_low(rw_lock_t*, unsigned long, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="143.7" y="517" width="5.8" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="146.69" y="527.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::lookup() (1 samples, 0.49%)</title><rect x="602.9" y="565" width="5.8" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="605.91" y="575.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (3 samples, 1.48%)</title><rect x="847.0" y="613" width="17.5" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="850.04" y="623.5" ></text>
</g>
<g >
<title>dd_table_close(dict_table_t*, THD*, MDL_ticket**, bool) (1 samples, 0.49%)</title><rect x="1079.6" y="645" width="5.8" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="1082.56" y="655.5" ></text>
</g>
<g >
<title>Find_page::Find_page(void const*, unsigned long) (1 samples, 0.49%)</title><rect x="463.4" y="613" width="5.8" height="15.0" fill="rgb(88,88,198)" rx="2" ry="2" />
<text  x="466.40" y="623.5" ></text>
</g>
<g >
<title>row_sel_step(que_thr_t*) (2 samples, 0.99%)</title><rect x="132.1" y="709" width="11.6" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="135.07" y="719.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;ut::allocator&lt;std::__detail::_Hash_node&lt;mtr_t const*, false&gt;, ut::detail::allocator_base_pfs&lt;mtr_t const*&gt; &gt; &gt;::allocate(ut::allocator&lt;std::__detail::_Hash_node&lt;mtr_t const*, false&gt;, ut::detail::allocator_base_pfs&lt;mtr_t const*&gt; &gt;&amp;, unsigned long) (1 samples, 0.49%)</title><rect x="353.0" y="597" width="5.8" height="15.0" fill="rgb(89,89,199)" rx="2" ry="2" />
<text  x="355.96" y="607.5" ></text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::can_leave(std::bitset&lt;3ul&gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.49%)</title><rect x="254.1" y="485" width="5.9" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="257.14" y="495.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt;::operator()() (14 samples, 6.90%)</title><rect x="1097.0" y="933" width="81.4" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="1100.00" y="943.5" >std::thre..</text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (2 samples, 0.99%)</title><rect x="672.7" y="597" width="11.6" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="675.66" y="607.5" ></text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (2 samples, 0.99%)</title><rect x="597.1" y="661" width="11.6" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="600.09" y="671.5" ></text>
</g>
<g >
<title>row_ins_clust_index_entry_low(unsigned int, unsigned long, dict_index_t*, unsigned long, dtuple_t*, que_thr_t*, bool) (2 samples, 0.99%)</title><rect x="120.4" y="629" width="11.7" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="123.44" y="639.5" ></text>
</g>
<g >
<title>pfs_memory_free_vc(unsigned int, unsigned long, PSI_thread*) (1 samples, 0.49%)</title><rect x="829.6" y="453" width="5.8" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="832.61" y="463.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (1 samples, 0.49%)</title><rect x="318.1" y="245" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="321.08" y="255.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.99%)</title><rect x="10.0" y="1013" width="11.6" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="13.00" y="1023.5" ></text>
</g>
<g >
<title>mysql_unlock_tables(THD*, MYSQL_LOCK*) (1 samples, 0.49%)</title><rect x="44.9" y="789" width="5.8" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="47.88" y="799.5" ></text>
</g>
<g >
<title>unsigned int hardware::crc32&lt;hardware::use_pclmul&gt;(unsigned int, unsigned char const*, unsigned long) (1 samples, 0.49%)</title><rect x="556.4" y="645" width="5.8" height="15.0" fill="rgb(110,110,217)" rx="2" ry="2" />
<text  x="559.40" y="655.5" ></text>
</g>
<g >
<title>ksys_write (1 samples, 0.49%)</title><rect x="15.8" y="949" width="5.8" height="15.0" fill="rgb(88,88,198)" rx="2" ry="2" />
<text  x="18.81" y="959.5" ></text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (2 samples, 0.99%)</title><rect x="370.4" y="709" width="11.6" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="373.39" y="719.5" ></text>
</g>
<g >
<title>Find_page::get_block() const (1 samples, 0.49%)</title><rect x="190.2" y="645" width="5.8" height="15.0" fill="rgb(130,130,235)" rx="2" ry="2" />
<text  x="193.20" y="655.5" ></text>
</g>
<g >
<title>ext4_sync_file (1 samples, 0.49%)</title><rect x="533.2" y="597" width="5.8" height="15.0" fill="rgb(95,95,204)" rx="2" ry="2" />
<text  x="536.15" y="607.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::process_flush_stage_queue(unsigned long long*, bool*, THD**) (1 samples, 0.49%)</title><rect x="509.9" y="853" width="5.8" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="512.90" y="863.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;ut::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;char const* const, dict_index_t*&gt; &gt;, ut::detail::allocator_base_pfs&lt;std::pair&lt;char const* const, dict_index_t*&gt; &gt; &gt; &gt;::allocate(ut::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;char const* const, dict_index_t*&gt; &gt;, ut::detail::allocator_base_pfs&lt;std::pair&lt;char const* const, dict_index_t*&gt; &gt; &gt;&amp;, unsigned long) (1 samples, 0.49%)</title><rect x="347.1" y="725" width="5.9" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="350.14" y="735.5" ></text>
</g>
<g >
<title>fil_space_get_page_size(unsigned int, bool*) (1 samples, 0.49%)</title><rect x="980.7" y="645" width="5.9" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="983.74" y="655.5" ></text>
</g>
<g >
<title>dict_stats_update(dict_table_t*, dict_stats_upd_option_t) (49 samples, 24.14%)</title><rect x="108.8" y="821" width="284.8" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="111.82" y="831.5" >dict_stats_update(dict_table_t*, dict_..</text>
</g>
<g >
<title>inline_mysql_commit_transaction(PSI_transaction_locker*) (1 samples, 0.49%)</title><rect x="504.1" y="853" width="5.8" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="507.09" y="863.5" ></text>
</g>
<g >
<title>row_search_on_row_ref(btr_pcur_t*, unsigned long, dict_table_t*, dtuple_t const*, mtr_t*) (1 samples, 0.49%)</title><rect x="1085.4" y="581" width="5.8" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="1088.37" y="591.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (3 samples, 1.48%)</title><rect x="957.5" y="629" width="17.4" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="960.49" y="639.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_enter() (1 samples, 0.49%)</title><rect x="963.3" y="517" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="966.30" y="527.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_enter() (1 samples, 0.49%)</title><rect x="957.5" y="533" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="960.49" y="543.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::exit() (1 samples, 0.49%)</title><rect x="132.1" y="469" width="5.8" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="135.07" y="479.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, Detached_thread, void (*)(log_t*), log_t*&gt;(std::__invoke_other, Detached_thread&amp;&amp;, void (*&amp;&amp;)(log_t*), log_t*&amp;&amp;) (2 samples, 0.99%)</title><rect x="521.5" y="885" width="11.7" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="524.53" y="895.5" ></text>
</g>
<g >
<title>dispatch_command(THD*, COM_DATA const*, enum_server_command) (84 samples, 41.38%)</title><rect x="27.4" y="949" width="488.3" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="30.44" y="959.5" >dispatch_command(THD*, COM_DATA const*, enum_server_command)</text>
</g>
<g >
<title>trx_rseg_t::unlatch() (2 samples, 0.99%)</title><rect x="597.1" y="677" width="11.6" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="600.09" y="687.5" ></text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (1 samples, 0.49%)</title><rect x="387.8" y="693" width="5.8" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="390.83" y="703.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (1 samples, 0.49%)</title><rect x="986.6" y="677" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="989.55" y="687.5" ></text>
</g>
<g >
<title>void log_sync_point&lt;46ul&gt;(char const (&amp;) [46ul]) (1 samples, 0.49%)</title><rect x="498.3" y="677" width="5.8" height="15.0" fill="rgb(125,125,232)" rx="2" ry="2" />
<text  x="501.28" y="687.5" ></text>
</g>
<g >
<title>validate_rec_offset(dict_index_t const*, unsigned long const*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="271.6" y="565" width="5.8" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="274.58" y="575.5" ></text>
</g>
<g >
<title>trx_undo_page_get(page_id_t const&amp;, page_size_t const&amp;, mtr_t*) (1 samples, 0.49%)</title><rect x="695.9" y="645" width="5.8" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="698.91" y="655.5" ></text>
</g>
<g >
<title>dict_lru_validate() (1 samples, 0.49%)</title><rect x="33.3" y="693" width="5.8" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="36.25" y="703.5" ></text>
</g>
<g >
<title>dict_stats_analyze_index_low(unsigned long&amp;, dict_index_t*) (2 samples, 0.99%)</title><rect x="382.0" y="773" width="11.6" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="385.02" y="783.5" ></text>
</g>
<g >
<title>btr_pcur_t::restore_position(unsigned long, mtr_t*, ut::Location) (3 samples, 1.48%)</title><rect x="405.3" y="581" width="17.4" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="408.27" y="591.5" ></text>
</g>
<g >
<title>unlikely(bool) (2 samples, 0.99%)</title><rect x="800.5" y="629" width="11.7" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="803.54" y="639.5" ></text>
</g>
<g >
<title>locksys::Latches::owns_shared_global_latch() const (1 samples, 0.49%)</title><rect x="236.7" y="373" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="239.70" y="383.5" ></text>
</g>
<g >
<title>sync_allowed_latches::sync_allowed_latches(latch_level_t const*, latch_level_t const*) (1 samples, 0.49%)</title><rect x="114.6" y="677" width="5.8" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="117.63" y="687.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt; &gt;::_M_run() (14 samples, 6.90%)</title><rect x="1097.0" y="949" width="81.4" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="1100.00" y="959.5" >std::thre..</text>
</g>
<g >
<title>row_sel_step(que_thr_t*) (8 samples, 3.94%)</title><rect x="254.1" y="693" width="46.5" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="257.14" y="703.5" >row_..</text>
</g>
<g >
<title>trx_coordinator::commit_in_engines(THD*, bool, bool) (12 samples, 5.91%)</title><rect x="434.3" y="821" width="69.8" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="437.33" y="831.5" >trx_coo..</text>
</g>
<g >
<title>dyn_buf_t&lt;512ul&gt;::block_t::end() (1 samples, 0.49%)</title><rect x="399.5" y="549" width="5.8" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="402.46" y="559.5" ></text>
</g>
<g >
<title>std::enable_if&lt;ut::detail::Alloc_pfs::is_pfs_instrumented_v, void*&gt;::type ut::detail::Alloc_&lt;ut::detail::Alloc_pfs&gt;::alloc&lt;false, ut::detail::Alloc_pfs&gt;(unsigned long, unsigned int) (1 samples, 0.49%)</title><rect x="347.1" y="661" width="5.9" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="350.14" y="671.5" ></text>
</g>
<g >
<title>Iterate&lt;Find&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (1 samples, 0.49%)</title><rect x="719.2" y="565" width="5.8" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="722.16" y="575.5" ></text>
</g>
<g >
<title>que_run_threads_low(que_thr_t*) (4 samples, 1.97%)</title><rect x="399.5" y="661" width="23.2" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="402.46" y="671.5" >q..</text>
</g>
<g >
<title>row_purge_reposition_pcur(unsigned long, purge_node_t*, mtr_t*) (1 samples, 0.49%)</title><rect x="1085.4" y="597" width="5.8" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="1088.37" y="607.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (1 samples, 0.49%)</title><rect x="533.2" y="965" width="5.8" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="536.15" y="975.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, Detached_thread, void (*)(log_t*), log_t*&gt;(std::__invoke_other, Detached_thread&amp;&amp;, void (*&amp;&amp;)(log_t*), log_t*&amp;&amp;) (3 samples, 1.48%)</title><rect x="539.0" y="885" width="17.4" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="541.97" y="895.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.49%)</title><rect x="260.0" y="469" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="262.95" y="479.5" ></text>
</g>
<g >
<title>mtr_t::memo_contains_page_flagged(unsigned char const*, unsigned long) const (1 samples, 0.49%)</title><rect x="451.8" y="629" width="5.8" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="454.77" y="639.5" ></text>
</g>
<g >
<title>locksys::rec_queue_validate_latched(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*) (1 samples, 0.49%)</title><rect x="103.0" y="661" width="5.8" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="106.00" y="671.5" ></text>
</g>
<g >
<title>btr_pcur_t::open(dict_index_t*, unsigned long, dtuple_t const*, page_cur_mode_t, unsigned long, mtr_t*, ut::Location) (1 samples, 0.49%)</title><rect x="1085.4" y="565" width="5.8" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="1088.37" y="575.5" ></text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (1 samples, 0.49%)</title><rect x="1160.9" y="501" width="5.8" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="1163.94" y="511.5" ></text>
</g>
<g >
<title>Iterate&lt;Find_page&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (1 samples, 0.49%)</title><rect x="591.3" y="581" width="5.8" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="594.28" y="591.5" ></text>
</g>
<g >
<title>std::atomic&lt;std::thread::id&gt;::load(std::memory_order) const (1 samples, 0.49%)</title><rect x="312.3" y="501" width="5.8" height="15.0" fill="rgb(95,95,203)" rx="2" ry="2" />
<text  x="315.27" y="511.5" ></text>
</g>
<g >
<title>buf_pool_get(page_id_t const&amp;) (1 samples, 0.49%)</title><rect x="661.0" y="565" width="5.8" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="664.03" y="575.5" ></text>
</g>
<g >
<title>rw_lock_validate(rw_lock_t const*) (1 samples, 0.49%)</title><rect x="742.4" y="581" width="5.8" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="745.41" y="591.5" ></text>
</g>
<g >
<title>log_free_check_validate() (1 samples, 0.49%)</title><rect x="114.6" y="693" width="5.8" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="117.63" y="703.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt;::operator()() (2 samples, 0.99%)</title><rect x="556.4" y="933" width="11.6" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="559.40" y="943.5" ></text>
</g>
<g >
<title>__pthread_self (1 samples, 0.49%)</title><rect x="823.8" y="437" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="826.79" y="447.5" ></text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.49%)</title><rect x="957.5" y="549" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="960.49" y="559.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (4 samples, 1.97%)</title><rect x="736.6" y="629" width="23.3" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="739.60" y="639.5" >b..</text>
</g>
<g >
<title>buf_validate() (1 samples, 0.49%)</title><rect x="254.1" y="581" width="5.9" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="257.14" y="591.5" ></text>
</g>
<g >
<title>os_aio_validate_skip() (1 samples, 0.49%)</title><rect x="515.7" y="709" width="5.8" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="518.71" y="719.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_M_get_node() (1 samples, 0.49%)</title><rect x="254.1" y="309" width="5.9" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="257.14" y="319.5" ></text>
</g>
<g >
<title>trx_undo_page_get(page_id_t const&amp;, page_size_t const&amp;, mtr_t*) (1 samples, 0.49%)</title><rect x="79.8" y="549" width="5.8" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="82.75" y="559.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(unsigned long), unsigned long&gt; &gt; &gt;::~_State_impl() (1 samples, 0.49%)</title><rect x="515.7" y="997" width="5.8" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="518.71" y="1007.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::exit() (1 samples, 0.49%)</title><rect x="637.8" y="469" width="5.8" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="640.78" y="479.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void (*(log_t*))(log_t*)&gt;::operator()&lt;, void&gt;() (2 samples, 0.99%)</title><rect x="521.5" y="853" width="11.7" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="524.53" y="863.5" ></text>
</g>
<g >
<title>open_and_process_table(THD*, LEX*, Table_ref*, unsigned int*, Prelocking_strategy*, bool, Open_table_context*) (6 samples, 2.96%)</title><rect x="393.6" y="821" width="34.9" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="396.65" y="831.5" >op..</text>
</g>
<g >
<title>log_wait_for_flush(log_t const&amp;, unsigned long, bool*)::{lambda(bool)#1}::operator()(bool) const (2 samples, 0.99%)</title><rect x="492.5" y="693" width="11.6" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="495.46" y="703.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.49%)</title><rect x="219.3" y="517" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="222.26" y="527.5" ></text>
</g>
<g >
<title>Wait_stats Log_thread_waiting::wait&lt;log_flush_notifier(log_t*)::{lambda(bool)#1}&gt;(log_flush_notifier(log_t*)::{lambda(bool)#1}) (2 samples, 0.99%)</title><rect x="521.5" y="773" width="11.7" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="524.53" y="783.5" ></text>
</g>
<g >
<title>TLS wrapper function for locksys::Latches::Unique_sharded_rw_lock::m_shard_id (1 samples, 0.49%)</title><rect x="137.9" y="549" width="5.8" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="140.88" y="559.5" ></text>
</g>
<g >
<title>rec_offs_nth_extern(dict_index_t const*, unsigned long const*, unsigned long) (1 samples, 0.49%)</title><rect x="300.6" y="597" width="5.9" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="303.64" y="607.5" ></text>
</g>
<g >
<title>memo_slot_release(mtr_memo_slot_t*) (1 samples, 0.49%)</title><rect x="841.2" y="581" width="5.8" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="844.23" y="591.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void (*(unsigned long))(unsigned long)&gt;::operator()&lt;, void&gt;() (1 samples, 0.49%)</title><rect x="515.7" y="853" width="5.8" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="518.71" y="863.5" ></text>
</g>
<g >
<title>row_ins_index_entry_step(ins_node_t*, que_thr_t*) (8 samples, 3.94%)</title><rect x="207.6" y="661" width="46.5" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="210.64" y="671.5" >row_..</text>
</g>
<g >
<title>rw_lock_debug_mutex_enter() (1 samples, 0.49%)</title><rect x="56.5" y="405" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="59.50" y="415.5" ></text>
</g>
<g >
<title>rw_lock_s_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="178.6" y="597" width="5.8" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="181.57" y="607.5" ></text>
</g>
<g >
<title>os_event_wait_time_low(os_event*, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;, long) (1 samples, 0.49%)</title><rect x="172.8" y="629" width="5.8" height="15.0" fill="rgb(102,102,211)" rx="2" ry="2" />
<text  x="175.76" y="639.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(unsigned int, unsigned int, char const*, unsigned int) (1 samples, 0.49%)</title><rect x="440.1" y="565" width="5.9" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="443.15" y="575.5" ></text>
</g>
<g >
<title>void log_sync_point&lt;37ul&gt;(char const (&amp;) [37ul]) (1 samples, 0.49%)</title><rect x="550.6" y="725" width="5.8" height="15.0" fill="rgb(125,125,232)" rx="2" ry="2" />
<text  x="553.59" y="735.5" ></text>
</g>
<g >
<title>Iterate&lt;Release_all&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (1 samples, 0.49%)</title><rect x="713.3" y="645" width="5.9" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="716.35" y="655.5" ></text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (1 samples, 0.49%)</title><rect x="451.8" y="677" width="5.8" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="454.77" y="687.5" ></text>
</g>
<g >
<title>rec_init_offsets(unsigned char const*, dict_index_t const*, unsigned long*) (1 samples, 0.49%)</title><rect x="335.5" y="597" width="5.8" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="338.52" y="607.5" ></text>
</g>
<g >
<title>std::operator&amp;(std::memory_order, std::__memory_order_modifier) (1 samples, 0.49%)</title><rect x="56.5" y="325" width="5.8" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="59.50" y="335.5" ></text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (2 samples, 0.99%)</title><rect x="684.3" y="629" width="11.6" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="687.29" y="639.5" ></text>
</g>
<g >
<title>trx_commit_low(trx_t*, mtr_t*) (9 samples, 4.43%)</title><rect x="440.1" y="725" width="52.4" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="443.15" y="735.5" >trx_c..</text>
</g>
<g >
<title>buf_page_t::was_stale() const (1 samples, 0.49%)</title><rect x="329.7" y="501" width="5.8" height="15.0" fill="rgb(87,87,197)" rx="2" ry="2" />
<text  x="332.70" y="511.5" ></text>
</g>
<g >
<title>mtr_t::commit() (1 samples, 0.49%)</title><rect x="713.3" y="693" width="5.9" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="716.35" y="703.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::is_owned() const (1 samples, 0.49%)</title><rect x="196.0" y="661" width="5.8" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="199.01" y="671.5" ></text>
</g>
<g >
<title>std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::count(buf_io_fix const&amp;) const (1 samples, 0.49%)</title><rect x="155.3" y="373" width="5.8" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="158.32" y="383.5" ></text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt;::_M_invoke&lt;0ul, 1ul, 2ul&gt;(std::_Index_tuple&lt;0ul, 1ul, 2ul&gt;) (3 samples, 1.48%)</title><rect x="539.0" y="917" width="17.4" height="15.0" fill="rgb(131,131,236)" rx="2" ry="2" />
<text  x="541.97" y="927.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::mtr_add_page(buf_block_t*) (1 samples, 0.49%)</title><rect x="143.7" y="581" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="146.69" y="591.5" ></text>
</g>
<g >
<title>Add_dirty_blocks_to_flush_list::add_dirty_page_to_flush_list(mtr_memo_slot_t*) const (1 samples, 0.49%)</title><rect x="85.6" y="565" width="5.8" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="88.57" y="575.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt; &gt;::~_State_impl() (14 samples, 6.90%)</title><rect x="1097.0" y="997" width="81.4" height="15.0" fill="rgb(81,81,190)" rx="2" ry="2" />
<text  x="1100.00" y="1007.5" >std::thre..</text>
</g>
<g >
<title>rw_lock_add_debug_info(rw_lock_t*, unsigned long, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="306.5" y="533" width="5.8" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="309.45" y="543.5" ></text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.49%)</title><rect x="56.5" y="421" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="59.50" y="431.5" ></text>
</g>
<g >
<title>std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::insert(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, buf_io_fix const&amp;) (1 samples, 0.49%)</title><rect x="254.1" y="405" width="5.9" height="15.0" fill="rgb(86,86,196)" rx="2" ry="2" />
<text  x="257.14" y="415.5" ></text>
</g>
<g >
<title>rw_lock_x_unlock(rw_lock_t*) (1 samples, 0.49%)</title><rect x="730.8" y="549" width="5.8" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="733.79" y="559.5" ></text>
</g>
<g >
<title>trx_rseg_t::unlatch() (23 samples, 11.33%)</title><rect x="841.2" y="693" width="133.7" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="844.23" y="703.5" >trx_rseg_t::unla..</text>
</g>
<g >
<title>row_purge_record(purge_node_t*, unsigned char*, que_thr_t const*, bool, THD*) (2 samples, 0.99%)</title><rect x="1160.9" y="677" width="11.7" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="1163.94" y="687.5" ></text>
</g>
<g >
<title>io_handler_thread(unsigned long) (1 samples, 0.49%)</title><rect x="515.7" y="789" width="5.8" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="518.71" y="799.5" ></text>
</g>
<g >
<title>mach_read_ulint(unsigned char const*, mlog_id_t) (3 samples, 1.48%)</title><rect x="62.3" y="517" width="17.5" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="65.32" y="527.5" ></text>
</g>
<g >
<title>ha_innobase::update_row(unsigned char const*, unsigned char*) (8 samples, 3.94%)</title><rect x="50.7" y="773" width="46.5" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="53.69" y="783.5" >ha_i..</text>
</g>
<g >
<title>pc_flush_slot() (2 samples, 0.99%)</title><rect x="568.0" y="773" width="11.7" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="571.03" y="783.5" ></text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::assert_latches_let_distinguish(std::bitset&lt;3ul&gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.49%)</title><rect x="254.1" y="501" width="5.9" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="257.14" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append(char const*, unsigned long) (1 samples, 0.49%)</title><rect x="498.3" y="661" width="5.8" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="501.28" y="671.5" ></text>
</g>
<g >
<title>dfield_get_len(dfield_t const*) (1 samples, 0.49%)</title><rect x="219.3" y="533" width="5.8" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="222.26" y="543.5" ></text>
</g>
<g >
<title>mysql_execute_command(THD*, bool) (84 samples, 41.38%)</title><rect x="27.4" y="917" width="488.3" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="30.44" y="927.5" >mysql_execute_command(THD*, bool)</text>
</g>
<g >
<title>[unknown] (3 samples, 1.48%)</title><rect x="539.0" y="1013" width="17.4" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="541.97" y="1023.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::lookup() (1 samples, 0.49%)</title><rect x="184.4" y="597" width="5.8" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="187.38" y="607.5" ></text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (23 samples, 11.33%)</title><rect x="841.2" y="677" width="133.7" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="844.23" y="687.5" >trx_rseg_t::vali..</text>
</g>
<g >
<title>Add_dirty_blocks_to_flush_list::operator()(mtr_memo_slot_t*) const (1 samples, 0.49%)</title><rect x="85.6" y="581" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="88.57" y="591.5" ></text>
</g>
<g >
<title>dict_index_t::has_row_versions() const (1 samples, 0.49%)</title><rect x="213.4" y="517" width="5.9" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="216.45" y="527.5" ></text>
</g>
<g >
<title>ip_finish_output2 (1 samples, 0.49%)</title><rect x="318.1" y="181" width="5.8" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="321.08" y="191.5" ></text>
</g>
<g >
<title>dd_mdl_acquire(THD*, MDL_ticket**, char const*, char const*) (1 samples, 0.49%)</title><rect x="1155.1" y="645" width="5.8" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="1158.12" y="655.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt; &gt;::_M_run() (73 samples, 35.96%)</title><rect x="579.7" y="949" width="424.3" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="582.66" y="959.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple..</text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt;::_M_invoke&lt;0ul, 1ul&gt;(std::_Index_tuple&lt;0ul, 1ul&gt;) (14 samples, 6.90%)</title><rect x="1097.0" y="917" width="81.4" height="15.0" fill="rgb(136,136,242)" rx="2" ry="2" />
<text  x="1100.00" y="927.5" >void std:..</text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void (*&amp;)(log_t*), log_t*&amp;&gt;(std::__invoke_other, void (*&amp;)(log_t*), log_t*&amp;) (1 samples, 0.49%)</title><rect x="533.2" y="805" width="5.8" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="536.15" y="815.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;char const* const, dict_index_t*&gt; &gt; std::_Rb_tree&lt;char const*, std::pair&lt;char const* const, dict_index_t*&gt;, std::_Select1st&lt;std::pair&lt;char const* const, dict_index_t*&gt; &gt;, ut_strcmp_functor, ut::allocator&lt;std::pair&lt;char const* const, dict_index_t*&gt;, ut::detail::allocator_base_pfs&lt;std::pair&lt;char const* const, dict_index_t*&gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;char const*&amp;&amp;&gt;, std::tuple&lt;&gt; &gt;(std::_Rb_tree_const_iterator&lt;std::pair&lt;char const* const, dict_index_t*&gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;char const*&amp;&amp;&gt;&amp;&amp;, std::tuple&lt;&gt;&amp;&amp;) (1 samples, 0.49%)</title><rect x="347.1" y="773" width="5.9" height="15.0" fill="rgb(110,110,218)" rx="2" ry="2" />
<text  x="350.14" y="783.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::trylock(char const*, unsigned int) (1 samples, 0.49%)</title><rect x="730.8" y="453" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="733.79" y="463.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::trylock(char const*, unsigned int) (1 samples, 0.49%)</title><rect x="56.5" y="389" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="59.50" y="399.5" ></text>
</g>
<g >
<title>dd::acquire_shared_mdl(THD*, MDL_key::enum_mdl_namespace, char const*, char const*, bool, unsigned long, enum_mdl_duration, MDL_ticket**) (1 samples, 0.49%)</title><rect x="1155.1" y="613" width="5.8" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="1158.12" y="623.5" ></text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (2 samples, 0.99%)</title><rect x="847.0" y="581" width="11.7" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="850.04" y="591.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::spin_and_try_lock(unsigned int, unsigned int, char const*, unsigned int) (1 samples, 0.49%)</title><rect x="1184.2" y="709" width="5.8" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="1187.19" y="719.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::is_owned() const (1 samples, 0.49%)</title><rect x="754.0" y="517" width="5.9" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="757.04" y="527.5" ></text>
</g>
<g >
<title>Sharded_rw_lock::s_lock(ut::Location) (1 samples, 0.49%)</title><rect x="178.6" y="629" width="5.8" height="15.0" fill="rgb(87,87,197)" rx="2" ry="2" />
<text  x="181.57" y="639.5" ></text>
</g>
<g >
<title>buf_page_t::Latching_rules_helpers::assert_latches_let_distinguish(buf_page_t const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) (1 samples, 0.49%)</title><rect x="614.5" y="517" width="5.8" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="617.53" y="527.5" ></text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (1 samples, 0.49%)</title><rect x="56.5" y="565" width="5.8" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="59.50" y="575.5" ></text>
</g>
<g >
<title>rw_lock_s_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="446.0" y="581" width="5.8" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="448.96" y="591.5" ></text>
</g>
<g >
<title>Release_all::operator()(mtr_memo_slot_t*) const (2 samples, 0.99%)</title><rect x="725.0" y="597" width="11.6" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="727.98" y="607.5" ></text>
</g>
<g >
<title>trx_purge_choose_next_log() (8 samples, 3.94%)</title><rect x="608.7" y="693" width="46.5" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="611.72" y="703.5" >trx_..</text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.49%)</title><rect x="602.9" y="597" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="605.91" y="607.5" ></text>
</g>
<g >
<title>rw_lock_x_unlock_func(unsigned long, rw_lock_t*) (1 samples, 0.49%)</title><rect x="730.8" y="501" width="5.8" height="15.0" fill="rgb(114,114,222)" rx="2" ry="2" />
<text  x="733.79" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;latch_level_t, ut::allocator&lt;latch_level_t, ut::detail::allocator_base_pfs&lt;latch_level_t&gt; &gt; &gt;::vector&lt;latch_level_t const*, void&gt;(latch_level_t const*, latch_level_t const*, ut::allocator&lt;latch_level_t, ut::detail::allocator_base_pfs&lt;latch_level_t&gt; &gt; const&amp;) (1 samples, 0.49%)</title><rect x="114.6" y="661" width="5.8" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="117.63" y="671.5" ></text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::assert_latches_let_distinguish(std::bitset&lt;3ul&gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.49%)</title><rect x="405.3" y="437" width="5.8" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="408.27" y="447.5" ></text>
</g>
<g >
<title>ha_commit_trans(THD*, bool, bool) (12 samples, 5.91%)</title><rect x="434.3" y="853" width="69.8" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="437.33" y="863.5" >ha_comm..</text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.49%)</title><rect x="579.7" y="709" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="582.66" y="719.5" ></text>
</g>
<g >
<title>ut::free(void*) (1 samples, 0.49%)</title><rect x="829.6" y="501" width="5.8" height="15.0" fill="rgb(86,86,196)" rx="2" ry="2" />
<text  x="832.61" y="511.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_enter() (1 samples, 0.49%)</title><rect x="289.0" y="533" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="292.01" y="543.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt; &gt;::_M_run() (2 samples, 0.99%)</title><rect x="521.5" y="949" width="11.7" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="524.53" y="959.5" ></text>
</g>
<g >
<title>mtr_t::commit() (2 samples, 0.99%)</title><rect x="725.0" y="661" width="11.6" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="727.98" y="671.5" ></text>
</g>
<g >
<title>mtr_t::memo_contains_page_flagged(unsigned char const*, unsigned long) const (1 samples, 0.49%)</title><rect x="318.1" y="517" width="5.8" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="321.08" y="527.5" ></text>
</g>
<g >
<title>__pthread_self (1 samples, 0.49%)</title><rect x="527.3" y="645" width="5.9" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="530.34" y="655.5" ></text>
</g>
<g >
<title>rw_lock_s_lock_gen(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="178.6" y="613" width="5.8" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="181.57" y="623.5" ></text>
</g>
<g >
<title>btr_pcur_t::get_rec() (1 samples, 0.49%)</title><rect x="283.2" y="629" width="5.8" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="286.20" y="639.5" ></text>
</g>
<g >
<title>trx_rseg_t::unlatch() (2 samples, 0.99%)</title><rect x="370.4" y="725" width="11.6" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="373.39" y="735.5" ></text>
</g>
<g >
<title>pfs_open_table_v1(PSI_table_share*, void const*) (1 samples, 0.49%)</title><rect x="422.7" y="757" width="5.8" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="425.71" y="767.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::trylock(char const*, unsigned int) (1 samples, 0.49%)</title><rect x="643.6" y="533" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="646.60" y="543.5" ></text>
</g>
<g >
<title>pfs_rw_lock_x_unlock_func(unsigned long, rw_lock_t*) (1 samples, 0.49%)</title><rect x="841.2" y="517" width="5.8" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="844.23" y="527.5" ></text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (2 samples, 0.99%)</title><rect x="847.0" y="597" width="11.7" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="850.04" y="607.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.49%)</title><rect x="428.5" y="741" width="5.8" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="431.52" y="751.5" ></text>
</g>
<g >
<title>page_id_t::hash() const (1 samples, 0.49%)</title><rect x="294.8" y="485" width="5.8" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="297.83" y="495.5" ></text>
</g>
<g >
<title>void mutex_enter_inline&lt;PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt; &gt;(PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;*, ut::Location) (1 samples, 0.49%)</title><rect x="527.3" y="725" width="5.9" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="530.34" y="735.5" ></text>
</g>
<g >
<title>mtr_t::commit() (2 samples, 0.99%)</title><rect x="85.6" y="661" width="11.6" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="88.57" y="671.5" ></text>
</g>
<g >
<title>locksys::owns_page_shard(page_id_t const&amp;) (1 samples, 0.49%)</title><rect x="248.3" y="437" width="5.8" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="251.33" y="447.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::exit() (1 samples, 0.49%)</title><rect x="748.2" y="485" width="5.8" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="751.23" y="495.5" ></text>
</g>
<g >
<title>rw_lock_s_unlock_func(unsigned long, rw_lock_t*) (1 samples, 0.49%)</title><rect x="277.4" y="549" width="5.8" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="280.39" y="559.5" ></text>
</g>
<g >
<title>rw_lock_remove_debug_info(rw_lock_t*, unsigned long, unsigned long) (1 samples, 0.49%)</title><rect x="864.5" y="533" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="867.48" y="543.5" ></text>
</g>
<g >
<title>__condvar_dec_grefs (1 samples, 0.49%)</title><rect x="1091.2" y="997" width="5.8" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="1094.18" y="1007.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (1 samples, 0.49%)</title><rect x="318.1" y="213" width="5.8" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="321.08" y="223.5" ></text>
</g>
<g >
<title>log_write_buffer(log_t&amp;, unsigned char*, unsigned long, unsigned long) (2 samples, 0.99%)</title><rect x="556.4" y="757" width="11.6" height="15.0" fill="rgb(83,83,192)" rx="2" ry="2" />
<text  x="559.40" y="767.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.49%)</title><rect x="940.0" y="565" width="5.9" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="943.05" y="575.5" ></text>
</g>
<g >
<title>rec_offs_validate(unsigned char const*, dict_index_t const*, unsigned long const*) (1 samples, 0.49%)</title><rect x="207.6" y="501" width="5.8" height="15.0" fill="rgb(96,96,204)" rx="2" ry="2" />
<text  x="210.64" y="511.5" ></text>
</g>
<g >
<title>fil_validate() (1 samples, 0.49%)</title><rect x="573.8" y="485" width="5.9" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="576.84" y="495.5" ></text>
</g>
<g >
<title>auto ut::Guarded&lt;Trx_by_id_with_min, (latch_id_t)77&gt;::latch_and_execute&lt;trx_sys_t::latch_and_execute_with_active_trx&lt;trx_rw_is_active(unsigned long, bool)::{lambda(trx_t*)#1}&gt;(unsigned long, trx_rw_is_active(unsigned long, bool)::{lambda(trx_t*)#1}&amp;&amp;, ut::Location const&amp;)::{lambda(Trx_by_id_with_min&amp;)#1}&gt;(trx_rw_is_active(unsigned long, bool)::{lambda(trx_t*)#1}&amp;&amp;, ut::Location const&amp;) (1 samples, 0.49%)</title><rect x="225.1" y="469" width="5.8" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="228.07" y="479.5" ></text>
</g>
<g >
<title>lock_rec_other_has_expl_req(lock_mode, buf_block_t const*, bool, unsigned long, trx_t const*) (1 samples, 0.49%)</title><rect x="236.7" y="453" width="5.8" height="15.0" fill="rgb(125,125,232)" rx="2" ry="2" />
<text  x="239.70" y="463.5" ></text>
</g>
<g >
<title>buf_page_t::is_io_fix_write() const (1 samples, 0.49%)</title><rect x="614.5" y="533" width="5.8" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="617.53" y="543.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::exit() (1 samples, 0.49%)</title><rect x="841.2" y="453" width="5.8" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="844.23" y="463.5" ></text>
</g>
<g >
<title>log_block_store_checksum(unsigned char*) (1 samples, 0.49%)</title><rect x="556.4" y="709" width="5.8" height="15.0" fill="rgb(110,110,218)" rx="2" ry="2" />
<text  x="559.40" y="719.5" ></text>
</g>
<g >
<title>trx_purge_rseg_get_next_history_log(trx_rseg_t*, unsigned long*) (8 samples, 3.94%)</title><rect x="655.2" y="693" width="46.5" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="658.22" y="703.5" >trx_..</text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_other&gt;::single_page() (1 samples, 0.49%)</title><rect x="864.5" y="613" width="5.8" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="867.48" y="623.5" ></text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt;::_M_invoke&lt;0ul, 1ul&gt;(std::_Index_tuple&lt;0ul, 1ul&gt;) (1 samples, 0.49%)</title><rect x="1184.2" y="917" width="5.8" height="15.0" fill="rgb(136,136,242)" rx="2" ry="2" />
<text  x="1187.19" y="927.5" ></text>
</g>
<g >
<title>std::__array_traits&lt;std::array&lt;unsigned long, 8ul&gt;, 256ul&gt;::_S_ref(std::array&lt;unsigned long, 8ul&gt; const (&amp;) [256], unsigned long) (1 samples, 0.49%)</title><rect x="294.8" y="437" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="297.83" y="447.5" ></text>
</g>
<g >
<title>rw_lock_add_debug_info(rw_lock_t*, unsigned long, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="1085.4" y="485" width="5.8" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="1088.37" y="495.5" ></text>
</g>
<g >
<title>rec_offs_validate(unsigned char const*, dict_index_t const*, unsigned long const*) (1 samples, 0.49%)</title><rect x="300.6" y="565" width="5.9" height="15.0" fill="rgb(96,96,204)" rx="2" ry="2" />
<text  x="303.64" y="575.5" ></text>
</g>
<g >
<title>dd::cache::Dictionary_client::Auto_releaser::~Auto_releaser() (1 samples, 0.49%)</title><rect x="39.1" y="869" width="5.8" height="15.0" fill="rgb(136,136,241)" rx="2" ry="2" />
<text  x="42.06" y="879.5" ></text>
</g>
<g >
<title>locksys::Latches::Page_shards::get_shard(page_id_t const&amp;) (1 samples, 0.49%)</title><rect x="294.8" y="517" width="5.8" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="297.83" y="527.5" ></text>
</g>
<g >
<title>log_write_up_to(log_t&amp;, unsigned long, bool) (2 samples, 0.99%)</title><rect x="492.5" y="741" width="11.6" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="495.46" y="751.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.49%)</title><rect x="695.9" y="613" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="698.91" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;Slot, std::allocator&lt;Slot&gt; &gt;::size() const (1 samples, 0.49%)</title><rect x="515.7" y="645" width="5.8" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="518.71" y="655.5" ></text>
</g>
<g >
<title>log_writer(log_t*) (2 samples, 0.99%)</title><rect x="556.4" y="789" width="11.6" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="559.40" y="799.5" ></text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (20 samples, 9.85%)</title><rect x="725.0" y="677" width="116.2" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="727.98" y="687.5" >trx_rseg_t::va..</text>
</g>
<g >
<title>Iterate&lt;Release_all&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (2 samples, 0.99%)</title><rect x="725.0" y="613" width="11.6" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="727.98" y="623.5" ></text>
</g>
<g >
<title>cmp_whole_field(unsigned long, unsigned long, bool, unsigned char const*, unsigned int, unsigned char const*, unsigned int) (1 samples, 0.49%)</title><rect x="265.8" y="565" width="5.8" height="15.0" fill="rgb(134,134,240)" rx="2" ry="2" />
<text  x="268.76" y="575.5" ></text>
</g>
<g >
<title>decltype (_S_construct({parm#1}, {parm#2}, (forward&lt;latch_level_t const&amp;&gt;)({parm#3}))) std::allocator_traits&lt;ut::allocator&lt;latch_level_t, ut::detail::allocator_base_pfs&lt;latch_level_t&gt; &gt; &gt;::construct&lt;latch_level_t, latch_level_t const&amp;&gt;(ut::allocator&lt;latch_level_t, ut::detail::allocator_base_pfs&lt;latch_level_t&gt; &gt;&amp;, latch_level_t*, latch_level_t const&amp;) (1 samples, 0.49%)</title><rect x="114.6" y="613" width="5.8" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="117.63" y="623.5" ></text>
</g>
<g >
<title>trx_rsegf_get_nth_undo(unsigned char*, unsigned long, mtr_t*) (1 samples, 0.49%)</title><rect x="451.8" y="661" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="454.77" y="671.5" ></text>
</g>
<g >
<title>page_cur_search_with_match_bytes(buf_block_t const*, dict_index_t const*, dtuple_t const*, page_cur_mode_t, unsigned long*, unsigned long*, unsigned long*, unsigned long*, page_cur_t*) (2 samples, 0.99%)</title><rect x="265.8" y="613" width="11.6" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="268.76" y="623.5" ></text>
</g>
<g >
<title>dict_table_close(dict_table_t*, bool, bool) (1 samples, 0.49%)</title><rect x="33.3" y="709" width="5.8" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="36.25" y="719.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_enter() (1 samples, 0.49%)</title><rect x="835.4" y="517" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="838.42" y="527.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.49%)</title><rect x="312.3" y="597" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="315.27" y="607.5" ></text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::complement(std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.49%)</title><rect x="254.1" y="469" width="5.9" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="257.14" y="479.5" ></text>
</g>
<g >
<title>Find_page::Find_page(void const*, unsigned long) (1 samples, 0.49%)</title><rect x="684.3" y="597" width="5.8" height="15.0" fill="rgb(88,88,198)" rx="2" ry="2" />
<text  x="687.29" y="607.5" ></text>
</g>
<g >
<title>mtr_t::s_lock(rw_lock_t*, ut::Location) (1 samples, 0.49%)</title><rect x="1085.4" y="533" width="5.8" height="15.0" fill="rgb(88,88,198)" rx="2" ry="2" />
<text  x="1088.37" y="543.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Find_page&gt; &gt;(Iterate&lt;Find_page&gt;&amp;) const (1 samples, 0.49%)</title><rect x="626.2" y="581" width="5.8" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="629.16" y="591.5" ></text>
</g>
<g >
<title>locksys::Global_shared_latch_guard::Global_shared_latch_guard(ut::Location) (1 samples, 0.49%)</title><rect x="446.0" y="645" width="5.8" height="15.0" fill="rgb(96,96,204)" rx="2" ry="2" />
<text  x="448.96" y="655.5" ></text>
</g>
<g >
<title>btr_get_size(dict_index_t*, unsigned long, mtr_t*) (2 samples, 0.99%)</title><rect x="382.0" y="757" width="11.6" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="385.02" y="767.5" ></text>
</g>
<g >
<title>unlikely(bool) (2 samples, 0.99%)</title><rect x="68.1" y="485" width="11.7" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="71.13" y="495.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Find_page&gt; &gt;(Iterate&lt;Find_page&gt;&amp;) const (1 samples, 0.49%)</title><rect x="376.2" y="645" width="5.8" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="379.21" y="655.5" ></text>
</g>
<g >
<title>mtr_t::memo_contains_page_flagged(unsigned char const*, unsigned long) const (1 samples, 0.49%)</title><rect x="376.2" y="661" width="5.8" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="379.21" y="671.5" ></text>
</g>
<g >
<title>memo_slot_release(mtr_memo_slot_t*) (2 samples, 0.99%)</title><rect x="725.0" y="581" width="11.6" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="727.98" y="591.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.49%)</title><rect x="626.2" y="533" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="629.16" y="543.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::Context::Context(latch_id_t) (1 samples, 0.49%)</title><rect x="730.8" y="405" width="5.8" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="733.79" y="415.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (1 samples, 0.49%)</title><rect x="382.0" y="677" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="385.02" y="687.5" ></text>
</g>
<g >
<title>buf_flush_page(buf_pool_t*, buf_page_t*, buf_flush_t, bool) (2 samples, 0.99%)</title><rect x="568.0" y="677" width="11.7" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="571.03" y="687.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.49%)</title><rect x="329.7" y="517" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="332.70" y="527.5" ></text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.49%)</title><rect x="126.3" y="421" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="129.26" y="431.5" ></text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt;::_M_invoke&lt;0ul, 1ul&gt;(std::_Index_tuple&lt;0ul, 1ul&gt;) (2 samples, 0.99%)</title><rect x="568.0" y="917" width="11.7" height="15.0" fill="rgb(136,136,242)" rx="2" ry="2" />
<text  x="571.03" y="927.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;Detached_thread, void (*)(log_t*), log_t*&gt;::type std::__invoke&lt;Detached_thread, void (*)(log_t*), log_t*&gt;(Detached_thread&amp;&amp;, void (*&amp;&amp;)(log_t*), log_t*&amp;&amp;) (2 samples, 0.99%)</title><rect x="556.4" y="901" width="11.6" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="559.40" y="911.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.49%)</title><rect x="614.5" y="597" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="617.53" y="607.5" ></text>
</g>
<g >
<title>__netif_receive_skb_list_core (1 samples, 0.49%)</title><rect x="318.1" y="309" width="5.8" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="321.08" y="319.5" ></text>
</g>
<g >
<title>void Detached_thread::operator()&lt;void (*)(log_t*), log_t*&gt;(void (*&amp;&amp;)(log_t*), log_t*&amp;&amp;) (2 samples, 0.99%)</title><rect x="521.5" y="869" width="11.7" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="524.53" y="879.5" ></text>
</g>
<g >
<title>buf_page_release_latch(buf_block_t*, unsigned long) (1 samples, 0.49%)</title><rect x="841.2" y="565" width="5.8" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="844.23" y="575.5" ></text>
</g>
<g >
<title>memo_slot_release(mtr_memo_slot_t*) (1 samples, 0.49%)</title><rect x="132.1" y="597" width="5.8" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="135.07" y="607.5" ></text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(TTASEventMutex&lt;GenericPolicy&gt; const&amp;, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="730.8" y="437" width="5.8" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="733.79" y="447.5" ></text>
</g>
<g >
<title>trx_undo_page_get(page_id_t const&amp;, page_size_t const&amp;, mtr_t*) (1 samples, 0.49%)</title><rect x="602.9" y="645" width="5.8" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="605.91" y="655.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::lookup() (1 samples, 0.49%)</title><rect x="79.8" y="469" width="5.8" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="82.75" y="479.5" ></text>
</g>
<g >
<title>tcp_sendmsg (1 samples, 0.49%)</title><rect x="15.8" y="869" width="5.8" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="18.81" y="879.5" ></text>
</g>
<g >
<title>log_write_notifier(log_t*) (3 samples, 1.48%)</title><rect x="539.0" y="789" width="17.4" height="15.0" fill="rgb(136,136,241)" rx="2" ry="2" />
<text  x="541.97" y="799.5" ></text>
</g>
<g >
<title>locksys::rec_queue_validate_latched(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*) (1 samples, 0.49%)</title><rect x="137.9" y="629" width="5.8" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="140.88" y="639.5" ></text>
</g>
<g >
<title>rw_lock_x_unlock_gen(rw_lock_t*, unsigned long) (1 samples, 0.49%)</title><rect x="713.3" y="565" width="5.9" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="716.35" y="575.5" ></text>
</g>
<g >
<title>locksys::Latches::owns_exclusive_global_latch() const (1 samples, 0.49%)</title><rect x="230.9" y="453" width="5.8" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="233.89" y="463.5" ></text>
</g>
<g >
<title>Log_files_write_impl::write_blocks(log_t&amp;, unsigned char*, unsigned long, unsigned long) (1 samples, 0.49%)</title><rect x="562.2" y="741" width="5.8" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="565.22" y="751.5" ></text>
</g>
<g >
<title>Sharded_rw_lock::s_lock(ut::Location) (1 samples, 0.49%)</title><rect x="446.0" y="613" width="5.8" height="15.0" fill="rgb(87,87,197)" rx="2" ry="2" />
<text  x="448.96" y="623.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (2 samples, 0.99%)</title><rect x="254.1" y="613" width="11.7" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="257.14" y="623.5" ></text>
</g>
<g >
<title>btr_cur_get_rec(btr_cur_t const*) (1 samples, 0.49%)</title><rect x="283.2" y="613" width="5.8" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="286.20" y="623.5" ></text>
</g>
<g >
<title>rw_lock_s_unlock_gen(rw_lock_t*, unsigned long) (1 samples, 0.49%)</title><rect x="277.4" y="565" width="5.8" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="280.39" y="575.5" ></text>
</g>
<g >
<title>log_write_notifier(log_t*)::{lambda(bool)#1}::operator()(bool) const (2 samples, 0.99%)</title><rect x="544.8" y="741" width="11.6" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="547.78" y="751.5" ></text>
</g>
<g >
<title>row_sel_restore_pcur_pos(plan_t*, mtr_t*) (2 samples, 0.99%)</title><rect x="277.4" y="661" width="11.6" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="280.39" y="671.5" ></text>
</g>
<g >
<title>void hardware::consume_chunks&lt;5440ul, 3ul, hardware::use_pclmul&gt;(unsigned int&amp;, unsigned char const*&amp;, unsigned long&amp;) (1 samples, 0.49%)</title><rect x="568.0" y="581" width="5.8" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="571.03" y="591.5" ></text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (1 samples, 0.49%)</title><rect x="649.4" y="581" width="5.8" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="652.41" y="591.5" ></text>
</g>
<g >
<title>buf_page_hash_get_low(buf_pool_t*, page_id_t const&amp;) (1 samples, 0.49%)</title><rect x="678.5" y="549" width="5.8" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="681.47" y="559.5" ></text>
</g>
<g >
<title>row_purge_record_func(purge_node_t*, unsigned char*, que_thr_t const*, bool, THD*) (2 samples, 0.99%)</title><rect x="1079.6" y="661" width="11.6" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="1082.56" y="671.5" ></text>
</g>
<g >
<title>Find::operator()(mtr_memo_slot_t*) (1 samples, 0.49%)</title><rect x="719.2" y="549" width="5.8" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="722.16" y="559.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (1 samples, 0.49%)</title><rect x="486.7" y="661" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="489.65" y="671.5" ></text>
</g>
<g >
<title>Double_write::write_to_datafile(buf_page_t const*, bool, file::Block const*) (1 samples, 0.49%)</title><rect x="573.8" y="549" width="5.9" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="576.84" y="559.5" ></text>
</g>
<g >
<title>buf_pool_validate_instance(buf_pool_t*) (1 samples, 0.49%)</title><rect x="405.3" y="485" width="5.8" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="408.27" y="495.5" ></text>
</g>
<g >
<title>buf_page_hash_lock_s_confirm(rw_lock_t*, buf_pool_t const*, page_id_t) (1 samples, 0.49%)</title><rect x="637.8" y="533" width="5.8" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="640.78" y="543.5" ></text>
</g>
<g >
<title>locksys::Latches::Page_shards::get_mutex(page_id_t const&amp;) const (1 samples, 0.49%)</title><rect x="242.5" y="421" width="5.8" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="245.51" y="431.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (1 samples, 0.49%)</title><rect x="602.9" y="629" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="605.91" y="639.5" ></text>
</g>
<g >
<title>ut::malloc_withkey(ut::PSI_memory_key_t, unsigned long) (1 samples, 0.49%)</title><rect x="306.5" y="501" width="5.8" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="309.45" y="511.5" ></text>
</g>
<g >
<title>trx_commit(trx_t*) (10 samples, 4.93%)</title><rect x="434.3" y="741" width="58.2" height="15.0" fill="rgb(107,107,215)" rx="2" ry="2" />
<text  x="437.33" y="751.5" >trx_co..</text>
</g>
<g >
<title>[unknown] (2 samples, 0.99%)</title><rect x="556.4" y="981" width="11.6" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="559.40" y="991.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_enter() (1 samples, 0.49%)</title><rect x="1160.9" y="405" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="1163.94" y="415.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;Detached_thread, void (*)(log_t*), log_t*&gt;::type std::__invoke&lt;Detached_thread, void (*)(log_t*), log_t*&gt;(Detached_thread&amp;&amp;, void (*&amp;&amp;)(log_t*), log_t*&amp;&amp;) (1 samples, 0.49%)</title><rect x="533.2" y="901" width="5.8" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="536.15" y="911.5" ></text>
</g>
<g >
<title>std::atomic&lt;bool&gt;::load(std::memory_order) const (1 samples, 0.49%)</title><rect x="143.7" y="501" width="5.8" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="146.69" y="511.5" ></text>
</g>
<g >
<title>ut::hash_uint64(unsigned long) (1 samples, 0.49%)</title><rect x="294.8" y="453" width="5.8" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="297.83" y="463.5" ></text>
</g>
<g >
<title>dict_index_t::get_field(unsigned long) const (1 samples, 0.49%)</title><rect x="416.9" y="517" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="419.90" y="527.5" ></text>
</g>
<g >
<title>os_event::wait_time_low(std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;, long) (1 samples, 0.49%)</title><rect x="172.8" y="613" width="5.8" height="15.0" fill="rgb(135,135,241)" rx="2" ry="2" />
<text  x="175.76" y="623.5" ></text>
</g>
<g >
<title>lock_rec_lock_slow(bool, select_mode, unsigned long, buf_block_t const*, unsigned long, dict_index_t*, que_thr_t*) (1 samples, 0.49%)</title><rect x="230.9" y="533" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="233.89" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt;(char const*, std::allocator&lt;char&gt; const&amp;) (1 samples, 0.49%)</title><rect x="521.5" y="709" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="524.53" y="719.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::pfs_end(PSI_mutex_locker*, int) (1 samples, 0.49%)</title><rect x="486.7" y="501" width="5.8" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="489.65" y="511.5" ></text>
</g>
<g >
<title>buf_flush_init_for_writing(buf_block_t const*, unsigned char*, void*, unsigned long, bool, bool) (1 samples, 0.49%)</title><rect x="568.0" y="645" width="5.8" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="571.03" y="655.5" ></text>
</g>
<g >
<title>row_upd_step(que_thr_t*) (7 samples, 3.45%)</title><rect x="300.6" y="693" width="40.7" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="303.64" y="703.5" >row..</text>
</g>
<g >
<title>trx_flush_log_if_needed(unsigned long, trx_t*) (1 samples, 0.49%)</title><rect x="172.8" y="709" width="5.8" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="175.76" y="719.5" ></text>
</g>
<g >
<title>buf_page_make_young_if_needed(buf_page_t*) (1 samples, 0.49%)</title><rect x="312.3" y="565" width="5.8" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="315.27" y="575.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (4 samples, 1.97%)</title><rect x="847.0" y="645" width="23.3" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="850.04" y="655.5" >b..</text>
</g>
<g >
<title>ut::malloc_withkey(ut::PSI_memory_key_t, unsigned long) (1 samples, 0.49%)</title><rect x="672.7" y="469" width="5.8" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="675.66" y="479.5" ></text>
</g>
<g >
<title>void mutex_enter_inline&lt;PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt; &gt;(PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;*, ut::Location) (1 samples, 0.49%)</title><rect x="440.1" y="581" width="5.9" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="443.15" y="591.5" ></text>
</g>
<g >
<title>buf_page_hash_lock_s_confirm(rw_lock_t*, buf_pool_t const*, page_id_t) (1 samples, 0.49%)</title><rect x="649.4" y="549" width="5.8" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="652.41" y="559.5" ></text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (2 samples, 0.99%)</title><rect x="161.1" y="549" width="11.7" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="164.13" y="559.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt;::operator()() (2 samples, 0.99%)</title><rect x="521.5" y="933" width="11.7" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="524.53" y="943.5" ></text>
</g>
<g >
<title>Fil_system::validate() const (1 samples, 0.49%)</title><rect x="573.8" y="469" width="5.9" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="576.84" y="479.5" ></text>
</g>
<g >
<title>trans_commit_stmt(THD*, bool) (1 samples, 0.49%)</title><rect x="509.9" y="901" width="5.8" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="512.90" y="911.5" ></text>
</g>
<g >
<title>new_sync_write (1 samples, 0.49%)</title><rect x="15.8" y="917" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="18.81" y="927.5" ></text>
</g>
<g >
<title>locksys::Latches::owns_page_shard(page_id_t const&amp;) const (1 samples, 0.49%)</title><rect x="236.7" y="389" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="239.70" y="399.5" ></text>
</g>
<g >
<title>trx_write_serialisation_history(trx_t*, mtr_t*) (2 samples, 0.99%)</title><rect x="184.4" y="725" width="11.6" height="15.0" fill="rgb(107,107,214)" rx="2" ry="2" />
<text  x="187.38" y="735.5" ></text>
</g>
<g >
<title>log_wait_for_flush(log_t const&amp;, unsigned long, bool*) (1 samples, 0.49%)</title><rect x="172.8" y="661" width="5.8" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="175.76" y="671.5" ></text>
</g>
<g >
<title>ut_delay(unsigned long) (1 samples, 0.49%)</title><rect x="1184.2" y="677" width="5.8" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="1187.19" y="687.5" ></text>
</g>
<g >
<title>pars_sql(pars_info_t*, char const*) (1 samples, 0.49%)</title><rect x="108.8" y="757" width="5.8" height="15.0" fill="rgb(111,111,219)" rx="2" ry="2" />
<text  x="111.82" y="767.5" ></text>
</g>
<g >
<title>locksys::rec_queue_latch_and_validate(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*) (1 samples, 0.49%)</title><rect x="137.9" y="645" width="5.8" height="15.0" fill="rgb(86,86,196)" rx="2" ry="2" />
<text  x="140.88" y="655.5" ></text>
</g>
<g >
<title>row_sel_open_pcur(plan_t*, bool, mtr_t*) (4 samples, 1.97%)</title><rect x="254.1" y="661" width="23.3" height="15.0" fill="rgb(87,87,197)" rx="2" ry="2" />
<text  x="257.14" y="671.5" >r..</text>
</g>
<g >
<title>std::__invoke_result&lt;Detached_thread, void (*)(log_t*), log_t*&gt;::type std::__invoke&lt;Detached_thread, void (*)(log_t*), log_t*&gt;(Detached_thread&amp;&amp;, void (*&amp;&amp;)(log_t*), log_t*&amp;&amp;) (3 samples, 1.48%)</title><rect x="539.0" y="901" width="17.4" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="541.97" y="911.5" ></text>
</g>
<g >
<title>trx_rseg_t::latch() (5 samples, 2.46%)</title><rect x="655.2" y="677" width="29.1" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="658.22" y="687.5" >tr..</text>
</g>
<g >
<title>row_purge_remove_clust_if_poss_low(purge_node_t*, unsigned long) (2 samples, 0.99%)</title><rect x="1160.9" y="613" width="11.7" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="1163.94" y="623.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (3 samples, 1.48%)</title><rect x="1004.0" y="885" width="17.4" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="1006.99" y="895.5" ></text>
</g>
<g >
<title>mtr_t::start(bool) (1 samples, 0.49%)</title><rect x="434.3" y="725" width="5.8" height="15.0" fill="rgb(96,96,204)" rx="2" ry="2" />
<text  x="437.33" y="735.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;buf_io_fix&gt; std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_M_insert_&lt;buf_io_fix const&amp;, std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_Alloc_node&gt;(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, buf_io_fix const&amp;, std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_Alloc_node&amp;) (1 samples, 0.49%)</title><rect x="405.3" y="309" width="5.8" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="408.27" y="319.5" ></text>
</g>
<g >
<title>bool locksys::try_relatch_trx_and_shard_and_do&lt;locksys::try_release_all_locks(trx_t*)::{lambda()#1}&gt;(ib_lock_t const*, locksys::try_release_all_locks(trx_t*)::{lambda()#1}&amp;&amp;) (1 samples, 0.49%)</title><rect x="440.1" y="645" width="5.9" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="443.15" y="655.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::is_owned() const (1 samples, 0.49%)</title><rect x="823.8" y="453" width="5.8" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="826.79" y="463.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;mtr_t const*, std::hash&lt;mtr_t const*&gt;, std::equal_to&lt;mtr_t const*&gt;, ut::allocator&lt;mtr_t const*, ut::detail::allocator_base_pfs&lt;mtr_t const*&gt; &gt; &gt;::insert(mtr_t const*&amp;&amp;) (1 samples, 0.49%)</title><rect x="353.0" y="677" width="5.8" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="355.96" y="687.5" ></text>
</g>
<g >
<title>hardware::crc32_using_pclmul(unsigned char const*, unsigned long) (1 samples, 0.49%)</title><rect x="556.4" y="661" width="5.8" height="15.0" fill="rgb(108,108,215)" rx="2" ry="2" />
<text  x="559.40" y="671.5" ></text>
</g>
<g >
<title>locksys::rec_queue_validate_latched(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*) (3 samples, 1.48%)</title><rect x="236.7" y="533" width="17.4" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="239.70" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;buf_io_fix&gt; std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_M_insert_unique_&lt;buf_io_fix const&amp;, std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_Alloc_node&gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, buf_io_fix const&amp;, std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_Alloc_node&amp;) (1 samples, 0.49%)</title><rect x="405.3" y="325" width="5.8" height="15.0" fill="rgb(95,95,204)" rx="2" ry="2" />
<text  x="408.27" y="335.5" ></text>
</g>
<g >
<title>vfs_write (1 samples, 0.49%)</title><rect x="15.8" y="933" width="5.8" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="18.81" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Insert&lt;mtr_t const*, mtr_t const*, ut::allocator&lt;mtr_t const*, ut::detail::allocator_base_pfs&lt;mtr_t const*&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;mtr_t const*&gt;, std::hash&lt;mtr_t const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt;, true&gt;::insert(mtr_t const*&amp;&amp;) (1 samples, 0.49%)</title><rect x="434.3" y="693" width="5.8" height="15.0" fill="rgb(87,87,197)" rx="2" ry="2" />
<text  x="437.33" y="703.5" ></text>
</g>
<g >
<title>std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;::operator=(buf_io_fix const&amp;) (1 samples, 0.49%)</title><rect x="405.3" y="373" width="5.8" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="408.27" y="383.5" ></text>
</g>
<g >
<title>btr_cur_update_in_place(unsigned long, btr_cur_t*, unsigned long*, upd_t const*, unsigned long, que_thr_t*, unsigned long, mtr_t*) (1 samples, 0.49%)</title><rect x="225.1" y="565" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="228.07" y="575.5" ></text>
</g>
<g >
<title>Fil_shard::get_space_by_id(unsigned int) const (1 samples, 0.49%)</title><rect x="980.7" y="597" width="5.9" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="983.74" y="607.5" ></text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (2 samples, 0.99%)</title><rect x="585.5" y="661" width="11.6" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="588.47" y="671.5" ></text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (1 samples, 0.49%)</title><rect x="486.7" y="613" width="5.8" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="489.65" y="623.5" ></text>
</g>
<g >
<title>PFS_session_all_memory_stat::count_uncontrolled_alloc(unsigned long) (1 samples, 0.49%)</title><rect x="736.6" y="437" width="5.8" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="739.60" y="447.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.49%)</title><rect x="172.8" y="565" width="5.8" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="175.76" y="575.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::release(TTASEventMutex&lt;GenericPolicy&gt; const*) (1 samples, 0.49%)</title><rect x="196.0" y="677" width="5.8" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="199.01" y="687.5" ></text>
</g>
<g >
<title>que_run_threads(que_thr_t*) (4 samples, 1.97%)</title><rect x="399.5" y="677" width="23.2" height="15.0" fill="rgb(136,136,242)" rx="2" ry="2" />
<text  x="402.46" y="687.5" >q..</text>
</g>
<g >
<title>trx_rsegf_get_nth_undo(unsigned char*, unsigned long, mtr_t*) (11 samples, 5.42%)</title><rect x="759.9" y="661" width="63.9" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="762.85" y="671.5" >trx_rse..</text>
</g>
<g >
<title>std::__invoke_result&lt;Detached_thread, void (*)(unsigned long), unsigned long&gt;::type std::__invoke&lt;Detached_thread, void (*)(unsigned long), unsigned long&gt;(Detached_thread&amp;&amp;, void (*&amp;&amp;)(unsigned long), unsigned long&amp;&amp;) (1 samples, 0.49%)</title><rect x="515.7" y="901" width="5.8" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="518.71" y="911.5" ></text>
</g>
<g >
<title>Iterate&lt;Find_page&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (3 samples, 1.48%)</title><rect x="469.2" y="597" width="17.5" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="472.21" y="607.5" ></text>
</g>
<g >
<title>rw_lock_s_unlock(rw_lock_t*) (1 samples, 0.49%)</title><rect x="132.1" y="565" width="5.8" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="135.07" y="575.5" ></text>
</g>
<g >
<title>row_sel(sel_node_t*, que_thr_t*) (8 samples, 3.94%)</title><rect x="254.1" y="677" width="46.5" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="257.14" y="687.5" >row_..</text>
</g>
<g >
<title>std::this_thread::get_id() (1 samples, 0.49%)</title><rect x="196.0" y="645" width="5.8" height="15.0" fill="rgb(85,85,195)" rx="2" ry="2" />
<text  x="199.01" y="655.5" ></text>
</g>
<g >
<title>ha_innobase::close() (1 samples, 0.49%)</title><rect x="33.3" y="757" width="5.8" height="15.0" fill="rgb(83,83,192)" rx="2" ry="2" />
<text  x="36.25" y="767.5" ></text>
</g>
<g >
<title>row_update_for_mysql(unsigned char const*, row_prebuilt_t*) (8 samples, 3.94%)</title><rect x="50.7" y="757" width="46.5" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="53.69" y="767.5" >row_..</text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Find_page&gt; &gt;(Iterate&lt;Find_page&gt;&amp;) const (1 samples, 0.49%)</title><rect x="318.1" y="501" width="5.8" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="321.08" y="511.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void (*(unsigned long))(unsigned long)&gt;::__call&lt;void, , 0ul&gt;(std::tuple&lt;&gt;&amp;&amp;, std::_Index_tuple&lt;0ul&gt;) (1 samples, 0.49%)</title><rect x="515.7" y="837" width="5.8" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="518.71" y="847.5" ></text>
</g>
<g >
<title>copy_user_generic_string (1 samples, 0.49%)</title><rect x="562.2" y="453" width="5.8" height="15.0" fill="rgb(87,87,197)" rx="2" ry="2" />
<text  x="565.22" y="463.5" ></text>
</g>
<g >
<title>ib_lock_t const* Lock_iter::for_each&lt;locksys::rec_queue_validate_latched(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*)::{lambda(ib_lock_t*)#3}&gt;(RecID const&amp;, locksys::rec_queue_validate_latched(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*)::{lambda(ib_lock_t*)#3}&amp;&amp;, hash_table_t*) (1 samples, 0.49%)</title><rect x="294.8" y="597" width="5.8" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="297.83" y="607.5" ></text>
</g>
<g >
<title>row_purge(purge_node_t*, unsigned char*, que_thr_t*) (2 samples, 0.99%)</title><rect x="1079.6" y="693" width="11.6" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="1082.56" y="703.5" ></text>
</g>
<g >
<title>rw_lock_debug_free(rw_lock_debug_t*) (1 samples, 0.49%)</title><rect x="829.6" y="517" width="5.8" height="15.0" fill="rgb(110,110,218)" rx="2" ry="2" />
<text  x="832.61" y="527.5" ></text>
</g>
<g >
<title>srv_worker_thread() (12 samples, 5.91%)</title><rect x="1021.4" y="981" width="69.8" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="1024.43" y="991.5" >srv_wor..</text>
</g>
<g >
<title>rw_lock_x_lock_gen(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="858.7" y="597" width="5.8" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="861.67" y="607.5" ></text>
</g>
<g >
<title>trx_rseg_t::unlatch() (1 samples, 0.49%)</title><rect x="190.2" y="709" width="5.8" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="193.20" y="719.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Release_all&gt; &gt;(Iterate&lt;Release_all&gt;&amp;) const (1 samples, 0.49%)</title><rect x="399.5" y="565" width="5.8" height="15.0" fill="rgb(114,114,222)" rx="2" ry="2" />
<text  x="402.46" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars(char*, char const*, char const*) (1 samples, 0.49%)</title><rect x="521.5" y="693" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="524.53" y="703.5" ></text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (1 samples, 0.49%)</title><rect x="318.1" y="565" width="5.8" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="321.08" y="575.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_exit() (1 samples, 0.49%)</title><rect x="132.1" y="501" width="5.8" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="135.07" y="511.5" ></text>
</g>
<g >
<title>mtr_t::start(bool) (1 samples, 0.49%)</title><rect x="353.0" y="693" width="5.8" height="15.0" fill="rgb(96,96,204)" rx="2" ry="2" />
<text  x="355.96" y="703.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (3 samples, 1.48%)</title><rect x="632.0" y="613" width="17.4" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="634.97" y="623.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::trylock(char const*, unsigned int) (1 samples, 0.49%)</title><rect x="126.3" y="389" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="129.26" y="399.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::trylock(char const*, unsigned int) (1 samples, 0.49%)</title><rect x="178.6" y="549" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="181.57" y="559.5" ></text>
</g>
<g >
<title>locksys::Latches::owns_page_shard(page_id_t const&amp;) const (1 samples, 0.49%)</title><rect x="242.5" y="437" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="245.51" y="447.5" ></text>
</g>
<g >
<title>btr_pcur_t::restore_position(unsigned long, mtr_t*, ut::Location) (1 samples, 0.49%)</title><rect x="300.6" y="645" width="5.9" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="303.64" y="655.5" ></text>
</g>
<g >
<title>rw_lock_s_unlock_func(unsigned long, rw_lock_t*) (1 samples, 0.49%)</title><rect x="132.1" y="533" width="5.8" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="135.07" y="543.5" ></text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::locked(TTASEventMutex&lt;GenericPolicy&gt; const&amp;, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="864.5" y="485" width="5.8" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="867.48" y="495.5" ></text>
</g>
<g >
<title>row_purge_remove_clust_if_poss(purge_node_t*) (1 samples, 0.49%)</title><rect x="1085.4" y="629" width="5.8" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="1088.37" y="639.5" ></text>
</g>
<g >
<title>que_run_threads(que_thr_t*) (5 samples, 2.46%)</title><rect x="1149.3" y="757" width="29.1" height="15.0" fill="rgb(136,136,242)" rx="2" ry="2" />
<text  x="1152.31" y="767.5" >qu..</text>
</g>
<g >
<title>ut::detail::Alloc_fn::malloc(unsigned long) (1 samples, 0.49%)</title><rect x="672.7" y="421" width="5.8" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="675.66" y="431.5" ></text>
</g>
<g >
<title>lock_trx_release_locks(trx_t*) (1 samples, 0.49%)</title><rect x="178.6" y="693" width="5.8" height="15.0" fill="rgb(131,131,237)" rx="2" ry="2" />
<text  x="181.57" y="703.5" ></text>
</g>
<g >
<title>Wait_stats Log_thread_waiting::wait&lt;log_write_notifier(log_t*)::{lambda(bool)#1}&gt;(log_write_notifier(log_t*)::{lambda(bool)#1}) (2 samples, 0.99%)</title><rect x="544.8" y="773" width="11.6" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="547.78" y="783.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (3 samples, 1.48%)</title><rect x="823.8" y="629" width="17.4" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="826.79" y="639.5" ></text>
</g>
<g >
<title>srv_worker_thread() (12 samples, 5.91%)</title><rect x="1021.4" y="789" width="69.8" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="1024.43" y="799.5" >srv_wor..</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt; &gt;::_M_run() (1 samples, 0.49%)</title><rect x="1184.2" y="949" width="5.8" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="1187.19" y="959.5" ></text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (1 samples, 0.49%)</title><rect x="451.8" y="645" width="5.8" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="454.77" y="655.5" ></text>
</g>
<g >
<title>buf_block_buf_fix_dec(buf_block_t*) (1 samples, 0.49%)</title><rect x="277.4" y="597" width="5.8" height="15.0" fill="rgb(118,118,224)" rx="2" ry="2" />
<text  x="280.39" y="607.5" ></text>
</g>
<g >
<title>fil_io(IORequest const&amp;, bool, page_id_t const&amp;, page_size_t const&amp;, unsigned long, unsigned long, void*, void*) (1 samples, 0.49%)</title><rect x="573.8" y="533" width="5.9" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="576.84" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;char const* const, dict_index_t*&gt; &gt;* std::_Rb_tree&lt;char const*, std::pair&lt;char const* const, dict_index_t*&gt;, std::_Select1st&lt;std::pair&lt;char const* const, dict_index_t*&gt; &gt;, ut_strcmp_functor, ut::allocator&lt;std::pair&lt;char const* const, dict_index_t*&gt;, ut::detail::allocator_base_pfs&lt;std::pair&lt;char const* const, dict_index_t*&gt; &gt; &gt; &gt;::_M_create_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;char const*&amp;&amp;&gt;, std::tuple&lt;&gt; &gt;(std::piecewise_construct_t const&amp;, std::tuple&lt;char const*&amp;&amp;&gt;&amp;&amp;, std::tuple&lt;&gt;&amp;&amp;) (1 samples, 0.49%)</title><rect x="347.1" y="757" width="5.9" height="15.0" fill="rgb(97,97,205)" rx="2" ry="2" />
<text  x="350.14" y="767.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt; &gt;::_M_run() (3 samples, 1.48%)</title><rect x="539.0" y="949" width="17.4" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="541.97" y="959.5" ></text>
</g>
<g >
<title>rw_lock_x_unlock_func(unsigned long, rw_lock_t*) (1 samples, 0.49%)</title><rect x="841.2" y="501" width="5.8" height="15.0" fill="rgb(114,114,222)" rx="2" ry="2" />
<text  x="844.23" y="511.5" ></text>
</g>
<g >
<title>ib_lock_t const* Lock_iter::for_each&lt;locksys::rec_queue_validate_latched(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*)::{lambda(ib_lock_t*)#3}&gt;(RecID const&amp;, locksys::rec_queue_validate_latched(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*)::{lambda(ib_lock_t*)#3}&amp;&amp;, hash_table_t*) (1 samples, 0.49%)</title><rect x="137.9" y="613" width="5.8" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="140.88" y="623.5" ></text>
</g>
<g >
<title>trx_rw_is_active(unsigned long, bool) (1 samples, 0.49%)</title><rect x="225.1" y="501" width="5.8" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="228.07" y="511.5" ></text>
</g>
<g >
<title>rw_lock_validate(rw_lock_t const*) (1 samples, 0.49%)</title><rect x="852.9" y="565" width="5.8" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="855.86" y="575.5" ></text>
</g>
<g >
<title>cmp_rec_rec_with_match(unsigned char const*, unsigned char const*, unsigned long const*, unsigned long const*, dict_index_t const*, bool, bool, unsigned long*, bool) (1 samples, 0.49%)</title><rect x="300.6" y="613" width="5.9" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="303.64" y="623.5" ></text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt;::_M_invoke&lt;0ul, 1ul, 2ul&gt;(std::_Index_tuple&lt;0ul, 1ul, 2ul&gt;) (2 samples, 0.99%)</title><rect x="556.4" y="917" width="11.6" height="15.0" fill="rgb(131,131,236)" rx="2" ry="2" />
<text  x="559.40" y="927.5" ></text>
</g>
<g >
<title>lock_rec_hash_value(page_id_t const&amp;) (1 samples, 0.49%)</title><rect x="294.8" y="501" width="5.8" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="297.83" y="511.5" ></text>
</g>
<g >
<title>Find_page::get_block() const (1 samples, 0.49%)</title><rect x="911.0" y="613" width="5.8" height="15.0" fill="rgb(130,130,235)" rx="2" ry="2" />
<text  x="913.99" y="623.5" ></text>
</g>
<g >
<title>ut::detail::PFS_metadata::pfs_datalen(void*, unsigned long) (1 samples, 0.49%)</title><rect x="306.5" y="453" width="5.8" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="309.45" y="463.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::policy() (1 samples, 0.49%)</title><rect x="725.0" y="453" width="5.8" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="727.98" y="463.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Find_page&gt; &gt;(Iterate&lt;Find_page&gt;&amp;) const (3 samples, 1.48%)</title><rect x="469.2" y="613" width="17.5" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="472.21" y="623.5" ></text>
</g>
<g >
<title>log_writer_write_buffer(log_t&amp;, unsigned long) (2 samples, 0.99%)</title><rect x="556.4" y="773" width="11.6" height="15.0" fill="rgb(107,107,215)" rx="2" ry="2" />
<text  x="559.40" y="783.5" ></text>
</g>
<g >
<title>dd_table_open_on_id(unsigned long, THD*, MDL_ticket**, bool, bool) (1 samples, 0.49%)</title><rect x="1155.1" y="661" width="5.8" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="1158.12" y="671.5" ></text>
</g>
<g >
<title>trx_rsegf_get_nth_undo(unsigned char*, unsigned long, mtr_t*) (1 samples, 0.49%)</title><rect x="318.1" y="549" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="321.08" y="559.5" ></text>
</g>
<g >
<title>innobase_commit_low(trx_t*) (10 samples, 4.93%)</title><rect x="434.3" y="773" width="58.2" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="437.33" y="783.5" >innoba..</text>
</g>
<g >
<title>ib_srv_wkr-3 (1 samples, 0.49%)</title><rect x="1184.2" y="1029" width="5.8" height="15.0" fill="rgb(94,94,202)" rx="2" ry="2" />
<text  x="1187.19" y="1039.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::trylock(char const*, unsigned int) (1 samples, 0.49%)</title><rect x="847.0" y="549" width="5.9" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="850.04" y="559.5" ></text>
</g>
<g >
<title>rw_lock_x_unlock(rw_lock_t*) (1 samples, 0.49%)</title><rect x="713.3" y="581" width="5.9" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="716.35" y="591.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;mtr_t const*, true, false&gt;, bool&gt; std::_Hashtable&lt;mtr_t const*, mtr_t const*, ut::allocator&lt;mtr_t const*, ut::detail::allocator_base_pfs&lt;mtr_t const*&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;mtr_t const*&gt;, std::hash&lt;mtr_t const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;mtr_t const*, std::__detail::_AllocNode&lt;ut::allocator&lt;std::__detail::_Hash_node&lt;mtr_t const*, false&gt;, ut::detail::allocator_base_pfs&lt;mtr_t const*&gt; &gt; &gt; &gt;(mtr_t const*&amp;&amp;, std::__detail::_AllocNode&lt;ut::allocator&lt;std::__detail::_Hash_node&lt;mtr_t const*, false&gt;, ut::detail::allocator_base_pfs&lt;mtr_t const*&gt; &gt; &gt; const&amp;, std::integral_constant&lt;bool, true&gt;) (1 samples, 0.49%)</title><rect x="353.0" y="645" width="5.8" height="15.0" fill="rgb(84,84,193)" rx="2" ry="2" />
<text  x="355.96" y="655.5" ></text>
</g>
<g >
<title>innobase_commit(handlerton*, THD*, bool) (12 samples, 5.91%)</title><rect x="434.3" y="789" width="69.8" height="15.0" fill="rgb(83,83,192)" rx="2" ry="2" />
<text  x="437.33" y="799.5" >innobas..</text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (1 samples, 0.49%)</title><rect x="382.0" y="629" width="5.8" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="385.02" y="639.5" ></text>
</g>
<g >
<title>mtr_t::Command::release_all() (1 samples, 0.49%)</title><rect x="841.2" y="645" width="5.8" height="15.0" fill="rgb(134,134,240)" rx="2" ry="2" />
<text  x="844.23" y="655.5" ></text>
</g>
<g >
<title>mtr_t::memo_contains_page_flagged(unsigned char const*, unsigned long) const (1 samples, 0.49%)</title><rect x="161.1" y="533" width="5.8" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="164.13" y="543.5" ></text>
</g>
<g >
<title>rw_lock_x_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="56.5" y="437" width="5.8" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="59.50" y="447.5" ></text>
</g>
<g >
<title>ut::mt_fast_modulo_t::load() (1 samples, 0.49%)</title><rect x="242.5" y="357" width="5.8" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="245.51" y="367.5" ></text>
</g>
<g >
<title>rw_lock_s_unlock(rw_lock_t*) (1 samples, 0.49%)</title><rect x="725.0" y="549" width="5.8" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="727.98" y="559.5" ></text>
</g>
<g >
<title>srv_worker_thread() (1 samples, 0.49%)</title><rect x="1184.2" y="981" width="5.8" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="1187.19" y="991.5" ></text>
</g>
<g >
<title>fut_get_ptr(unsigned int, page_size_t const&amp;, fil_addr_t, rw_lock_type_t, mtr_t*, buf_block_t**) (1 samples, 0.49%)</title><rect x="382.0" y="693" width="5.8" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="385.02" y="703.5" ></text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (3 samples, 1.48%)</title><rect x="62.3" y="533" width="17.5" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="65.32" y="543.5" ></text>
</g>
<g >
<title>std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; std::set_difference&lt;std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; &gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;) (1 samples, 0.49%)</title><rect x="405.3" y="405" width="5.8" height="15.0" fill="rgb(114,114,222)" rx="2" ry="2" />
<text  x="408.27" y="415.5" ></text>
</g>
<g >
<title>rw_lock_s_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="823.8" y="549" width="5.8" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="826.79" y="559.5" ></text>
</g>
<g >
<title>row_ins_duplicate_error_in_clust(unsigned long, btr_cur_t*, dtuple_t const*, que_thr_t*, mtr_t*) (4 samples, 1.97%)</title><rect x="230.9" y="597" width="23.2" height="15.0" fill="rgb(110,110,218)" rx="2" ry="2" />
<text  x="233.89" y="607.5" >r..</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt; &gt;::~_State_impl() (1 samples, 0.49%)</title><rect x="533.2" y="997" width="5.8" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="536.15" y="1007.5" ></text>
</g>
<g >
<title>Find_page::Find_page(void const*, unsigned long) (1 samples, 0.49%)</title><rect x="905.2" y="613" width="5.8" height="15.0" fill="rgb(88,88,198)" rx="2" ry="2" />
<text  x="908.17" y="623.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::mtr_add_page(buf_block_t*) (1 samples, 0.49%)</title><rect x="736.6" y="597" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="739.60" y="607.5" ></text>
</g>
<g >
<title>rw_lock_remove_debug_info(rw_lock_t*, unsigned long, unsigned long) (1 samples, 0.49%)</title><rect x="841.2" y="485" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="844.23" y="495.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (2 samples, 0.99%)</title><rect x="556.4" y="965" width="11.6" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="559.40" y="975.5" ></text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt;::_M_invoke&lt;0ul, 1ul&gt;(std::_Index_tuple&lt;0ul, 1ul&gt;) (73 samples, 35.96%)</title><rect x="579.7" y="917" width="424.3" height="15.0" fill="rgb(136,136,242)" rx="2" ry="2" />
<text  x="582.66" y="927.5" >void std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, vo..</text>
</g>
<g >
<title>dd::cache::Local_multi_map&lt;dd::Column_statistics&gt;* dd::cache::Object_registry::m_map&lt;dd::Column_statistics&gt;() (1 samples, 0.49%)</title><rect x="39.1" y="821" width="5.8" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="42.06" y="831.5" ></text>
</g>
<g >
<title>rw_lock_x_unlock(rw_lock_t*) (1 samples, 0.49%)</title><rect x="841.2" y="549" width="5.8" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="844.23" y="559.5" ></text>
</g>
<g >
<title>ib_log_writer (2 samples, 0.99%)</title><rect x="556.4" y="1029" width="11.6" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="559.40" y="1039.5" ></text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::release(TTASEventMutex&lt;GenericPolicy&gt; const&amp;) (1 samples, 0.49%)</title><rect x="823.8" y="485" width="5.8" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="826.79" y="495.5" ></text>
</g>
<g >
<title>virtnet_poll (1 samples, 0.49%)</title><rect x="318.1" y="357" width="5.8" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="321.08" y="367.5" ></text>
</g>
<g >
<title>net_rx_action (1 samples, 0.49%)</title><rect x="318.1" y="389" width="5.8" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="321.08" y="399.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void (*())()&gt;::__call&lt;void&gt;(std::tuple&lt;&gt;&amp;&amp;, std::_Index_tuple&lt;&gt;) (2 samples, 0.99%)</title><rect x="568.0" y="837" width="11.7" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="571.03" y="847.5" ></text>
</g>
<g >
<title>std::bitset&lt;3ul&gt;::reference::operator=(bool) (1 samples, 0.49%)</title><rect x="614.5" y="485" width="5.8" height="15.0" fill="rgb(95,95,204)" rx="2" ry="2" />
<text  x="617.53" y="495.5" ></text>
</g>
<g >
<title>rw_lock_x_unlock_func(unsigned long, rw_lock_t*) (1 samples, 0.49%)</title><rect x="713.3" y="533" width="5.9" height="15.0" fill="rgb(114,114,222)" rx="2" ry="2" />
<text  x="716.35" y="543.5" ></text>
</g>
<g >
<title>rw_lock_s_lock_nowait(rw_lock_t*, ut::Location) (1 samples, 0.49%)</title><rect x="260.0" y="581" width="5.8" height="15.0" fill="rgb(100,100,209)" rx="2" ry="2" />
<text  x="262.95" y="591.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::release(TTASEventMutex&lt;GenericPolicy&gt; const*) (1 samples, 0.49%)</title><rect x="823.8" y="469" width="5.8" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="826.79" y="479.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.49%)</title><rect x="992.4" y="693" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="995.36" y="703.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;::_Rb_tree_const_iterator(std::_Rb_tree_node_base const*) (1 samples, 0.49%)</title><rect x="155.3" y="341" width="5.8" height="15.0" fill="rgb(123,123,229)" rx="2" ry="2" />
<text  x="158.32" y="351.5" ></text>
</g>
<g >
<title>btr_pcur_t::open(dict_index_t*, unsigned long, dtuple_t const*, page_cur_mode_t, unsigned long, mtr_t*, ut::Location) (2 samples, 0.99%)</title><rect x="1160.9" y="565" width="11.7" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="1163.94" y="575.5" ></text>
</g>
<g >
<title>rec_offs_nth_extern(dict_index_t const*, unsigned long const*, unsigned long) (1 samples, 0.49%)</title><rect x="213.4" y="533" width="5.9" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="216.45" y="543.5" ></text>
</g>
<g >
<title>LatchDebug::instance() (1 samples, 0.49%)</title><rect x="573.8" y="373" width="5.9" height="15.0" fill="rgb(81,81,191)" rx="2" ry="2" />
<text  x="576.84" y="383.5" ></text>
</g>
<g >
<title>trx_rseg_t::latch() (3 samples, 1.48%)</title><rect x="155.3" y="597" width="17.5" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="158.32" y="607.5" ></text>
</g>
<g >
<title>locksys::Latches::Unique_sharded_rw_lock::x_own() const (1 samples, 0.49%)</title><rect x="289.0" y="581" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="292.01" y="591.5" ></text>
</g>
<g >
<title>ib_lock_t const* Lock_iter::for_each&lt;lock_rec_other_has_expl_req(lock_mode, buf_block_t const*, bool, unsigned long, trx_t const*)::{lambda(ib_lock_t const*)#1}&gt;(RecID const&amp;, lock_rec_other_has_expl_req(lock_mode, buf_block_t const*, bool, unsigned long, trx_t const*)::{lambda(ib_lock_t const*)#1}&amp;&amp;, hash_table_t*) (1 samples, 0.49%)</title><rect x="248.3" y="469" width="5.8" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="251.33" y="479.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (1 samples, 0.49%)</title><rect x="1184.2" y="965" width="5.8" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="1187.19" y="975.5" ></text>
</g>
<g >
<title>trx_release_impl_and_expl_locks(trx_t*, bool) (1 samples, 0.49%)</title><rect x="178.6" y="709" width="5.8" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="181.57" y="719.5" ></text>
</g>
<g >
<title>log_flush_low(log_t&amp;) (1 samples, 0.49%)</title><rect x="533.2" y="725" width="5.8" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="536.15" y="735.5" ></text>
</g>
<g >
<title>void* ut::detail::Alloc_pfs::alloc&lt;false&gt;(unsigned long, unsigned int) (1 samples, 0.49%)</title><rect x="306.5" y="469" width="5.8" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="309.45" y="479.5" ></text>
</g>
<g >
<title>btr_cur_search_to_nth_level(dict_index_t*, unsigned long, dtuple_t const*, page_cur_mode_t, unsigned long, btr_cur_t*, unsigned long, char const*, unsigned long, mtr_t*) (4 samples, 1.97%)</title><rect x="254.1" y="629" width="23.3" height="15.0" fill="rgb(123,123,230)" rx="2" ry="2" />
<text  x="257.14" y="639.5" >b..</text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, Detached_thread, void (*)()&gt;(std::__invoke_other, Detached_thread&amp;&amp;, void (*&amp;&amp;)()) (2 samples, 0.99%)</title><rect x="568.0" y="885" width="11.7" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="571.03" y="895.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt;::operator()() (1 samples, 0.49%)</title><rect x="533.2" y="933" width="5.8" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="536.15" y="943.5" ></text>
</g>
<g >
<title>pfs_rw_lock_x_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="974.9" y="597" width="5.8" height="15.0" fill="rgb(118,118,224)" rx="2" ry="2" />
<text  x="977.93" y="607.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::lookup() (2 samples, 0.99%)</title><rect x="632.0" y="549" width="11.6" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="634.97" y="559.5" ></text>
</g>
<g >
<title>void dd::cache::Object_registry::create_map&lt;dd::cache::Local_multi_map&lt;dd::Spatial_reference_system&gt; &gt;(std::unique_ptr&lt;dd::cache::Local_multi_map&lt;dd::Spatial_reference_system&gt;, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Spatial_reference_system&gt; &gt; &gt;*) (1 samples, 0.49%)</title><rect x="393.6" y="661" width="5.9" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="396.65" y="671.5" ></text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(TTASEventMutex&lt;GenericPolicy&gt; const&amp;, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="230.9" y="357" width="5.8" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="233.89" y="367.5" ></text>
</g>
<g >
<title>Double_write::enqueue(buf_flush_t, buf_page_t*, file::Block const*) (1 samples, 0.49%)</title><rect x="573.8" y="613" width="5.9" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="576.84" y="623.5" ></text>
</g>
<g >
<title>locksys::rec_queue_latch_and_validate(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*) (1 samples, 0.49%)</title><rect x="126.3" y="533" width="5.8" height="15.0" fill="rgb(86,86,196)" rx="2" ry="2" />
<text  x="129.26" y="543.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void (*(log_t*))(log_t*)&gt;::__call&lt;void, , 0ul&gt;(std::tuple&lt;&gt;&amp;&amp;, std::_Index_tuple&lt;0ul&gt;) (2 samples, 0.99%)</title><rect x="521.5" y="837" width="11.7" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="524.53" y="847.5" ></text>
</g>
<g >
<title>btr_cur_del_mark_set_clust_rec(unsigned long, buf_block_t*, unsigned char*, dict_index_t*, unsigned long const*, que_thr_t*, dtuple_t const*, mtr_t*) (5 samples, 2.46%)</title><rect x="143.7" y="645" width="29.1" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="146.69" y="655.5" >bt..</text>
</g>
<g >
<title>locksys::owns_page_shard(page_id_t const&amp;) (1 samples, 0.49%)</title><rect x="236.7" y="405" width="5.8" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="239.70" y="415.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.99%)</title><rect x="521.5" y="981" width="11.7" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="524.53" y="991.5" ></text>
</g>
<g >
<title>dict_index_has_virtual(dict_index_t const*) (1 samples, 0.49%)</title><rect x="97.2" y="709" width="5.8" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="100.19" y="719.5" ></text>
</g>
<g >
<title>locksys::Global_shared_latch_guard::Global_shared_latch_guard(ut::Location) (1 samples, 0.49%)</title><rect x="306.5" y="613" width="5.8" height="15.0" fill="rgb(96,96,204)" rx="2" ry="2" />
<text  x="309.45" y="623.5" ></text>
</g>
<g >
<title>rw_lock_debug_create() (1 samples, 0.49%)</title><rect x="736.6" y="501" width="5.8" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="739.60" y="511.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::spin_and_try_lock(unsigned int, unsigned int, char const*, unsigned int) (10 samples, 4.93%)</title><rect x="1021.4" y="709" width="58.2" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="1024.43" y="719.5" >TTASEv..</text>
</g>
<g >
<title>pfs_rw_lock_s_lock_low(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="260.0" y="565" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="262.95" y="575.5" ></text>
</g>
<g >
<title>mtr_t::memo_contains_page_flagged(unsigned char const*, unsigned long) const (2 samples, 0.99%)</title><rect x="684.3" y="613" width="11.6" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="687.29" y="623.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt;::operator()() (12 samples, 5.91%)</title><rect x="1021.4" y="933" width="69.8" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="1024.43" y="943.5" >std::th..</text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.49%)</title><rect x="661.0" y="613" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="664.03" y="623.5" ></text>
</g>
<g >
<title>ut::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;char const* const, dict_index_t*&gt; &gt;, ut::detail::allocator_base_pfs&lt;std::pair&lt;char const* const, dict_index_t*&gt; &gt; &gt;::allocate(unsigned long, std::_Rb_tree_node&lt;std::pair&lt;char const* const, dict_index_t*&gt; &gt; const*) (1 samples, 0.49%)</title><rect x="347.1" y="709" width="5.9" height="15.0" fill="rgb(107,107,215)" rx="2" ry="2" />
<text  x="350.14" y="719.5" ></text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.49%)</title><rect x="289.0" y="549" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="292.01" y="559.5" ></text>
</g>
<g >
<title>row_search_mvcc(unsigned char*, page_cur_mode_t, row_prebuilt_t*, unsigned long, unsigned long) (2 samples, 0.99%)</title><rect x="97.2" y="725" width="11.6" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="100.19" y="735.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void (*&amp;)(log_t*), log_t*&amp;&gt;(std::__invoke_other, void (*&amp;)(log_t*), log_t*&amp;) (2 samples, 0.99%)</title><rect x="521.5" y="805" width="11.7" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="524.53" y="815.5" ></text>
</g>
<g >
<title>trx_purge_truncate_history(purge_iter_t*, ReadView const*) (49 samples, 24.14%)</title><rect x="713.3" y="725" width="284.9" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="716.35" y="735.5" >trx_purge_truncate_history(purge_iter_..</text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::trylock(char const*, unsigned int) (1 samples, 0.49%)</title><rect x="957.5" y="517" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="960.49" y="527.5" ></text>
</g>
<g >
<title>log_flusher(log_t*) (1 samples, 0.49%)</title><rect x="533.2" y="789" width="5.8" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="536.15" y="799.5" ></text>
</g>
<g >
<title>trx_reference(trx_t*) (1 samples, 0.49%)</title><rect x="225.1" y="421" width="5.8" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="228.07" y="431.5" ></text>
</g>
<g >
<title>trx_rseg_t::unlatch() (5 samples, 2.46%)</title><rect x="457.6" y="693" width="29.1" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="460.59" y="703.5" >tr..</text>
</g>
<g >
<title>lock_rec_lock(bool, select_mode, unsigned long, buf_block_t const*, unsigned long, dict_index_t*, que_thr_t*) (1 samples, 0.49%)</title><rect x="230.9" y="549" width="5.8" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="233.89" y="559.5" ></text>
</g>
<g >
<title>Find_page::get_block() const (1 samples, 0.49%)</title><rect x="759.9" y="629" width="5.8" height="15.0" fill="rgb(130,130,235)" rx="2" ry="2" />
<text  x="762.85" y="639.5" ></text>
</g>
<g >
<title>Sql_cmd_analyze_table::execute(THD*) (83 samples, 40.89%)</title><rect x="27.4" y="901" width="482.5" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="30.44" y="911.5" >Sql_cmd_analyze_table::execute(THD*)</text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(unsigned int, unsigned int, char const*, unsigned int) (1 samples, 0.49%)</title><rect x="527.3" y="709" width="5.9" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="530.34" y="719.5" ></text>
</g>
<g >
<title>btr_cur_optimistic_update(unsigned long, btr_cur_t*, unsigned long**, mem_block_info_t**, upd_t const*, unsigned long, que_thr_t*, unsigned long, mtr_t*) (5 samples, 2.46%)</title><rect x="56.5" y="661" width="29.1" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="59.50" y="671.5" >bt..</text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (1 samples, 0.49%)</title><rect x="666.8" y="629" width="5.9" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="669.85" y="639.5" ></text>
</g>
<g >
<title>rw_lock_x_unlock_gen(rw_lock_t*, unsigned long) (1 samples, 0.49%)</title><rect x="730.8" y="533" width="5.8" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="733.79" y="543.5" ></text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::locked(TTASEventMutex&lt;GenericPolicy&gt; const&amp;, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="178.6" y="533" width="5.8" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="181.57" y="543.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator() (1 samples, 0.49%)</title><rect x="544.8" y="725" width="5.8" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="547.78" y="735.5" ></text>
</g>
<g >
<title>rw_lock_add_debug_info(rw_lock_t*, unsigned long, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="260.0" y="549" width="5.8" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="262.95" y="559.5" ></text>
</g>
<g >
<title>Sharded_rw_lock::s_lock(ut::Location) (1 samples, 0.49%)</title><rect x="306.5" y="581" width="5.8" height="15.0" fill="rgb(87,87,197)" rx="2" ry="2" />
<text  x="309.45" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;char const*, std::pair&lt;char const* const, dict_index_t*&gt;, std::_Select1st&lt;std::pair&lt;char const* const, dict_index_t*&gt; &gt;, ut_strcmp_functor, ut::allocator&lt;std::pair&lt;char const* const, dict_index_t*&gt;, ut::detail::allocator_base_pfs&lt;std::pair&lt;char const* const, dict_index_t*&gt; &gt; &gt; &gt;::_M_get_node() (1 samples, 0.49%)</title><rect x="347.1" y="741" width="5.9" height="15.0" fill="rgb(130,130,235)" rx="2" ry="2" />
<text  x="350.14" y="751.5" ></text>
</g>
<g >
<title>buf_page_hash_lock_s_confirm(rw_lock_t*, buf_pool_t const*, page_id_t) (1 samples, 0.49%)</title><rect x="79.8" y="453" width="5.8" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="82.75" y="463.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::exit() (1 samples, 0.49%)</title><rect x="695.9" y="485" width="5.8" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="698.91" y="495.5" ></text>
</g>
<g >
<title>fseg_n_reserved_pages(unsigned char*, unsigned long*, mtr_t*) (2 samples, 0.99%)</title><rect x="382.0" y="741" width="11.6" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="385.02" y="751.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt; &gt;::~_State_impl() (2 samples, 0.99%)</title><rect x="521.5" y="997" width="11.7" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="524.53" y="1007.5" ></text>
</g>
<g >
<title>Lock_iter::first(hash_cell_t*, RecID const&amp;) (1 samples, 0.49%)</title><rect x="103.0" y="629" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="106.00" y="639.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::pfs_begin_lock(PSI_mutex_locker_state_v1*, char const*, unsigned int) (1 samples, 0.49%)</title><rect x="440.1" y="549" width="5.9" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="443.15" y="559.5" ></text>
</g>
<g >
<title>__futex_abstimed_wait_common (1 samples, 0.49%)</title><rect x="1178.4" y="1013" width="5.8" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="1181.37" y="1023.5" ></text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (1 samples, 0.49%)</title><rect x="707.5" y="629" width="5.8" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="710.54" y="639.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_enter() (1 samples, 0.49%)</title><rect x="643.6" y="549" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="646.60" y="559.5" ></text>
</g>
<g >
<title>os_file_flush_func(int) (1 samples, 0.49%)</title><rect x="533.2" y="677" width="5.8" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="536.15" y="687.5" ></text>
</g>
<g >
<title>locksys::rec_queue_latch_and_validate(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*) (2 samples, 0.99%)</title><rect x="289.0" y="629" width="11.6" height="15.0" fill="rgb(86,86,196)" rx="2" ry="2" />
<text  x="292.01" y="639.5" ></text>
</g>
<g >
<title>Find_page::get_block() const (2 samples, 0.99%)</title><rect x="765.7" y="613" width="11.6" height="15.0" fill="rgb(130,130,235)" rx="2" ry="2" />
<text  x="768.67" y="623.5" ></text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (1 samples, 0.49%)</title><rect x="184.4" y="613" width="5.8" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="187.38" y="623.5" ></text>
</g>
<g >
<title>trx_rsegf_get(unsigned int, unsigned int, page_size_t const&amp;, mtr_t*) (1 samples, 0.49%)</title><rect x="661.0" y="645" width="5.8" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="664.03" y="655.5" ></text>
</g>
<g >
<title>std::atomic&lt;PFS_buffer_default_array&lt;PFS_table&gt;*&gt;::load(std::memory_order) const (1 samples, 0.49%)</title><rect x="422.7" y="725" width="5.8" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="425.71" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;TABLE_SHARE, Table_share_deleter&gt; &gt;, Malloc_allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;TABLE_SHARE, Table_share_deleter&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node(unsigned long, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned long) const (1 samples, 0.49%)</title><rect x="428.5" y="821" width="5.8" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="431.52" y="831.5" ></text>
</g>
<g >
<title>que_eval_sql(pars_info_t*, char const*, trx_t*) (4 samples, 1.97%)</title><rect x="399.5" y="693" width="23.2" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="402.46" y="703.5" >q..</text>
</g>
<g >
<title>rw_lock_remove_debug_info(rw_lock_t*, unsigned long, unsigned long) (2 samples, 0.99%)</title><rect x="829.6" y="533" width="11.6" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="832.61" y="543.5" ></text>
</g>
<g >
<title>rw_lock_add_debug_info(rw_lock_t*, unsigned long, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="823.8" y="533" width="5.8" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="826.79" y="543.5" ></text>
</g>
<g >
<title>dyn_buf_t&lt;512ul&gt;::front() (1 samples, 0.49%)</title><rect x="91.4" y="613" width="5.8" height="15.0" fill="rgb(112,112,220)" rx="2" ry="2" />
<text  x="94.38" y="623.5" ></text>
</g>
<g >
<title>dtuple_validate(dtuple_t const*) (1 samples, 0.49%)</title><rect x="219.3" y="549" width="5.8" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="222.26" y="559.5" ></text>
</g>
<g >
<title>buf_do_flush_list_batch(buf_pool_t*, unsigned long, unsigned long) (2 samples, 0.99%)</title><rect x="568.0" y="725" width="11.7" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="571.03" y="735.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void (*&amp;)(log_t*), log_t*&amp;&gt;::type std::__invoke&lt;void (*&amp;)(log_t*), log_t*&amp;&gt;(void (*&amp;)(log_t*), log_t*&amp;) (2 samples, 0.99%)</title><rect x="521.5" y="821" width="11.7" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="524.53" y="831.5" ></text>
</g>
<g >
<title>void mutex_enter_inline&lt;PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt; &gt;(PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;*, ut::Location) (1 samples, 0.49%)</title><rect x="225.1" y="405" width="5.8" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="228.07" y="415.5" ></text>
</g>
<g >
<title>que_run_threads_low(que_thr_t*) (2 samples, 0.99%)</title><rect x="1079.6" y="741" width="11.6" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="1082.56" y="751.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.49%)</title><rect x="707.5" y="661" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="710.54" y="671.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.49%)</title><rect x="172.8" y="581" width="5.8" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="175.76" y="591.5" ></text>
</g>
<g >
<title>mach_read_from_4(unsigned char const*) (1 samples, 0.49%)</title><rect x="358.8" y="645" width="5.8" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="361.77" y="655.5" ></text>
</g>
<g >
<title>hash_calc_cell_id(unsigned long, hash_table_t*) (1 samples, 0.49%)</title><rect x="242.5" y="389" width="5.8" height="15.0" fill="rgb(134,134,240)" rx="2" ry="2" />
<text  x="245.51" y="399.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_other&gt;::single_page() (1 samples, 0.49%)</title><rect x="748.2" y="613" width="5.8" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="751.23" y="623.5" ></text>
</g>
<g >
<title>buf_pool_validate_instance(buf_pool_t*) (1 samples, 0.49%)</title><rect x="678.5" y="565" width="5.8" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="681.47" y="575.5" ></text>
</g>
<g >
<title>Iterate&lt;Release_all&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (1 samples, 0.49%)</title><rect x="132.1" y="629" width="5.8" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="135.07" y="639.5" ></text>
</g>
<g >
<title>locksys::Latches::Page_shards::get_mutex(page_id_t const&amp;) const (1 samples, 0.49%)</title><rect x="294.8" y="533" width="5.8" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="297.83" y="543.5" ></text>
</g>
<g >
<title>buf_validate() (1 samples, 0.49%)</title><rect x="155.3" y="501" width="5.8" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="158.32" y="511.5" ></text>
</g>
<g >
<title>row_ins_clust_index_entry_low(unsigned int, unsigned long, dict_index_t*, unsigned long, dtuple_t*, que_thr_t*, bool) (8 samples, 3.94%)</title><rect x="207.6" y="613" width="46.5" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="210.64" y="623.5" >row_..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create(unsigned long&amp;, unsigned long) (1 samples, 0.49%)</title><rect x="10.0" y="981" width="5.8" height="15.0" fill="rgb(97,97,206)" rx="2" ry="2" />
<text  x="13.00" y="991.5" ></text>
</g>
<g >
<title>trx_commit_low(trx_t*, mtr_t*) (4 samples, 1.97%)</title><rect x="172.8" y="741" width="23.2" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="175.76" y="751.5" >t..</text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.49%)</title><rect x="585.5" y="581" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="588.47" y="591.5" ></text>
</g>
<g >
<title>rw_lock_s_lock(rw_lock_t*, ut::Location) (1 samples, 0.49%)</title><rect x="695.9" y="549" width="5.8" height="15.0" fill="rgb(118,118,224)" rx="2" ry="2" />
<text  x="698.91" y="559.5" ></text>
</g>
<g >
<title>memo_slot_release(mtr_memo_slot_t*) (1 samples, 0.49%)</title><rect x="713.3" y="613" width="5.9" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="716.35" y="623.5" ></text>
</g>
<g >
<title>locksys::Latches::Unique_sharded_rw_lock::x_own() const (1 samples, 0.49%)</title><rect x="230.9" y="437" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="233.89" y="447.5" ></text>
</g>
<g >
<title>dict_stats_analyze_index(dict_index_t*) (2 samples, 0.99%)</title><rect x="382.0" y="789" width="11.6" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="385.02" y="799.5" ></text>
</g>
<g >
<title>buf_page_t::Latching_rules_helpers::assert_latches_let_distinguish(buf_page_t const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) (1 samples, 0.49%)</title><rect x="405.3" y="453" width="5.8" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="408.27" y="463.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (3 samples, 1.48%)</title><rect x="823.8" y="613" width="17.4" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="826.79" y="623.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::trylock(char const*, unsigned int) (1 samples, 0.49%)</title><rect x="446.0" y="533" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="448.96" y="543.5" ></text>
</g>
<g >
<title>std::thread::id::id(unsigned long) (1 samples, 0.49%)</title><rect x="196.0" y="629" width="5.8" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="199.01" y="639.5" ></text>
</g>
<g >
<title>trx_undo_page_get(page_id_t const&amp;, page_size_t const&amp;, mtr_t*) (3 samples, 1.48%)</title><rect x="823.8" y="661" width="17.4" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="826.79" y="671.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Release_all&gt; &gt;(Iterate&lt;Release_all&gt;&amp;) const (1 samples, 0.49%)</title><rect x="713.3" y="661" width="5.9" height="15.0" fill="rgb(114,114,222)" rx="2" ry="2" />
<text  x="716.35" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;buf_io_fix&gt;* std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_Alloc_node::operator()&lt;buf_io_fix const&amp;&gt;(buf_io_fix const&amp;) const (1 samples, 0.49%)</title><rect x="405.3" y="293" width="5.8" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="408.27" y="303.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::policy() (1 samples, 0.49%)</title><rect x="725.0" y="437" width="5.8" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="727.98" y="447.5" ></text>
</g>
<g >
<title>row_sel_restore_pcur_pos(plan_t*, mtr_t*) (3 samples, 1.48%)</title><rect x="405.3" y="597" width="17.4" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="408.27" y="607.5" ></text>
</g>
<g >
<title>pfs_spawn_thread (84 samples, 41.38%)</title><rect x="27.4" y="997" width="488.3" height="15.0" fill="rgb(81,81,190)" rx="2" ry="2" />
<text  x="30.44" y="1007.5" >pfs_spawn_thread</text>
</g>
<g >
<title>row_ins_set_rec_lock(lock_mode, unsigned long, buf_block_t const*, unsigned char const*, dict_index_t*, unsigned long const*, que_thr_t*) (4 samples, 1.97%)</title><rect x="230.9" y="581" width="23.2" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="233.89" y="591.5" >r..</text>
</g>
<g >
<title>open_and_lock_tables(THD*, Table_ref*, unsigned int, Prelocking_strategy*) (6 samples, 2.96%)</title><rect x="393.6" y="853" width="34.9" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="396.65" y="863.5" >op..</text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (2 samples, 0.99%)</title><rect x="143.7" y="613" width="11.6" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="146.69" y="623.5" ></text>
</g>
<g >
<title>rw_lock_s_lock_gen(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="446.0" y="597" width="5.8" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="448.96" y="607.5" ></text>
</g>
<g >
<title>buf_flush_batch(buf_pool_t*, buf_flush_t, unsigned long, unsigned long) (2 samples, 0.99%)</title><rect x="568.0" y="741" width="11.7" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="571.03" y="751.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (1 samples, 0.49%)</title><rect x="707.5" y="677" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="710.54" y="687.5" ></text>
</g>
<g >
<title>mtr_t::memo_contains_page_flagged(unsigned char const*, unsigned long) const (1 samples, 0.49%)</title><rect x="387.8" y="677" width="5.8" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="390.83" y="687.5" ></text>
</g>
<g >
<title>Log_files_write_impl::prepare_full_blocks(log_t const&amp;, unsigned char*, unsigned long, unsigned long) (1 samples, 0.49%)</title><rect x="556.4" y="741" width="5.8" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="559.40" y="751.5" ></text>
</g>
<g >
<title>hash_table_t::get_n_cells_fast_modulo() (1 samples, 0.49%)</title><rect x="242.5" y="373" width="5.8" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="245.51" y="383.5" ></text>
</g>
<g >
<title>ut::hash_uint64(unsigned long) (1 samples, 0.49%)</title><rect x="678.5" y="501" width="5.8" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="681.47" y="511.5" ></text>
</g>
<g >
<title>trx_mutex_own(trx_t const*) (1 samples, 0.49%)</title><rect x="1149.3" y="709" width="5.8" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="1152.31" y="719.5" ></text>
</g>
<g >
<title>void mutex_enter_inline&lt;PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt; &gt;(PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;*, ut::Location) (10 samples, 4.93%)</title><rect x="1021.4" y="757" width="58.2" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="1024.43" y="767.5" >void m..</text>
</g>
<g >
<title>unsigned long dd::cache::Dictionary_client::release&lt;dd::Spatial_reference_system&gt;(dd::cache::Object_registry*) (1 samples, 0.49%)</title><rect x="393.6" y="741" width="5.9" height="15.0" fill="rgb(94,94,202)" rx="2" ry="2" />
<text  x="396.65" y="751.5" ></text>
</g>
<g >
<title>buf_page_hash_lock_held_s(buf_pool_t const*, buf_page_t const*) (1 samples, 0.49%)</title><rect x="486.7" y="549" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="489.65" y="559.5" ></text>
</g>
<g >
<title>locksys::rec_queue_validate_latched(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*) (1 samples, 0.49%)</title><rect x="294.8" y="613" width="5.8" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="297.83" y="623.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::is_free(unsigned int, unsigned int, unsigned int&amp;) const (10 samples, 4.93%)</title><rect x="1021.4" y="693" width="58.2" height="15.0" fill="rgb(136,136,242)" rx="2" ry="2" />
<text  x="1024.43" y="703.5" >TTASEv..</text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::lookup() (1 samples, 0.49%)</title><rect x="695.9" y="565" width="5.8" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="698.91" y="575.5" ></text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::locked(TTASEventMutex&lt;GenericPolicy&gt; const&amp;, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="754.0" y="549" width="5.9" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="757.04" y="559.5" ></text>
</g>
<g >
<title>trx_sys_t::latch_and_execute_with_active_trx&lt;trx_rw_is_active(unsigned long, bool)::{lambda(trx_t*)#1}&gt;(unsigned long, trx_rw_is_active(unsigned long, bool)::{lambda(trx_t*)#1}&amp;&amp;, ut::Location const&amp;)::{lambda(Trx_by_id_with_min&amp;)#1}::operator()(Trx_by_id_with_min&amp;) const (1 samples, 0.49%)</title><rect x="225.1" y="453" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="228.07" y="463.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::peek_owner() const (1 samples, 0.49%)</title><rect x="312.3" y="517" width="5.8" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="315.27" y="527.5" ></text>
</g>
<g >
<title>trx_rsegf_get_nth_undo(unsigned char*, unsigned long, mtr_t*) (2 samples, 0.99%)</title><rect x="585.5" y="645" width="11.6" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="588.47" y="655.5" ></text>
</g>
<g >
<title>__napi_poll (1 samples, 0.49%)</title><rect x="318.1" y="373" width="5.8" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="321.08" y="383.5" ></text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.49%)</title><rect x="323.9" y="485" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="326.89" y="495.5" ></text>
</g>
<g >
<title>que_run_threads_low(que_thr_t*) (10 samples, 4.93%)</title><rect x="114.6" y="741" width="58.2" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="117.63" y="751.5" >que_ru..</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt; &gt;::~_State_impl() (12 samples, 5.91%)</title><rect x="1021.4" y="997" width="69.8" height="15.0" fill="rgb(81,81,190)" rx="2" ry="2" />
<text  x="1024.43" y="1007.5" >std::th..</text>
</g>
<g >
<title>std::enable_if&lt;ut::detail::Alloc_pfs::is_pfs_instrumented_v, void*&gt;::type ut::detail::Alloc_&lt;ut::detail::Alloc_pfs&gt;::alloc&lt;false, ut::detail::Alloc_pfs&gt;(unsigned long, unsigned int) (1 samples, 0.49%)</title><rect x="672.7" y="453" width="5.8" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="675.66" y="463.5" ></text>
</g>
<g >
<title>bool dd::cache::Dictionary_client::acquire&lt;dd::Table&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, Stateless_allocator&lt;char, dd::String_type_alloc, My_free_functor&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, Stateless_allocator&lt;char, dd::String_type_alloc, My_free_functor&gt; &gt; const&amp;, dd::Table const**) (1 samples, 0.49%)</title><rect x="393.6" y="789" width="5.9" height="15.0" fill="rgb(131,131,237)" rx="2" ry="2" />
<text  x="396.65" y="799.5" ></text>
</g>
<g >
<title>pfs_rw_lock_x_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="56.5" y="453" width="5.8" height="15.0" fill="rgb(118,118,224)" rx="2" ry="2" />
<text  x="59.50" y="463.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::is_owned() const (1 samples, 0.49%)</title><rect x="707.5" y="549" width="5.8" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="710.54" y="559.5" ></text>
</g>
<g >
<title>__tcp_push_pending_frames (1 samples, 0.49%)</title><rect x="15.8" y="837" width="5.8" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="18.81" y="847.5" ></text>
</g>
<g >
<title>__ip_queue_xmit (1 samples, 0.49%)</title><rect x="318.1" y="197" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="321.08" y="207.5" ></text>
</g>
<g >
<title>Sharded_rw_lock::s_lock(ut::Location) (1 samples, 0.49%)</title><rect x="126.3" y="469" width="5.8" height="15.0" fill="rgb(87,87,197)" rx="2" ry="2" />
<text  x="129.26" y="479.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(unsigned int, unsigned int, char const*, unsigned int) (1 samples, 0.49%)</title><rect x="754.0" y="565" width="5.9" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="757.04" y="575.5" ></text>
</g>
<g >
<title>row_purge_end(que_thr_t*) (1 samples, 0.49%)</title><rect x="1172.6" y="693" width="5.8" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="1175.56" y="703.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt; &gt;::_M_run() (2 samples, 0.99%)</title><rect x="556.4" y="949" width="11.6" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="559.40" y="959.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_exit() (1 samples, 0.49%)</title><rect x="748.2" y="501" width="5.8" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="751.23" y="511.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (2 samples, 0.99%)</title><rect x="736.6" y="613" width="11.6" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="739.60" y="623.5" ></text>
</g>
<g >
<title>locksys::Latches::owns_shared_global_latch() const (1 samples, 0.49%)</title><rect x="137.9" y="565" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="140.88" y="575.5" ></text>
</g>
<g >
<title>que_thr_step(que_thr_t*) (4 samples, 1.97%)</title><rect x="399.5" y="645" width="23.2" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="402.46" y="655.5" >q..</text>
</g>
<g >
<title>mtr_t::commit() (1 samples, 0.49%)</title><rect x="132.1" y="677" width="5.8" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="135.07" y="687.5" ></text>
</g>
<g >
<title>fseg_inode_try_get(unsigned char const*, unsigned int, page_size_t const&amp;, mtr_t*, buf_block_t**) (1 samples, 0.49%)</title><rect x="382.0" y="709" width="5.8" height="15.0" fill="rgb(135,135,241)" rx="2" ry="2" />
<text  x="385.02" y="719.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(unsigned int, unsigned int, char const*, unsigned int) (1 samples, 0.49%)</title><rect x="225.1" y="389" width="5.8" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="228.07" y="399.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.49%)</title><rect x="155.3" y="533" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="158.32" y="543.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::try_lock() (1 samples, 0.49%)</title><rect x="56.5" y="373" width="5.8" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="59.50" y="383.5" ></text>
</g>
<g >
<title>trx_purge_truncate_rseg_history(trx_rseg_t*, purge_iter_t const*) (49 samples, 24.14%)</title><rect x="713.3" y="709" width="284.9" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="716.35" y="719.5" >trx_purge_truncate_rseg_history(trx_rs..</text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (4 samples, 1.97%)</title><rect x="847.0" y="629" width="23.3" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="850.04" y="639.5" >b..</text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.49%)</title><rect x="1160.9" y="533" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="1163.94" y="543.5" ></text>
</g>
<g >
<title>row_purge(purge_node_t*, unsigned char*, que_thr_t*) (3 samples, 1.48%)</title><rect x="1155.1" y="693" width="17.5" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="1158.12" y="703.5" ></text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(TTASEventMutex&lt;GenericPolicy&gt; const&amp;, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="364.6" y="581" width="5.8" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="367.58" y="591.5" ></text>
</g>
<g >
<title>trx_rseg_t::latch() (2 samples, 0.99%)</title><rect x="608.7" y="661" width="11.6" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="611.72" y="671.5" ></text>
</g>
<g >
<title>rw_lock_debug_create() (1 samples, 0.49%)</title><rect x="306.5" y="517" width="5.8" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="309.45" y="527.5" ></text>
</g>
<g >
<title>btr_cur_search_to_nth_level(dict_index_t*, unsigned long, dtuple_t const*, page_cur_mode_t, unsigned long, btr_cur_t*, unsigned long, char const*, unsigned long, mtr_t*) (1 samples, 0.49%)</title><rect x="1085.4" y="549" width="5.8" height="15.0" fill="rgb(123,123,230)" rx="2" ry="2" />
<text  x="1088.37" y="559.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.49%)</title><rect x="184.4" y="629" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="187.38" y="639.5" ></text>
</g>
<g >
<title>mach_read_ulint(unsigned char const*, mlog_id_t) (1 samples, 0.49%)</title><rect x="358.8" y="661" width="5.8" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="361.77" y="671.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt;::operator()() (73 samples, 35.96%)</title><rect x="579.7" y="933" width="424.3" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="582.66" y="943.5" >std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*..</text>
</g>
<g >
<title>void hardware::consume_chunks&lt;168ul, 3ul, hardware::use_pclmul&gt;(unsigned int&amp;, unsigned char const*&amp;, unsigned long&amp;) (1 samples, 0.49%)</title><rect x="556.4" y="629" width="5.8" height="15.0" fill="rgb(99,99,208)" rx="2" ry="2" />
<text  x="559.40" y="639.5" ></text>
</g>
<g >
<title>Double_write::write_data_pages(buf_flush_t, unsigned short) (1 samples, 0.49%)</title><rect x="573.8" y="565" width="5.9" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="576.84" y="575.5" ></text>
</g>
<g >
<title>dd::Raw_table::prepare_record_for_update(dd::Object_key const&amp;, std::unique_ptr&lt;dd::Raw_record, std::default_delete&lt;dd::Raw_record&gt; &gt;&amp;) (2 samples, 0.99%)</title><rect x="97.2" y="805" width="11.6" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="100.19" y="815.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.49%)</title><rect x="480.8" y="565" width="5.9" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="483.84" y="575.5" ></text>
</g>
<g >
<title>locksys::Latches::Page_shards::get_shard(page_id_t const&amp;) (1 samples, 0.49%)</title><rect x="242.5" y="405" width="5.8" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="245.51" y="415.5" ></text>
</g>
<g >
<title>row_upd(upd_node_t*, que_thr_t*) (8 samples, 3.94%)</title><rect x="50.7" y="709" width="46.5" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="53.69" y="719.5" >row_..</text>
</g>
<g >
<title>btr_cur_upd_lock_and_undo(unsigned long, btr_cur_t*, unsigned long const*, upd_t const*, unsigned long, que_thr_t*, mtr_t*, unsigned long*) (2 samples, 0.99%)</title><rect x="120.4" y="565" width="11.7" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="123.44" y="575.5" ></text>
</g>
<g >
<title>close_open_tables(THD*) (1 samples, 0.49%)</title><rect x="33.3" y="853" width="5.8" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="36.25" y="863.5" ></text>
</g>
<g >
<title>log_free_check_validate() (1 samples, 0.49%)</title><rect x="201.8" y="677" width="5.8" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="204.82" y="687.5" ></text>
</g>
<g >
<title>unlikely(bool) (2 samples, 0.99%)</title><rect x="945.9" y="629" width="11.6" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="948.86" y="639.5" ></text>
</g>
<g >
<title>[unknown] (73 samples, 35.96%)</title><rect x="579.7" y="1013" width="424.3" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="582.66" y="1023.5" >[unknown]</text>
</g>
<g >
<title>fil_space_get_page_size(unsigned int, bool*) (1 samples, 0.49%)</title><rect x="754.0" y="613" width="5.9" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="757.04" y="623.5" ></text>
</g>
<g >
<title>ut::malloc_withkey(ut::PSI_memory_key_t, unsigned long) (1 samples, 0.49%)</title><rect x="736.6" y="485" width="5.8" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="739.60" y="495.5" ></text>
</g>
<g >
<title>Fil_shard::acquire(int) const (1 samples, 0.49%)</title><rect x="754.0" y="581" width="5.9" height="15.0" fill="rgb(136,136,241)" rx="2" ry="2" />
<text  x="757.04" y="591.5" ></text>
</g>
<g >
<title>locksys::Global_shared_latch_guard::Global_shared_latch_guard(ut::Location) (1 samples, 0.49%)</title><rect x="126.3" y="501" width="5.8" height="15.0" fill="rgb(96,96,204)" rx="2" ry="2" />
<text  x="129.26" y="511.5" ></text>
</g>
<g >
<title>log_flusher(log_t*)::{lambda(bool)#1}::operator()(bool) const (1 samples, 0.49%)</title><rect x="533.2" y="741" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="536.15" y="751.5" ></text>
</g>
<g >
<title>Double_write::submit(buf_flush_t, buf_page_t*, file::Block const*) (1 samples, 0.49%)</title><rect x="573.8" y="629" width="5.9" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="576.84" y="639.5" ></text>
</g>
<g >
<title>Wait_stats os_event_wait_for&lt;log_wait_for_flush(log_t const&amp;, unsigned long, bool*)::{lambda(bool)#1}&gt;(os_event*&amp;, unsigned long, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;, log_wait_for_flush(log_t const&amp;, unsigned long, bool*)::{lambda(bool)#1}) (1 samples, 0.49%)</title><rect x="172.8" y="645" width="5.8" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="175.76" y="655.5" ></text>
</g>
<g >
<title>page_align(void const*) (1 samples, 0.49%)</title><rect x="283.2" y="581" width="5.8" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="286.20" y="591.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (3 samples, 1.48%)</title><rect x="1004.0" y="869" width="17.4" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="1006.99" y="879.5" ></text>
</g>
<g >
<title>buf_pool_watch_is_sentinel(buf_pool_t const*, buf_page_t const*) (1 samples, 0.49%)</title><rect x="748.2" y="565" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="751.23" y="575.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (1 samples, 0.49%)</title><rect x="184.4" y="661" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="187.38" y="671.5" ></text>
</g>
<g >
<title>srv_suspend_thread(srv_slot_t*) (9 samples, 4.43%)</title><rect x="1097.0" y="773" width="52.3" height="15.0" fill="rgb(95,95,204)" rx="2" ry="2" />
<text  x="1100.00" y="783.5" >srv_s..</text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.49%)</title><rect x="56.5" y="501" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="59.50" y="511.5" ></text>
</g>
<g >
<title>void log_sync_point&lt;31ul&gt;(char const (&amp;) [31ul]) (1 samples, 0.49%)</title><rect x="492.5" y="677" width="5.8" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="495.46" y="687.5" ></text>
</g>
<g >
<title>rw_lock_x_lock_low(rw_lock_t*, unsigned long, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="736.6" y="533" width="5.8" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="739.60" y="543.5" ></text>
</g>
<g >
<title>row_ins_step(que_thr_t*) (2 samples, 0.99%)</title><rect x="120.4" y="709" width="11.7" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="123.44" y="719.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;Detached_thread, void (*)(log_t*), log_t*&gt;::type std::__invoke&lt;Detached_thread, void (*)(log_t*), log_t*&gt;(Detached_thread&amp;&amp;, void (*&amp;&amp;)(log_t*), log_t*&amp;&amp;) (2 samples, 0.99%)</title><rect x="521.5" y="901" width="11.7" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="524.53" y="911.5" ></text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(TTASEventMutex&lt;GenericPolicy&gt; const&amp;, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="835.4" y="485" width="5.8" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="838.42" y="495.5" ></text>
</g>
<g >
<title>buf_pool_watch_is_sentinel(buf_pool_t const*, buf_page_t const*) (1 samples, 0.49%)</title><rect x="1160.9" y="469" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="1163.94" y="479.5" ></text>
</g>
<g >
<title>locksys::try_release_all_locks(trx_t*) (1 samples, 0.49%)</title><rect x="178.6" y="677" width="5.8" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="181.57" y="687.5" ></text>
</g>
<g >
<title>cmp_data(unsigned long, unsigned long, bool, unsigned char const*, unsigned long, unsigned char const*, unsigned long) (1 samples, 0.49%)</title><rect x="265.8" y="581" width="5.8" height="15.0" fill="rgb(136,136,241)" rx="2" ry="2" />
<text  x="268.76" y="591.5" ></text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (2 samples, 0.99%)</title><rect x="620.3" y="613" width="11.7" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="623.34" y="623.5" ></text>
</g>
<g >
<title>tdc_remove_table(THD*, enum_tdc_remove_table_type, char const*, char const*, bool) (1 samples, 0.49%)</title><rect x="428.5" y="869" width="5.8" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="431.52" y="879.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::trylock(char const*, unsigned int) (1 samples, 0.49%)</title><rect x="260.0" y="517" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="262.95" y="527.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (1 samples, 0.49%)</title><rect x="364.6" y="677" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="367.58" y="687.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (3 samples, 1.48%)</title><rect x="539.0" y="965" width="17.4" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="541.97" y="975.5" ></text>
</g>
<g >
<title>create_table(PFS_table_share*, PFS_thread*, void const*) (1 samples, 0.49%)</title><rect x="422.7" y="741" width="5.8" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="425.71" y="751.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Find_page&gt; &gt;(Iterate&lt;Find_page&gt;&amp;) const (5 samples, 2.46%)</title><rect x="916.8" y="613" width="29.1" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="919.80" y="623.5" >bo..</text>
</g>
<g >
<title>Iterate&lt;Find_page&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (5 samples, 2.46%)</title><rect x="916.8" y="597" width="29.1" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="919.80" y="607.5" >It..</text>
</g>
<g >
<title>trx_undo_page_get(page_id_t const&amp;, page_size_t const&amp;, mtr_t*) (1 samples, 0.49%)</title><rect x="184.4" y="677" width="5.8" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="187.38" y="687.5" ></text>
</g>
<g >
<title>fil_validate_skip() (1 samples, 0.49%)</title><rect x="573.8" y="501" width="5.9" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="576.84" y="511.5" ></text>
</g>
<g >
<title>File_segment_inode::read_not_full_n_used() const (1 samples, 0.49%)</title><rect x="387.8" y="709" width="5.8" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="390.83" y="719.5" ></text>
</g>
<g >
<title>std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; std::__set_difference&lt;std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_less_iter&gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_less_iter) (1 samples, 0.49%)</title><rect x="405.3" y="389" width="5.8" height="15.0" fill="rgb(110,110,218)" rx="2" ry="2" />
<text  x="408.27" y="399.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::trylock(char const*, unsigned int) (1 samples, 0.49%)</title><rect x="364.6" y="597" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="367.58" y="607.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.49%)</title><rect x="323.9" y="517" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="326.89" y="527.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::trylock(char const*, unsigned int) (1 samples, 0.49%)</title><rect x="1160.9" y="389" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="1163.94" y="399.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void (*())()&gt;::operator()&lt;, void&gt;() (1 samples, 0.49%)</title><rect x="1184.2" y="853" width="5.8" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="1187.19" y="863.5" ></text>
</g>
<g >
<title>Gtid::to_string(Sid_map const*, char*, bool) const (1 samples, 0.49%)</title><rect x="509.9" y="805" width="5.8" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="512.90" y="815.5" ></text>
</g>
<g >
<title>trx_undo_page_get(page_id_t const&amp;, page_size_t const&amp;, mtr_t*) (1 samples, 0.49%)</title><rect x="986.6" y="693" width="5.8" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="989.55" y="703.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.49%)</title><rect x="533.2" y="1013" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="536.15" y="1023.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (2 samples, 0.99%)</title><rect x="568.0" y="965" width="11.7" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="571.03" y="975.5" ></text>
</g>
<g >
<title>cmp_rec_rec_with_match(unsigned char const*, unsigned char const*, unsigned long const*, unsigned long const*, dict_index_t const*, bool, bool, unsigned long*, bool) (1 samples, 0.49%)</title><rect x="416.9" y="549" width="5.8" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="419.90" y="559.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.49%)</title><rect x="515.7" y="1013" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="518.71" y="1023.5" ></text>
</g>
<g >
<title>void* ut::detail::Alloc_pfs::alloc&lt;false&gt;(unsigned long, unsigned int) (1 samples, 0.49%)</title><rect x="672.7" y="437" width="5.8" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="675.66" y="447.5" ></text>
</g>
<g >
<title>trx_undo_assign_undo(trx_t*, trx_undo_ptr_t*, unsigned long) (3 samples, 1.48%)</title><rect x="318.1" y="597" width="17.4" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="321.08" y="607.5" ></text>
</g>
<g >
<title>lock_clust_rec_read_check_and_lock(lock_duration_t, buf_block_t const*, unsigned char const*, dict_index_t*, unsigned long const*, select_mode, lock_mode, unsigned long, que_thr_t*) (1 samples, 0.49%)</title><rect x="103.0" y="693" width="5.8" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="106.00" y="703.5" ></text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (2 samples, 0.99%)</title><rect x="585.5" y="629" width="11.6" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="588.47" y="639.5" ></text>
</g>
<g >
<title>rw_lock_s_unlock(rw_lock_t*) (2 samples, 0.99%)</title><rect x="829.6" y="581" width="11.6" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="832.61" y="591.5" ></text>
</g>
<g >
<title>trx_rsegf_get_nth_undo(unsigned char*, unsigned long, mtr_t*) (3 samples, 1.48%)</title><rect x="62.3" y="549" width="17.5" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="65.32" y="559.5" ></text>
</g>
<g >
<title>__x64_sys_futex (3 samples, 1.48%)</title><rect x="1004.0" y="965" width="17.4" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="1006.99" y="975.5" ></text>
</g>
<g >
<title>rw_lock_s_lock_gen(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="126.3" y="453" width="5.8" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="129.26" y="463.5" ></text>
</g>
<g >
<title>buf_validate() (1 samples, 0.49%)</title><rect x="678.5" y="581" width="5.8" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="681.47" y="591.5" ></text>
</g>
<g >
<title>rw_lock_s_lock(rw_lock_t*, ut::Location) (1 samples, 0.49%)</title><rect x="963.3" y="565" width="5.8" height="15.0" fill="rgb(118,118,224)" rx="2" ry="2" />
<text  x="966.30" y="575.5" ></text>
</g>
<g >
<title>trx_commit_in_memory(trx_t*, mtr_t const*, bool) (2 samples, 0.99%)</title><rect x="172.8" y="725" width="11.6" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="175.76" y="735.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(TTASEventMutex&lt;GenericPolicy&gt; const*, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="527.3" y="677" width="5.9" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="530.34" y="687.5" ></text>
</g>
<g >
<title>Lock_iter::first(hash_cell_t*, RecID const&amp;) (1 samples, 0.49%)</title><rect x="294.8" y="581" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="297.83" y="591.5" ></text>
</g>
<g >
<title>std::__cmpexch_failure_order(std::memory_order) (1 samples, 0.49%)</title><rect x="289.0" y="469" width="5.8" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="292.01" y="479.5" ></text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt;::_M_invoke&lt;0ul, 1ul, 2ul&gt;(std::_Index_tuple&lt;0ul, 1ul, 2ul&gt;) (2 samples, 0.99%)</title><rect x="521.5" y="917" width="11.7" height="15.0" fill="rgb(131,131,236)" rx="2" ry="2" />
<text  x="524.53" y="927.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.49%)</title><rect x="329.7" y="533" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="332.70" y="543.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.49%)</title><rect x="10.0" y="997" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="13.00" y="1007.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_other&gt;::lookup() (1 samples, 0.49%)</title><rect x="748.2" y="581" width="5.8" height="15.0" fill="rgb(81,81,191)" rx="2" ry="2" />
<text  x="751.23" y="591.5" ></text>
</g>
<g >
<title>locksys::Global_shared_latch_guard::Global_shared_latch_guard(ut::Location) (1 samples, 0.49%)</title><rect x="178.6" y="661" width="5.8" height="15.0" fill="rgb(96,96,204)" rx="2" ry="2" />
<text  x="181.57" y="671.5" ></text>
</g>
<g >
<title>trx_undo_page_get_s_latched(page_id_t const&amp;, page_size_t const&amp;, mtr_t*) (1 samples, 0.49%)</title><rect x="649.4" y="645" width="5.8" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="652.41" y="655.5" ></text>
</g>
<g >
<title>Fil_shard::space_load(unsigned int) (1 samples, 0.49%)</title><rect x="980.7" y="613" width="5.9" height="15.0" fill="rgb(112,112,220)" rx="2" ry="2" />
<text  x="983.74" y="623.5" ></text>
</g>
<g >
<title>log_flush_notifier(log_t*)::{lambda(bool)#1}::operator()(bool) const (2 samples, 0.99%)</title><rect x="521.5" y="741" width="11.7" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="524.53" y="751.5" ></text>
</g>
<g >
<title>rw_lock_x_lock_gen(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="672.7" y="565" width="5.8" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="675.66" y="575.5" ></text>
</g>
<g >
<title>dd::Raw_record::update() (8 samples, 3.94%)</title><rect x="50.7" y="805" width="46.5" height="15.0" fill="rgb(109,109,216)" rx="2" ry="2" />
<text  x="53.69" y="815.5" >dd::..</text>
</g>
<g >
<title>row_purge_record(purge_node_t*, unsigned char*, que_thr_t const*, bool, THD*) (2 samples, 0.99%)</title><rect x="1079.6" y="677" width="11.6" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="1082.56" y="687.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_enter() (1 samples, 0.49%)</title><rect x="847.0" y="565" width="5.9" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="850.04" y="575.5" ></text>
</g>
<g >
<title>locksys::Latches::owns_page_shard(page_id_t const&amp;) const (1 samples, 0.49%)</title><rect x="294.8" y="549" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="297.83" y="559.5" ></text>
</g>
<g >
<title>btr_cur_search_to_nth_level(dict_index_t*, unsigned long, dtuple_t const*, page_cur_mode_t, unsigned long, btr_cur_t*, unsigned long, char const*, unsigned long, mtr_t*) (2 samples, 0.99%)</title><rect x="1160.9" y="549" width="11.7" height="15.0" fill="rgb(123,123,230)" rx="2" ry="2" />
<text  x="1163.94" y="559.5" ></text>
</g>
<g >
<title>void hardware::Loop&lt;2ul&gt;::run&lt;hardware::Update_step_executor&lt;hardware::use_pclmul, 168ul&gt;, unsigned long (&amp;) [3], unsigned long const*&amp;&gt;(unsigned long (&amp;) [3], unsigned long const*&amp;) (1 samples, 0.49%)</title><rect x="556.4" y="581" width="5.8" height="15.0" fill="rgb(125,125,232)" rx="2" ry="2" />
<text  x="559.40" y="591.5" ></text>
</g>
<g >
<title>void* ut::detail::Alloc_pfs::alloc&lt;false&gt;(unsigned long, unsigned int) (1 samples, 0.49%)</title><rect x="347.1" y="645" width="5.9" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="350.14" y="655.5" ></text>
</g>
<g >
<title>pfs_rw_lock_x_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="736.6" y="565" width="5.8" height="15.0" fill="rgb(118,118,224)" rx="2" ry="2" />
<text  x="739.60" y="575.5" ></text>
</g>
<g >
<title>trx_rsegf_get_nth_undo(unsigned char*, unsigned long, mtr_t*) (2 samples, 0.99%)</title><rect x="370.4" y="693" width="11.6" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="373.39" y="703.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void (*())()&gt;::operator()&lt;, void&gt;() (73 samples, 35.96%)</title><rect x="579.7" y="853" width="424.3" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="582.66" y="863.5" >void std::_Bind&lt;void (*())()&gt;::operator()&lt;, void&gt;()</text>
</g>
<g >
<title>std::__invoke_result&lt;void (*&amp;)(log_t*), log_t*&amp;&gt;::type std::__invoke&lt;void (*&amp;)(log_t*), log_t*&amp;&gt;(void (*&amp;)(log_t*), log_t*&amp;) (1 samples, 0.49%)</title><rect x="533.2" y="821" width="5.8" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="536.15" y="831.5" ></text>
</g>
<g >
<title>btr_cur_optimistic_update(unsigned long, btr_cur_t*, unsigned long**, mem_block_info_t**, upd_t const*, unsigned long, que_thr_t*, unsigned long, mtr_t*) (2 samples, 0.99%)</title><rect x="120.4" y="597" width="11.7" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="123.44" y="607.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::is_free(unsigned int, unsigned int, unsigned int&amp;) const (8 samples, 3.94%)</title><rect x="1102.8" y="693" width="46.5" height="15.0" fill="rgb(136,136,242)" rx="2" ry="2" />
<text  x="1105.81" y="703.5" >TTAS..</text>
</g>
<g >
<title>unsigned long const*&amp; std::forward&lt;unsigned long const*&amp;&gt;(std::remove_reference&lt;unsigned long const*&amp;&gt;::type&amp;) (1 samples, 0.49%)</title><rect x="568.0" y="533" width="5.8" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="571.03" y="543.5" ></text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (2 samples, 0.99%)</title><rect x="632.0" y="565" width="11.6" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="634.97" y="575.5" ></text>
</g>
<g >
<title>trx_sys_t::latch_and_execute_with_active_trx&lt;locksys::rec_queue_validate_latched(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*)::{lambda(trx_t const*)#2}&gt;(unsigned long, locksys::rec_queue_validate_latched(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*)::{lambda(trx_t const*)#2}&amp;&amp;, ut::Location const&amp;)::{lambda(Trx_by_id_with_min&amp;)#1}::operator()(Trx_by_id_with_min&amp;) const (2 samples, 0.99%)</title><rect x="236.7" y="485" width="11.6" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="239.70" y="495.5" ></text>
</g>
<g >
<title>lock_rec_get_next_on_page(ib_lock_t*) (1 samples, 0.49%)</title><rect x="120.4" y="501" width="5.9" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="123.44" y="511.5" ></text>
</g>
<g >
<title>ut::detail::Alloc_pfs::free(void*) (1 samples, 0.49%)</title><rect x="829.6" y="469" width="5.8" height="15.0" fill="rgb(134,134,240)" rx="2" ry="2" />
<text  x="832.61" y="479.5" ></text>
</g>
<g >
<title>trx_undo_page_get(page_id_t const&amp;, page_size_t const&amp;, mtr_t*) (3 samples, 1.48%)</title><rect x="957.5" y="661" width="17.4" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="960.49" y="671.5" ></text>
</g>
<g >
<title>dispatch_sql_command(THD*, Parser_state*) (84 samples, 41.38%)</title><rect x="27.4" y="933" width="488.3" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="30.44" y="943.5" >dispatch_sql_command(THD*, Parser_state*)</text>
</g>
<g >
<title>auto buf::Block_hint::run_with_hint&lt;btr_pcur_t::restore_position(unsigned long, mtr_t*, ut::Location)::{lambda(buf_block_t*)#1}&gt;(btr_pcur_t::restore_position(unsigned long, mtr_t*, ut::Location)::{lambda(buf_block_t*)#1}&amp;&amp;) (1 samples, 0.49%)</title><rect x="277.4" y="629" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="280.39" y="639.5" ></text>
</g>
<g >
<title>std::operator&amp;(std::memory_order, std::__memory_order_modifier) (1 samples, 0.49%)</title><rect x="143.7" y="485" width="5.8" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="146.69" y="495.5" ></text>
</g>
<g >
<title>trx_purge(unsigned long, unsigned long, bool) (73 samples, 35.96%)</title><rect x="579.7" y="757" width="424.3" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="582.66" y="767.5" >trx_purge(unsigned long, unsigned long, bool)</text>
</g>
<g >
<title>mtr_t::memo_contains_page_flagged(unsigned char const*, unsigned long) const (4 samples, 1.97%)</title><rect x="463.4" y="629" width="23.3" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="466.40" y="639.5" >m..</text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.49%)</title><rect x="602.9" y="613" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="605.91" y="623.5" ></text>
</g>
<g >
<title>Iterate&lt;Find_page&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (4 samples, 1.97%)</title><rect x="777.3" y="597" width="23.2" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="780.29" y="607.5" >I..</text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(TTASEventMutex&lt;GenericPolicy&gt; const&amp;, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="847.0" y="533" width="5.9" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="850.04" y="543.5" ></text>
</g>
<g >
<title>dict_stats_update_persistent(dict_table_t*) (2 samples, 0.99%)</title><rect x="382.0" y="805" width="11.6" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="385.02" y="815.5" ></text>
</g>
<g >
<title>fseg_inode_get(unsigned char const*, unsigned int, page_size_t const&amp;, mtr_t*, buf_block_t**) (1 samples, 0.49%)</title><rect x="382.0" y="725" width="5.8" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="385.02" y="735.5" ></text>
</g>
<g >
<title>rw_lock_x_lock_gen(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="974.9" y="613" width="5.8" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="977.93" y="623.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::locked(TTASEventMutex&lt;GenericPolicy&gt; const*, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="864.5" y="469" width="5.8" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="867.48" y="479.5" ></text>
</g>
<g >
<title>srv_purge_coordinator_thread() (73 samples, 35.96%)</title><rect x="579.7" y="981" width="424.3" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="582.66" y="991.5" >srv_purge_coordinator_thread()</text>
</g>
<g >
<title>std::thread::id::id() (1 samples, 0.49%)</title><rect x="277.4" y="453" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="280.39" y="463.5" ></text>
</g>
<g >
<title>dd::cache::Local_multi_map&lt;dd::Column_statistics&gt;* dd::cache::Object_registry::create_map_if_needed&lt;dd::cache::Local_multi_map&lt;dd::Column_statistics&gt; &gt;(std::unique_ptr&lt;dd::cache::Local_multi_map&lt;dd::Column_statistics&gt;, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Column_statistics&gt; &gt; &gt;*) (1 samples, 0.49%)</title><rect x="39.1" y="789" width="5.8" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="42.06" y="799.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void (*())()&gt;::operator()&lt;, void&gt;() (2 samples, 0.99%)</title><rect x="568.0" y="853" width="11.7" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="571.03" y="863.5" ></text>
</g>
<g >
<title>void Detached_thread::operator()&lt;void (*)()&gt;(void (*&amp;&amp;)()) (14 samples, 6.90%)</title><rect x="1097.0" y="869" width="81.4" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="1100.00" y="879.5" >void Deta..</text>
</g>
<g >
<title>buf_page_t::is_io_fix_write() const (1 samples, 0.49%)</title><rect x="405.3" y="469" width="5.8" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="408.27" y="479.5" ></text>
</g>
<g >
<title>trx_purge_fetch_next_rec(unsigned long*, unsigned long*, unsigned long*, mem_block_info_t*) (22 samples, 10.84%)</title><rect x="585.5" y="725" width="127.8" height="15.0" fill="rgb(100,100,209)" rx="2" ry="2" />
<text  x="588.47" y="735.5" >trx_purge_fetch_..</text>
</g>
<g >
<title>rw_lock_add_debug_info(rw_lock_t*, unsigned long, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="446.0" y="565" width="5.8" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="448.96" y="575.5" ></text>
</g>
<g >
<title>unsigned int hardware::crc32&lt;hardware::use_pclmul&gt;(unsigned int, unsigned char const*, unsigned long) (1 samples, 0.49%)</title><rect x="568.0" y="597" width="5.8" height="15.0" fill="rgb(110,110,217)" rx="2" ry="2" />
<text  x="571.03" y="607.5" ></text>
</g>
<g >
<title>locksys::Latches::Unique_sharded_rw_lock::s_lock(ut::Location) (1 samples, 0.49%)</title><rect x="306.5" y="597" width="5.8" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="309.45" y="607.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt;::operator()() (1 samples, 0.49%)</title><rect x="1184.2" y="933" width="5.8" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="1187.19" y="943.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void (*&amp;)(unsigned long), unsigned long&amp;&gt;(std::__invoke_other, void (*&amp;)(unsigned long), unsigned long&amp;) (1 samples, 0.49%)</title><rect x="515.7" y="805" width="5.8" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="518.71" y="815.5" ></text>
</g>
<g >
<title>que_thr_step(que_thr_t*) (2 samples, 0.99%)</title><rect x="1079.6" y="725" width="11.6" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="1082.56" y="735.5" ></text>
</g>
<g >
<title>dict_index_t::get_col(unsigned long) const (1 samples, 0.49%)</title><rect x="416.9" y="533" width="5.8" height="15.0" fill="rgb(107,107,215)" rx="2" ry="2" />
<text  x="419.90" y="543.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unique_ptr&lt;TABLE_SHARE, Table_share_deleter&gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Malloc_allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;TABLE_SHARE, Table_share_deleter&gt; &gt; &gt; &gt;::find(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.49%)</title><rect x="428.5" y="853" width="5.8" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="431.52" y="863.5" ></text>
</g>
<g >
<title>rw_lock_s_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="695.9" y="533" width="5.8" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="698.91" y="543.5" ></text>
</g>
<g >
<title>mtr_t::Command::add_dirty_blocks_to_flush_list(unsigned long, unsigned long) (1 samples, 0.49%)</title><rect x="85.6" y="629" width="5.8" height="15.0" fill="rgb(105,105,212)" rx="2" ry="2" />
<text  x="88.57" y="639.5" ></text>
</g>
<g >
<title>btr_cur_upd_lock_and_undo(unsigned long, btr_cur_t*, unsigned long const*, upd_t const*, unsigned long, que_thr_t*, mtr_t*, unsigned long*) (5 samples, 2.46%)</title><rect x="56.5" y="629" width="29.1" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="59.50" y="639.5" >bt..</text>
</g>
<g >
<title>buf_pool_validate_instance(buf_pool_t*) (1 samples, 0.49%)</title><rect x="614.5" y="549" width="5.8" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="617.53" y="559.5" ></text>
</g>
<g >
<title>trx_rsegf_get_nth_undo(unsigned char*, unsigned long, mtr_t*) (1 samples, 0.49%)</title><rect x="358.8" y="693" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="361.77" y="703.5" ></text>
</g>
<g >
<title>os_aio_simulated_handler(unsigned long, fil_node_t**, void**, IORequest*) (1 samples, 0.49%)</title><rect x="515.7" y="741" width="5.8" height="15.0" fill="rgb(131,131,237)" rx="2" ry="2" />
<text  x="518.71" y="751.5" ></text>
</g>
<g >
<title>mach_read_ulint(unsigned char const*, mlog_id_t) (2 samples, 0.99%)</title><rect x="893.5" y="629" width="11.7" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="896.55" y="639.5" ></text>
</g>
<g >
<title>Iterate&lt;Find_page&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (1 samples, 0.49%)</title><rect x="161.1" y="501" width="5.8" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="164.13" y="511.5" ></text>
</g>
<g >
<title>page_id_t::hash() const (1 samples, 0.49%)</title><rect x="649.4" y="533" width="5.8" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="652.41" y="543.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (3 samples, 1.48%)</title><rect x="632.0" y="597" width="17.4" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="634.97" y="607.5" ></text>
</g>
<g >
<title>std::__cmpexch_failure_order(std::memory_order) (1 samples, 0.49%)</title><rect x="56.5" y="341" width="5.8" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="59.50" y="351.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.49%)</title><rect x="364.6" y="661" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="367.58" y="671.5" ></text>
</g>
<g >
<title>void Detached_thread::operator()&lt;void (*)()&gt;(void (*&amp;&amp;)()) (1 samples, 0.49%)</title><rect x="1184.2" y="869" width="5.8" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="1187.19" y="879.5" ></text>
</g>
<g >
<title>buf_page_hash_get_low(buf_pool_t*, page_id_t const&amp;) (1 samples, 0.49%)</title><rect x="632.0" y="533" width="5.8" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="634.97" y="543.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void (*(log_t*))(log_t*)&gt;::operator()&lt;, void&gt;() (2 samples, 0.99%)</title><rect x="556.4" y="853" width="11.6" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="559.40" y="863.5" ></text>
</g>
<g >
<title>trx_purge_read_undo_rec(trx_purge_t*, page_size_t const&amp;) (1 samples, 0.49%)</title><rect x="649.4" y="677" width="5.8" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="652.41" y="687.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::trylock(char const*, unsigned int) (1 samples, 0.49%)</title><rect x="963.3" y="501" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="966.30" y="511.5" ></text>
</g>
<g >
<title>__GI_fsync (1 samples, 0.49%)</title><rect x="533.2" y="661" width="5.8" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="536.15" y="671.5" ></text>
</g>
<g >
<title>btr_cur_upd_lock_and_undo(unsigned long, btr_cur_t*, unsigned long const*, upd_t const*, unsigned long, que_thr_t*, mtr_t*, unsigned long*) (1 samples, 0.49%)</title><rect x="225.1" y="549" width="5.8" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="228.07" y="559.5" ></text>
</g>
<g >
<title>log_data_blocks_write(Log_file_handle&amp;, unsigned long, unsigned long, unsigned char const*) (1 samples, 0.49%)</title><rect x="562.2" y="725" width="5.8" height="15.0" fill="rgb(137,137,243)" rx="2" ry="2" />
<text  x="565.22" y="735.5" ></text>
</g>
<g >
<title>trx_undo_assign_undo(trx_t*, trx_undo_ptr_t*, unsigned long) (5 samples, 2.46%)</title><rect x="56.5" y="597" width="29.1" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="59.50" y="607.5" >tr..</text>
</g>
<g >
<title>rw_lock_s_lock_gen(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="306.5" y="565" width="5.8" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="309.45" y="575.5" ></text>
</g>
<g >
<title>Find_page::get_block() const (1 samples, 0.49%)</title><rect x="666.8" y="597" width="5.9" height="15.0" fill="rgb(130,130,235)" rx="2" ry="2" />
<text  x="669.85" y="607.5" ></text>
</g>
<g >
<title>row_ins(ins_node_t*, que_thr_t*) (2 samples, 0.99%)</title><rect x="120.4" y="693" width="11.7" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="123.44" y="703.5" ></text>
</g>
<g >
<title>fil_aio_wait(unsigned long) (1 samples, 0.49%)</title><rect x="515.7" y="773" width="5.8" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="518.71" y="783.5" ></text>
</g>
<g >
<title>rw_lock_s_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="963.3" y="549" width="5.8" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="966.30" y="559.5" ></text>
</g>
<g >
<title>trx_rseg_t::latch() (2 samples, 0.99%)</title><rect x="585.5" y="677" width="11.6" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="588.47" y="687.5" ></text>
</g>
<g >
<title>generic_perform_write (1 samples, 0.49%)</title><rect x="562.2" y="501" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="565.22" y="511.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.49%)</title><rect x="986.6" y="645" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="989.55" y="655.5" ></text>
</g>
<g >
<title>fil_space_get_flags(unsigned int) (1 samples, 0.49%)</title><rect x="980.7" y="629" width="5.9" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="983.74" y="639.5" ></text>
</g>
<g >
<title>ha_commit_low(THD*, bool, bool) (12 samples, 5.91%)</title><rect x="434.3" y="805" width="69.8" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="437.33" y="815.5" >ha_comm..</text>
</g>
<g >
<title>rw_lock_s_unlock(rw_lock_t*) (1 samples, 0.49%)</title><rect x="277.4" y="581" width="5.8" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="280.39" y="591.5" ></text>
</g>
<g >
<title>sock_write_iter (1 samples, 0.49%)</title><rect x="15.8" y="901" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="18.81" y="911.5" ></text>
</g>
<g >
<title>trx_rsegf_get(unsigned int, unsigned int, page_size_t const&amp;, mtr_t*) (4 samples, 1.97%)</title><rect x="736.6" y="661" width="23.3" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="739.60" y="671.5" >t..</text>
</g>
<g >
<title>Sharded_rw_lock::s_own(unsigned long) const (1 samples, 0.49%)</title><rect x="236.7" y="341" width="5.8" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="239.70" y="351.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt; &gt;::_M_run() (2 samples, 0.99%)</title><rect x="568.0" y="949" width="11.7" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="571.03" y="959.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate(unsigned long, unsigned long, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="492.5" y="661" width="5.8" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="495.46" y="671.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (4 samples, 1.97%)</title><rect x="736.6" y="645" width="23.3" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="739.60" y="655.5" >b..</text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(TTASEventMutex&lt;GenericPolicy&gt; const*, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="730.8" y="421" width="5.8" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="733.79" y="431.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.49%)</title><rect x="899.4" y="597" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="902.36" y="607.5" ></text>
</g>
<g >
<title>void dd::cache::Object_registry::erase&lt;dd::Column_statistics&gt;() (1 samples, 0.49%)</title><rect x="39.1" y="837" width="5.8" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="42.06" y="847.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;Detached_thread, void (*)()&gt;::type std::__invoke&lt;Detached_thread, void (*)()&gt;(Detached_thread&amp;&amp;, void (*&amp;&amp;)()) (1 samples, 0.49%)</title><rect x="1184.2" y="901" width="5.8" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="1187.19" y="911.5" ></text>
</g>
<g >
<title>trx_purge_get_next_rec(unsigned long*, mem_block_info_t*) (18 samples, 8.87%)</title><rect x="608.7" y="709" width="104.6" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="611.72" y="719.5" >trx_purge_ge..</text>
</g>
<g >
<title>void Detached_thread::operator()&lt;void (*)()&gt;(void (*&amp;&amp;)()) (2 samples, 0.99%)</title><rect x="568.0" y="869" width="11.7" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="571.03" y="879.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.49%)</title><rect x="1160.9" y="517" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="1163.94" y="527.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_enter() (1 samples, 0.49%)</title><rect x="178.6" y="565" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="181.57" y="575.5" ></text>
</g>
<g >
<title>log_block_calc_checksum(unsigned char const*) (1 samples, 0.49%)</title><rect x="556.4" y="693" width="5.8" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="559.40" y="703.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (1 samples, 0.49%)</title><rect x="515.7" y="965" width="5.8" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="518.71" y="975.5" ></text>
</g>
<g >
<title>close_thread_tables(THD*) (1 samples, 0.49%)</title><rect x="44.9" y="805" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="47.88" y="815.5" ></text>
</g>
<g >
<title>cmp_rec_rec(unsigned char const*, unsigned char const*, unsigned long const*, unsigned long const*, dict_index_t const*, bool, unsigned long*, bool) (1 samples, 0.49%)</title><rect x="300.6" y="629" width="5.9" height="15.0" fill="rgb(131,131,236)" rx="2" ry="2" />
<text  x="303.64" y="639.5" ></text>
</g>
<g >
<title>locksys::Latches::Unique_sharded_rw_lock::s_own() const (1 samples, 0.49%)</title><rect x="236.7" y="357" width="5.8" height="15.0" fill="rgb(130,130,235)" rx="2" ry="2" />
<text  x="239.70" y="367.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void (*(log_t*))(log_t*)&gt;::operator()&lt;, void&gt;() (1 samples, 0.49%)</title><rect x="533.2" y="853" width="5.8" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="536.15" y="863.5" ></text>
</g>
<g >
<title>os_file_pwrite(IORequest&amp;, int, unsigned char const*, unsigned long, unsigned long, dberr_t*, file::Block const*) (1 samples, 0.49%)</title><rect x="562.2" y="645" width="5.8" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="565.22" y="655.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_enter() (1 samples, 0.49%)</title><rect x="126.3" y="405" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="129.26" y="415.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.49%)</title><rect x="649.4" y="613" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="652.41" y="623.5" ></text>
</g>
<g >
<title>mtr_t::Command::release_all() (2 samples, 0.99%)</title><rect x="725.0" y="645" width="11.6" height="15.0" fill="rgb(134,134,240)" rx="2" ry="2" />
<text  x="727.98" y="655.5" ></text>
</g>
<g >
<title>page_cur_search_with_match_bytes(buf_block_t const*, dict_index_t const*, dtuple_t const*, page_cur_mode_t, unsigned long*, unsigned long*, unsigned long*, unsigned long*, page_cur_t*) (3 samples, 1.48%)</title><rect x="207.6" y="565" width="17.5" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="210.64" y="575.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_exit() (1 samples, 0.49%)</title><rect x="637.8" y="485" width="5.8" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="640.78" y="495.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.49%)</title><rect x="15.8" y="981" width="5.8" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="18.81" y="991.5" ></text>
</g>
<g >
<title>que_run_threads_low(que_thr_t*) (5 samples, 2.46%)</title><rect x="1149.3" y="741" width="29.1" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="1152.31" y="751.5" >qu..</text>
</g>
<g >
<title>trx_commit_for_mysql(trx_t*) (5 samples, 2.46%)</title><rect x="353.0" y="789" width="29.0" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="355.96" y="799.5" >tr..</text>
</g>
<g >
<title>void std::_Bind&lt;void (*(log_t*))(log_t*)&gt;::__call&lt;void, , 0ul&gt;(std::tuple&lt;&gt;&amp;&amp;, std::_Index_tuple&lt;0ul&gt;) (3 samples, 1.48%)</title><rect x="539.0" y="837" width="17.4" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="541.97" y="847.5" ></text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.49%)</title><rect x="963.3" y="533" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="966.30" y="543.5" ></text>
</g>
<g >
<title>mlog_write_initial_log_record_fast(unsigned char const*, mlog_id_t, unsigned char*, mtr_t*) (1 samples, 0.49%)</title><rect x="719.2" y="629" width="5.8" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="722.16" y="639.5" ></text>
</g>
<g >
<title>pfs_os_file_flush_func(pfs_os_file_t, ut::Location) (1 samples, 0.49%)</title><rect x="533.2" y="693" width="5.8" height="15.0" fill="rgb(113,113,221)" rx="2" ry="2" />
<text  x="536.15" y="703.5" ></text>
</g>
<g >
<title>std::enable_if&lt;ut::detail::Alloc_pfs::is_pfs_instrumented_v, void*&gt;::type ut::detail::Alloc_&lt;ut::detail::Alloc_pfs&gt;::alloc&lt;false, ut::detail::Alloc_pfs&gt;(unsigned long, unsigned int) (1 samples, 0.49%)</title><rect x="306.5" y="485" width="5.8" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="309.45" y="495.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::enter(unsigned int, unsigned int, char const*, unsigned int) (1 samples, 0.49%)</title><rect x="1184.2" y="725" width="5.8" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="1187.19" y="735.5" ></text>
</g>
<g >
<title>rec_init_offsets_new(unsigned char const*, dict_index_t const*, unsigned long*) (1 samples, 0.49%)</title><rect x="335.5" y="581" width="5.8" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="338.52" y="591.5" ></text>
</g>
<g >
<title>row_upd_store_row(upd_node_t*, THD*, TABLE*) (1 samples, 0.49%)</title><rect x="335.5" y="629" width="5.8" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="338.52" y="639.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Find_page&gt; &gt;(Iterate&lt;Find_page&gt;&amp;) const (4 samples, 1.97%)</title><rect x="777.3" y="613" width="23.2" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="780.29" y="623.5" >b..</text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::assert_latches_let_distinguish(std::bitset&lt;3ul&gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.49%)</title><rect x="155.3" y="437" width="5.8" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="158.32" y="447.5" ></text>
</g>
<g >
<title>flst_remove(unsigned char*, unsigned char*, mtr_t*) (1 samples, 0.49%)</title><rect x="719.2" y="677" width="5.8" height="15.0" fill="rgb(95,95,204)" rx="2" ry="2" />
<text  x="722.16" y="687.5" ></text>
</g>
<g >
<title>dict_stats_init(dict_table_t*) (4 samples, 1.97%)</title><rect x="399.5" y="741" width="23.2" height="15.0" fill="rgb(136,136,241)" rx="2" ry="2" />
<text  x="402.46" y="751.5" >d..</text>
</g>
<g >
<title>srv_que_task_enqueue_low(que_thr_t*) (1 samples, 0.49%)</title><rect x="579.7" y="741" width="5.8" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="582.66" y="751.5" ></text>
</g>
<g >
<title>open_table_from_share(THD*, TABLE_SHARE*, char const*, unsigned int, unsigned int, unsigned int, TABLE*, bool, dd::Table const*) (5 samples, 2.46%)</title><rect x="399.5" y="789" width="29.0" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="402.46" y="799.5" >op..</text>
</g>
<g >
<title>MYSQL_BIN_LOG::ordered_commit(THD*, bool, bool) (1 samples, 0.49%)</title><rect x="509.9" y="869" width="5.8" height="15.0" fill="rgb(81,81,191)" rx="2" ry="2" />
<text  x="512.90" y="879.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (2 samples, 0.99%)</title><rect x="974.9" y="677" width="11.7" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="977.93" y="687.5" ></text>
</g>
<g >
<title>file_write_and_wait_range (1 samples, 0.49%)</title><rect x="533.2" y="581" width="5.8" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="536.15" y="591.5" ></text>
</g>
<g >
<title>trx_undo_page_get(page_id_t const&amp;, page_size_t const&amp;, mtr_t*) (1 samples, 0.49%)</title><rect x="486.7" y="677" width="5.8" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="489.65" y="687.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::exit() (1 samples, 0.49%)</title><rect x="637.8" y="453" width="5.8" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="640.78" y="463.5" ></text>
</g>
<g >
<title>os_file_io(IORequest const&amp;, int, void*, unsigned long, unsigned long, dberr_t*, file::Block const*) (1 samples, 0.49%)</title><rect x="562.2" y="629" width="5.8" height="15.0" fill="rgb(136,136,241)" rx="2" ry="2" />
<text  x="565.22" y="639.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.49%)</title><rect x="649.4" y="597" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="652.41" y="607.5" ></text>
</g>
<g >
<title>rw_lock_x_lock_gen(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="56.5" y="469" width="5.8" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="59.50" y="479.5" ></text>
</g>
<g >
<title>mach_read_ulint(unsigned char const*, mlog_id_t) (1 samples, 0.49%)</title><rect x="370.4" y="661" width="5.8" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="373.39" y="671.5" ></text>
</g>
<g >
<title>trx_rsegf_get(unsigned int, unsigned int, page_size_t const&amp;, mtr_t*) (1 samples, 0.49%)</title><rect x="155.3" y="565" width="5.8" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="158.32" y="575.5" ></text>
</g>
<g >
<title>std::array&lt;unsigned long, 8ul&gt;::operator[](unsigned long) (1 samples, 0.49%)</title><rect x="184.4" y="517" width="5.8" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="187.38" y="527.5" ></text>
</g>
<g >
<title>pfs_rw_lock_x_unlock_func(unsigned long, rw_lock_t*) (1 samples, 0.49%)</title><rect x="713.3" y="549" width="5.9" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="716.35" y="559.5" ></text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.49%)</title><rect x="230.9" y="405" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="233.89" y="415.5" ></text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (4 samples, 1.97%)</title><rect x="62.3" y="565" width="23.3" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="65.32" y="575.5" >t..</text>
</g>
<g >
<title>lock_rec_lock_fast(bool, unsigned long, buf_block_t const*, unsigned long, dict_index_t*, que_thr_t*) (1 samples, 0.49%)</title><rect x="120.4" y="517" width="5.9" height="15.0" fill="rgb(81,81,190)" rx="2" ry="2" />
<text  x="123.44" y="527.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Find&gt; &gt;(Iterate&lt;Find&gt;&amp;) const (1 samples, 0.49%)</title><rect x="719.2" y="581" width="5.8" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="722.16" y="591.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::trylock(char const*, unsigned int) (1 samples, 0.49%)</title><rect x="835.4" y="501" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="838.42" y="511.5" ></text>
</g>
<g >
<title>new_sync_write (1 samples, 0.49%)</title><rect x="562.2" y="533" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="565.22" y="543.5" ></text>
</g>
<g >
<title>mtr_t::memo_contains_page_flagged(unsigned char const*, unsigned long) const (6 samples, 2.96%)</title><rect x="765.7" y="629" width="34.8" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="768.67" y="639.5" >mt..</text>
</g>
<g >
<title>page_cur_get_rec(page_cur_t*) (1 samples, 0.49%)</title><rect x="283.2" y="597" width="5.8" height="15.0" fill="rgb(81,81,191)" rx="2" ry="2" />
<text  x="286.20" y="607.5" ></text>
</g>
<g >
<title>btr_cur_del_mark_set_clust_rec(unsigned long, buf_block_t*, unsigned char*, dict_index_t*, unsigned long const*, que_thr_t*, dtuple_t const*, mtr_t*) (4 samples, 1.97%)</title><rect x="312.3" y="629" width="23.2" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="315.27" y="639.5" >b..</text>
</g>
<g >
<title>Buf_fetch_normal::Buf_fetch_normal(page_id_t const&amp;, page_size_t const&amp;) (1 samples, 0.49%)</title><rect x="661.0" y="597" width="5.8" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="664.03" y="607.5" ></text>
</g>
<g >
<title>buf_flush_do_batch(buf_pool_t*, buf_flush_t, unsigned long, unsigned long, unsigned long*) (2 samples, 0.99%)</title><rect x="568.0" y="757" width="11.7" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="571.03" y="767.5" ></text>
</g>
<g >
<title>__pthread_self (1 samples, 0.49%)</title><rect x="79.8" y="405" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="82.75" y="415.5" ></text>
</g>
<g >
<title>trx_commit(trx_t*) (5 samples, 2.46%)</title><rect x="353.0" y="773" width="29.0" height="15.0" fill="rgb(107,107,215)" rx="2" ry="2" />
<text  x="355.96" y="783.5" >tr..</text>
</g>
<g >
<title>do_command(THD*) (84 samples, 41.38%)</title><rect x="27.4" y="965" width="488.3" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="30.44" y="975.5" >do_command(THD*)</text>
</g>
<g >
<title>close_thread_tables(THD*) (1 samples, 0.49%)</title><rect x="33.3" y="869" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="36.25" y="879.5" ></text>
</g>
<g >
<title>trx_undo_page_get(page_id_t const&amp;, page_size_t const&amp;, mtr_t*) (1 samples, 0.49%)</title><rect x="323.9" y="549" width="5.8" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="326.89" y="559.5" ></text>
</g>
<g >
<title>row_ins_clust_index_entry_by_modify(btr_pcur_t*, unsigned long, unsigned long, unsigned long**, mem_block_info_t**, mem_block_info_t*, dtuple_t const*, que_thr_t*, mtr_t*) (2 samples, 0.99%)</title><rect x="120.4" y="613" width="11.7" height="15.0" fill="rgb(84,84,193)" rx="2" ry="2" />
<text  x="123.44" y="623.5" ></text>
</g>
<g >
<title>Find_page::get_block() const (1 samples, 0.49%)</title><rect x="585.5" y="597" width="5.8" height="15.0" fill="rgb(130,130,235)" rx="2" ry="2" />
<text  x="588.47" y="607.5" ></text>
</g>
<g >
<title>que_thr_step(que_thr_t*) (4 samples, 1.97%)</title><rect x="1155.1" y="725" width="23.3" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="1158.12" y="735.5" >q..</text>
</g>
<g >
<title>handler::ha_open(TABLE*, char const*, int, int, dd::Table const*) (5 samples, 2.46%)</title><rect x="399.5" y="773" width="29.0" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="402.46" y="783.5" >ha..</text>
</g>
<g >
<title>rw_lock_s_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="306.5" y="549" width="5.8" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="309.45" y="559.5" ></text>
</g>
<g >
<title>auto ut::Guarded&lt;Trx_by_id_with_min, (latch_id_t)77&gt;::latch_and_execute&lt;trx_sys_t::latch_and_execute_with_active_trx&lt;locksys::rec_queue_validate_latched(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*)::{lambda(trx_t const*)#2}&gt;(unsigned long, locksys::rec_queue_validate_latched(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*)::{lambda(trx_t const*)#2}&amp;&amp;, ut::Location const&amp;)::{lambda(Trx_by_id_with_min&amp;)#1}&gt;(locksys::rec_queue_validate_latched(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*)::{lambda(trx_t const*)#2}&amp;&amp;, ut::Location const&amp;) (2 samples, 0.99%)</title><rect x="236.7" y="501" width="11.6" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="239.70" y="511.5" ></text>
</g>
<g >
<title>rw_lock_s_unlock_func(unsigned long, rw_lock_t*) (2 samples, 0.99%)</title><rect x="829.6" y="549" width="11.6" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="832.61" y="559.5" ></text>
</g>
<g >
<title>buf_pool_validate_instance(buf_pool_t*) (1 samples, 0.49%)</title><rect x="155.3" y="485" width="5.8" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="158.32" y="495.5" ></text>
</g>
<g >
<title>row_upd_clust_rec(unsigned long, upd_node_t*, dict_index_t*, unsigned long*, mem_block_info_t**, que_thr_t*, mtr_t*) (7 samples, 3.45%)</title><rect x="56.5" y="677" width="40.7" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="59.50" y="687.5" >row..</text>
</g>
<g >
<title>trx_rsegf_get(unsigned int, unsigned int, page_size_t const&amp;, mtr_t*) (2 samples, 0.99%)</title><rect x="974.9" y="693" width="11.7" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="977.93" y="703.5" ></text>
</g>
<g >
<title>buf_page_t::Latching_rules_helpers::assert_latches_let_distinguish(buf_page_t const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) (1 samples, 0.49%)</title><rect x="155.3" y="453" width="5.8" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="158.32" y="463.5" ></text>
</g>
<g >
<title>locksys::Shard_naked_latch_guard::Shard_naked_latch_guard(ut::Location, unsigned long const&amp;) (1 samples, 0.49%)</title><rect x="440.1" y="613" width="5.9" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="443.15" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;buf_io_fix&gt; std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_M_insert_unique_&lt;buf_io_fix const&amp;&gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, buf_io_fix const&amp;) (1 samples, 0.49%)</title><rect x="254.1" y="389" width="5.9" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="257.14" y="399.5" ></text>
</g>
<g >
<title>locksys::Latches::owns_page_shard(page_id_t const&amp;) const (1 samples, 0.49%)</title><rect x="137.9" y="581" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="140.88" y="591.5" ></text>
</g>
<g >
<title>Wait_stats os_event_wait_for&lt;log_write_notifier(log_t*)::{lambda(bool)#1}&gt;(os_event*&amp;, unsigned long, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;, log_write_notifier(log_t*)::{lambda(bool)#1}) (2 samples, 0.99%)</title><rect x="544.8" y="757" width="11.6" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="547.78" y="767.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(unsigned long), unsigned long&gt; &gt;::operator()() (1 samples, 0.49%)</title><rect x="515.7" y="933" width="5.8" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="518.71" y="943.5" ></text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (3 samples, 1.48%)</title><rect x="155.3" y="581" width="17.5" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="158.32" y="591.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.49%)</title><rect x="56.5" y="517" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="59.50" y="527.5" ></text>
</g>
<g >
<title>Find_page::operator()(mtr_memo_slot_t*) (1 samples, 0.49%)</title><rect x="690.1" y="565" width="5.8" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="693.10" y="575.5" ></text>
</g>
<g >
<title>asm_common_interrupt (1 samples, 0.49%)</title><rect x="318.1" y="453" width="5.8" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="321.08" y="463.5" ></text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt;::_M_invoke&lt;0ul, 1ul&gt;(std::_Index_tuple&lt;0ul, 1ul&gt;) (12 samples, 5.91%)</title><rect x="1021.4" y="917" width="69.8" height="15.0" fill="rgb(136,136,242)" rx="2" ry="2" />
<text  x="1024.43" y="927.5" >void st..</text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (2 samples, 0.99%)</title><rect x="672.7" y="629" width="11.6" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="675.66" y="639.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (2 samples, 0.99%)</title><rect x="672.7" y="613" width="11.6" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="675.66" y="623.5" ></text>
</g>
<g >
<title>page_id_t::hash() const (1 samples, 0.49%)</title><rect x="678.5" y="533" width="5.8" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="681.47" y="543.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (1 samples, 0.49%)</title><rect x="318.1" y="229" width="5.8" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="321.08" y="239.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.49%)</title><rect x="364.6" y="645" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="367.58" y="655.5" ></text>
</g>
<g >
<title>Iterate&lt;Find_page&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (1 samples, 0.49%)</title><rect x="626.2" y="565" width="5.8" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="629.16" y="575.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_enter() (1 samples, 0.49%)</title><rect x="864.5" y="517" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="867.48" y="527.5" ></text>
</g>
<g >
<title>latch_level_t* std::__uninitialized_copy_a&lt;latch_level_t const*, latch_level_t*, ut::allocator&lt;latch_level_t, ut::detail::allocator_base_pfs&lt;latch_level_t&gt; &gt; &gt;(latch_level_t const*, latch_level_t const*, latch_level_t*, ut::allocator&lt;latch_level_t, ut::detail::allocator_base_pfs&lt;latch_level_t&gt; &gt;&amp;) (1 samples, 0.49%)</title><rect x="114.6" y="629" width="5.8" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="117.63" y="639.5" ></text>
</g>
<g >
<title>trx_sys_mutex_enter() (1 samples, 0.49%)</title><rect x="998.2" y="741" width="5.8" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="1001.18" y="751.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::locked(TTASEventMutex&lt;GenericPolicy&gt; const*, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="225.1" y="357" width="5.8" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="228.07" y="367.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void (*&amp;)()&gt;(std::__invoke_other, void (*&amp;)()) (12 samples, 5.91%)</title><rect x="1021.4" y="805" width="69.8" height="15.0" fill="rgb(131,131,236)" rx="2" ry="2" />
<text  x="1024.43" y="815.5" >void st..</text>
</g>
<g >
<title>std::thread::id::id(unsigned long) (1 samples, 0.49%)</title><rect x="754.0" y="485" width="5.9" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="757.04" y="495.5" ></text>
</g>
<g >
<title>buf_flush_write_block_low(buf_page_t*, buf_flush_t, bool) (2 samples, 0.99%)</title><rect x="568.0" y="661" width="11.7" height="15.0" fill="rgb(135,135,241)" rx="2" ry="2" />
<text  x="571.03" y="671.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (2 samples, 0.99%)</title><rect x="254.1" y="597" width="11.7" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="257.14" y="607.5" ></text>
</g>
<g >
<title>mysql_admin_table(THD*, Table_ref*, HA_CHECK_OPT*, char const*, thr_lock_type, bool, bool, unsigned int, int (*)(THD*, Table_ref*, HA_CHECK_OPT*), int (handler::*)(THD*, HA_CHECK_OPT*), int, Alter_info*, bool) (83 samples, 40.89%)</title><rect x="27.4" y="885" width="482.5" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="30.44" y="895.5" >mysql_admin_table(THD*, Table_ref*, HA_CHECK_OPT*, char const*, th..</text>
</g>
<g >
<title>void std::_Bind&lt;void (*())()&gt;::operator()&lt;, void&gt;() (14 samples, 6.90%)</title><rect x="1097.0" y="853" width="81.4" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="1100.00" y="863.5" >void std:..</text>
</g>
<g >
<title>que_thr_step(que_thr_t*) (9 samples, 4.43%)</title><rect x="120.4" y="725" width="52.4" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="123.44" y="735.5" >que_t..</text>
</g>
<g >
<title>common_interrupt (1 samples, 0.49%)</title><rect x="318.1" y="437" width="5.8" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="321.08" y="447.5" ></text>
</g>
<g >
<title>buf_page_hash_lock_held_s_or_x(buf_pool_t const*, buf_page_t const*) (1 samples, 0.49%)</title><rect x="1160.9" y="453" width="5.8" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="1163.94" y="463.5" ></text>
</g>
<g >
<title>locksys::Latches::owns_page_shard(page_id_t const&amp;) const (1 samples, 0.49%)</title><rect x="230.9" y="469" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="233.89" y="479.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.49%)</title><rect x="1184.2" y="1013" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="1187.19" y="1023.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(TTASEventMutex&lt;GenericPolicy&gt; const*, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="835.4" y="469" width="5.8" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="838.42" y="479.5" ></text>
</g>
<g >
<title>dd::cache::Object_registry::m_map(dd::cache::Object_registry::Type_selector&lt;dd::Column_statistics&gt;) (1 samples, 0.49%)</title><rect x="39.1" y="805" width="5.8" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="42.06" y="815.5" ></text>
</g>
<g >
<title>__write (1 samples, 0.49%)</title><rect x="15.8" y="997" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="18.81" y="1007.5" ></text>
</g>
<g >
<title>std::atomic&lt;std::thread::id&gt;::compare_exchange_strong(std::thread::id&amp;, std::thread::id, std::memory_order) (1 samples, 0.49%)</title><rect x="56.5" y="357" width="5.8" height="15.0" fill="rgb(89,89,199)" rx="2" ry="2" />
<text  x="59.50" y="367.5" ></text>
</g>
<g >
<title>Iterate&lt;Add_dirty_blocks_to_flush_list&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (1 samples, 0.49%)</title><rect x="85.6" y="597" width="5.8" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="88.57" y="607.5" ></text>
</g>
<g >
<title>ut::mt_fast_modulo_t::load()::{lambda(ut::mt_fast_modulo_t::data_t const&amp;)#1}::operator()(ut::mt_fast_modulo_t::data_t const&amp;) const (1 samples, 0.49%)</title><rect x="242.5" y="325" width="5.8" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="245.51" y="335.5" ></text>
</g>
<g >
<title>dict_table_t::is_temporary() const (1 samples, 0.49%)</title><rect x="50.7" y="677" width="5.8" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="53.69" y="687.5" ></text>
</g>
<g >
<title>buf_page_t::Latching_rules_helpers::get_owned_latches(buf_page_t const&amp;) (1 samples, 0.49%)</title><rect x="614.5" y="501" width="5.8" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="617.53" y="511.5" ></text>
</g>
<g >
<title>buf_page_release_latch(buf_block_t*, unsigned long) (2 samples, 0.99%)</title><rect x="725.0" y="565" width="11.6" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="727.98" y="575.5" ></text>
</g>
<g >
<title>locksys::Latches::Unique_sharded_rw_lock::s_lock(ut::Location) (1 samples, 0.49%)</title><rect x="126.3" y="485" width="5.8" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="129.26" y="495.5" ></text>
</g>
<g >
<title>trx_undo_page_get(page_id_t const&amp;, page_size_t const&amp;, mtr_t*) (1 samples, 0.49%)</title><rect x="329.7" y="565" width="5.8" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="332.70" y="575.5" ></text>
</g>
<g >
<title>dblwr::write(buf_flush_t, buf_page_t*, bool) (1 samples, 0.49%)</title><rect x="573.8" y="645" width="5.9" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="576.84" y="655.5" ></text>
</g>
<g >
<title>hardware::crc32_using_pclmul(unsigned char const*, unsigned long) (1 samples, 0.49%)</title><rect x="568.0" y="613" width="5.8" height="15.0" fill="rgb(108,108,215)" rx="2" ry="2" />
<text  x="571.03" y="623.5" ></text>
</g>
<g >
<title>os_aio_handler(unsigned long, fil_node_t**, void**, IORequest*) (1 samples, 0.49%)</title><rect x="515.7" y="757" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="518.71" y="767.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.49%)</title><rect x="695.9" y="597" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="698.91" y="607.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_enter() (1 samples, 0.49%)</title><rect x="730.8" y="469" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="733.79" y="479.5" ></text>
</g>
<g >
<title>buf_page_hash_get_low(buf_pool_t*, page_id_t const&amp;) (1 samples, 0.49%)</title><rect x="602.9" y="549" width="5.8" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="605.91" y="559.5" ></text>
</g>
<g >
<title>ut::hash_uint64(unsigned long) (1 samples, 0.49%)</title><rect x="382.0" y="549" width="5.8" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="385.02" y="559.5" ></text>
</g>
<g >
<title>trx_commit_for_mysql(trx_t*) (4 samples, 1.97%)</title><rect x="172.8" y="773" width="23.2" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="175.76" y="783.5" >t..</text>
</g>
<g >
<title>bool dd::cache::Dictionary_client::acquire&lt;dd::Schema&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, Stateless_allocator&lt;char, dd::String_type_alloc, My_free_functor&gt; &gt; const&amp;, dd::Schema const**) (1 samples, 0.49%)</title><rect x="393.6" y="773" width="5.9" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="396.65" y="783.5" ></text>
</g>
<g >
<title>Find_page::operator()(mtr_memo_slot_t*) (3 samples, 1.48%)</title><rect x="469.2" y="581" width="17.5" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="472.21" y="591.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::is_owned() const (1 samples, 0.49%)</title><rect x="527.3" y="661" width="5.9" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="530.34" y="671.5" ></text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.49%)</title><rect x="748.2" y="517" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="751.23" y="527.5" ></text>
</g>
<g >
<title>os_file_write_page(IORequest&amp;, char const*, int, unsigned char const*, unsigned long, unsigned long, file::Block const*) (1 samples, 0.49%)</title><rect x="562.2" y="661" width="5.8" height="15.0" fill="rgb(95,95,204)" rx="2" ry="2" />
<text  x="565.22" y="671.5" ></text>
</g>
<g >
<title>Log_file_handle::fsync() (1 samples, 0.49%)</title><rect x="533.2" y="709" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="536.15" y="719.5" ></text>
</g>
<g >
<title>buf_page_hash_lock_held_s(buf_pool_t const*, buf_page_t const*) (1 samples, 0.49%)</title><rect x="748.2" y="533" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="751.23" y="543.5" ></text>
</g>
<g >
<title>locksys::owns_page_shard(page_id_t const&amp;) (1 samples, 0.49%)</title><rect x="137.9" y="597" width="5.8" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="140.88" y="607.5" ></text>
</g>
<g >
<title>dd::cache::Dictionary_client::Auto_releaser::~Auto_releaser() (1 samples, 0.49%)</title><rect x="393.6" y="757" width="5.9" height="15.0" fill="rgb(136,136,241)" rx="2" ry="2" />
<text  x="396.65" y="767.5" ></text>
</g>
<g >
<title>trx_purge_choose_next_log() (4 samples, 1.97%)</title><rect x="585.5" y="709" width="23.2" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="588.47" y="719.5" >t..</text>
</g>
<g >
<title>void mutex_enter_inline&lt;PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt; &gt;(PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;*, ut::Location) (8 samples, 3.94%)</title><rect x="1102.8" y="757" width="46.5" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="1105.81" y="767.5" >void..</text>
</g>
<g >
<title>Find_page::get_slot() const (2 samples, 0.99%)</title><rect x="765.7" y="597" width="11.6" height="15.0" fill="rgb(96,96,204)" rx="2" ry="2" />
<text  x="768.67" y="607.5" ></text>
</g>
<g >
<title>trx_commit_low(trx_t*, mtr_t*) (5 samples, 2.46%)</title><rect x="353.0" y="757" width="29.0" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="355.96" y="767.5" >tr..</text>
</g>
<g >
<title>hash_assert_can_search(hash_table_t*, unsigned long) (1 samples, 0.49%)</title><rect x="632.0" y="517" width="5.8" height="15.0" fill="rgb(96,96,204)" rx="2" ry="2" />
<text  x="634.97" y="527.5" ></text>
</g>
<g >
<title>trx_undo_reuse_cached(trx_rseg_t*, unsigned long, unsigned long, xid_t const*, trx_undo_t::Gtid_storage, mtr_t*) (1 samples, 0.49%)</title><rect x="329.7" y="581" width="5.8" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="332.70" y="591.5" ></text>
</g>
<g >
<title>do_syscall_64 (3 samples, 1.48%)</title><rect x="1004.0" y="981" width="17.4" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="1006.99" y="991.5" ></text>
</g>
<g >
<title>std::thread::id::id() (1 samples, 0.49%)</title><rect x="748.2" y="469" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="751.23" y="479.5" ></text>
</g>
<g >
<title>locksys::owns_exclusive_global_latch() (1 samples, 0.49%)</title><rect x="289.0" y="613" width="5.8" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="292.01" y="623.5" ></text>
</g>
<g >
<title>PFS_memory_safe_stat::count_alloc(unsigned long, PFS_memory_stat_alloc_delta*) (1 samples, 0.49%)</title><rect x="347.1" y="613" width="5.9" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="350.14" y="623.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::release(TTASEventMutex&lt;GenericPolicy&gt; const*) (1 samples, 0.49%)</title><rect x="573.8" y="389" width="5.9" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="576.84" y="399.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void (*&amp;)()&gt;::type std::__invoke&lt;void (*&amp;)()&gt;(void (*&amp;)()) (2 samples, 0.99%)</title><rect x="568.0" y="821" width="11.7" height="15.0" fill="rgb(108,108,215)" rx="2" ry="2" />
<text  x="571.03" y="831.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;Detached_thread, void (*)()&gt;::type std::__invoke&lt;Detached_thread, void (*)()&gt;(Detached_thread&amp;&amp;, void (*&amp;&amp;)()) (14 samples, 6.90%)</title><rect x="1097.0" y="901" width="81.4" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="1100.00" y="911.5" >std::__in..</text>
</g>
<g >
<title>std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::insert(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, buf_io_fix const&amp;) (1 samples, 0.49%)</title><rect x="405.3" y="357" width="5.8" height="15.0" fill="rgb(86,86,196)" rx="2" ry="2" />
<text  x="408.27" y="367.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, Detached_thread, void (*)()&gt;(std::__invoke_other, Detached_thread&amp;&amp;, void (*&amp;&amp;)()) (1 samples, 0.49%)</title><rect x="1184.2" y="885" width="5.8" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="1187.19" y="895.5" ></text>
</g>
<g >
<title>trx_rsegf_get_nth_undo(unsigned char*, unsigned long, mtr_t*) (5 samples, 2.46%)</title><rect x="457.6" y="661" width="29.1" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="460.59" y="671.5" >tr..</text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (1 samples, 0.49%)</title><rect x="79.8" y="533" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="82.75" y="543.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt; &gt;::_M_run() (1 samples, 0.49%)</title><rect x="533.2" y="949" width="5.8" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="536.15" y="959.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (3 samples, 1.48%)</title><rect x="957.5" y="645" width="17.4" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="960.49" y="655.5" ></text>
</g>
<g >
<title>handler::ha_index_read_map(unsigned char*, unsigned char const*, unsigned long, ha_rkey_function) (2 samples, 0.99%)</title><rect x="97.2" y="773" width="11.6" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="100.19" y="783.5" ></text>
</g>
<g >
<title>rw_lock_remove_debug_info(rw_lock_t*, unsigned long, unsigned long) (1 samples, 0.49%)</title><rect x="725.0" y="501" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="727.98" y="511.5" ></text>
</g>
<g >
<title>row_purge_remove_clust_if_poss_low(purge_node_t*, unsigned long) (1 samples, 0.49%)</title><rect x="1085.4" y="613" width="5.8" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="1088.37" y="623.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::locked(TTASEventMutex&lt;GenericPolicy&gt; const*, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="754.0" y="533" width="5.9" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="757.04" y="543.5" ></text>
</g>
<g >
<title>log_block_calc_checksum_crc32(unsigned char const*) (1 samples, 0.49%)</title><rect x="556.4" y="677" width="5.8" height="15.0" fill="rgb(107,107,215)" rx="2" ry="2" />
<text  x="559.40" y="687.5" ></text>
</g>
<g >
<title>trx_commit_in_memory(trx_t*, mtr_t const*, bool) (2 samples, 0.99%)</title><rect x="440.1" y="709" width="11.7" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="443.15" y="719.5" ></text>
</g>
<g >
<title>buf_flush_page_coordinator_thread() (2 samples, 0.99%)</title><rect x="568.0" y="981" width="11.7" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="571.03" y="991.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.49%)</title><rect x="533.2" y="645" width="5.8" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="536.15" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;TABLE_SHARE, Table_share_deleter&gt; &gt;, Malloc_allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;TABLE_SHARE, Table_share_deleter&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node(unsigned long, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned long) const (1 samples, 0.49%)</title><rect x="428.5" y="805" width="5.8" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="431.52" y="815.5" ></text>
</g>
<g >
<title>row_ins_index_entry(dict_index_t*, dtuple_t*, unsigned int&amp;, que_thr_t*) (2 samples, 0.99%)</title><rect x="120.4" y="661" width="11.7" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="123.44" y="671.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;mtr_t const*, std::hash&lt;mtr_t const*&gt;, std::equal_to&lt;mtr_t const*&gt;, ut::allocator&lt;mtr_t const*, ut::detail::allocator_base_pfs&lt;mtr_t const*&gt; &gt; &gt;::begin() (1 samples, 0.49%)</title><rect x="201.8" y="661" width="5.8" height="15.0" fill="rgb(97,97,205)" rx="2" ry="2" />
<text  x="204.82" y="671.5" ></text>
</g>
<g >
<title>lock_rec_get_nth_bit(ib_lock_t const*, unsigned long) (1 samples, 0.49%)</title><rect x="103.0" y="597" width="5.8" height="15.0" fill="rgb(110,110,218)" rx="2" ry="2" />
<text  x="106.00" y="607.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (1 samples, 0.49%)</title><rect x="318.1" y="277" width="5.8" height="15.0" fill="rgb(112,112,220)" rx="2" ry="2" />
<text  x="321.08" y="287.5" ></text>
</g>
<g >
<title>rec_init_offsets_comp_ordinary(unsigned char const*, bool, dict_index_t const*, unsigned long*) (1 samples, 0.49%)</title><rect x="335.5" y="565" width="5.8" height="15.0" fill="rgb(88,88,198)" rx="2" ry="2" />
<text  x="338.52" y="575.5" ></text>
</g>
<g >
<title>trx_rsegf_get_nth_undo(unsigned char*, unsigned long, mtr_t*) (2 samples, 0.99%)</title><rect x="684.3" y="645" width="11.6" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="687.29" y="655.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (1 samples, 0.49%)</title><rect x="56.5" y="533" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="59.50" y="543.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.49%)</title><rect x="515.7" y="981" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="518.71" y="991.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.49%)</title><rect x="852.9" y="549" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="855.86" y="559.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, Detached_thread, void (*)(log_t*), log_t*&gt;(std::__invoke_other, Detached_thread&amp;&amp;, void (*&amp;&amp;)(log_t*), log_t*&amp;&amp;) (2 samples, 0.99%)</title><rect x="556.4" y="885" width="11.6" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="559.40" y="895.5" ></text>
</g>
<g >
<title>trx_purge_remove_log_hdr(unsigned char*, unsigned char*, mtr_t*) (1 samples, 0.49%)</title><rect x="719.2" y="693" width="5.8" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="722.16" y="703.5" ></text>
</g>
<g >
<title>mtr_t::Command::release_all() (1 samples, 0.49%)</title><rect x="399.5" y="581" width="5.8" height="15.0" fill="rgb(134,134,240)" rx="2" ry="2" />
<text  x="402.46" y="591.5" ></text>
</g>
<g >
<title>lock_clust_rec_modify_check_and_lock(unsigned long, buf_block_t const*, unsigned char const*, dict_index_t*, unsigned long const*, que_thr_t*) (2 samples, 0.99%)</title><rect x="120.4" y="549" width="11.7" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="123.44" y="559.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::mtr_add_page(buf_block_t*) (1 samples, 0.49%)</title><rect x="672.7" y="581" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="675.66" y="591.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::Buf_fetch(page_id_t const&amp;, page_size_t const&amp;) (1 samples, 0.49%)</title><rect x="661.0" y="581" width="5.8" height="15.0" fill="rgb(106,106,213)" rx="2" ry="2" />
<text  x="664.03" y="591.5" ></text>
</g>
<g >
<title>mtr_t::memo_contains_page_flagged(unsigned char const*, unsigned long) const (7 samples, 3.45%)</title><rect x="905.2" y="629" width="40.7" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="908.17" y="639.5" >mtr..</text>
</g>
<g >
<title>std::operator==(std::thread::id, std::thread::id) (1 samples, 0.49%)</title><rect x="707.5" y="533" width="5.8" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="710.54" y="543.5" ></text>
</g>
<g >
<title>dd_table_close(dict_table_t*, THD*, MDL_ticket**, bool) (1 samples, 0.49%)</title><rect x="33.3" y="725" width="5.8" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="36.25" y="735.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.49%)</title><rect x="533.2" y="981" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="536.15" y="991.5" ></text>
</g>
<g >
<title>locksys::rec_queue_latch_and_validate(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*) (3 samples, 1.48%)</title><rect x="236.7" y="549" width="17.4" height="15.0" fill="rgb(86,86,196)" rx="2" ry="2" />
<text  x="239.70" y="559.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.49%)</title><rect x="986.6" y="661" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="989.55" y="671.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.49%)</title><rect x="486.7" y="645" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="489.65" y="655.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;mtr_t const*, true, false&gt;, bool&gt; std::_Hashtable&lt;mtr_t const*, mtr_t const*, ut::allocator&lt;mtr_t const*, ut::detail::allocator_base_pfs&lt;mtr_t const*&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;mtr_t const*&gt;, std::hash&lt;mtr_t const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;mtr_t const*, std::__detail::_AllocNode&lt;ut::allocator&lt;std::__detail::_Hash_node&lt;mtr_t const*, false&gt;, ut::detail::allocator_base_pfs&lt;mtr_t const*&gt; &gt; &gt; &gt;(mtr_t const*&amp;&amp;, std::__detail::_AllocNode&lt;ut::allocator&lt;std::__detail::_Hash_node&lt;mtr_t const*, false&gt;, ut::detail::allocator_base_pfs&lt;mtr_t const*&gt; &gt; &gt; const&amp;, std::integral_constant&lt;bool, true&gt;) (1 samples, 0.49%)</title><rect x="434.3" y="677" width="5.8" height="15.0" fill="rgb(84,84,193)" rx="2" ry="2" />
<text  x="437.33" y="687.5" ></text>
</g>
<g >
<title>que_thr_step(que_thr_t*) (23 samples, 11.33%)</title><rect x="207.6" y="709" width="133.7" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="210.64" y="719.5" >que_thr_step(que..</text>
</g>
<g >
<title>log_data_block_header_serialize(Log_data_block_header const&amp;, unsigned char*) (1 samples, 0.49%)</title><rect x="556.4" y="725" width="5.8" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="559.40" y="735.5" ></text>
</g>
<g >
<title>row_upd_step(que_thr_t*) (5 samples, 2.46%)</title><rect x="143.7" y="709" width="29.1" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="146.69" y="719.5" >ro..</text>
</g>
<g >
<title>handler::ha_analyze(THD*, HA_CHECK_OPT*) (49 samples, 24.14%)</title><rect x="108.8" y="869" width="284.8" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="111.82" y="879.5" >handler::ha_analyze(THD*, HA_CHECK_OPT*)</text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void (*&amp;)(log_t*), log_t*&amp;&gt;(std::__invoke_other, void (*&amp;)(log_t*), log_t*&amp;) (2 samples, 0.99%)</title><rect x="556.4" y="805" width="11.6" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="559.40" y="815.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::end() const (1 samples, 0.49%)</title><rect x="155.3" y="357" width="5.8" height="15.0" fill="rgb(134,134,240)" rx="2" ry="2" />
<text  x="158.32" y="367.5" ></text>
</g>
<g >
<title>lock_rec_has_expl(unsigned long, page_id_t, unsigned int, trx_t const*) (1 samples, 0.49%)</title><rect x="230.9" y="501" width="5.8" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="233.89" y="511.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_enter() (1 samples, 0.49%)</title><rect x="364.6" y="613" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="367.58" y="623.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(TTASEventMutex&lt;GenericPolicy&gt; const*, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="847.0" y="517" width="5.9" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="850.04" y="527.5" ></text>
</g>
<g >
<title>row_purge_step(que_thr_t*) (4 samples, 1.97%)</title><rect x="1155.1" y="709" width="23.3" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="1158.12" y="719.5" >r..</text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::spin_and_try_lock(unsigned int, unsigned int, char const*, unsigned int) (8 samples, 3.94%)</title><rect x="1102.8" y="709" width="46.5" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="1105.81" y="719.5" >TTAS..</text>
</g>
<g >
<title>row_upd_clust_step(upd_node_t*, que_thr_t*) (7 samples, 3.45%)</title><rect x="300.6" y="661" width="40.7" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="303.64" y="671.5" >row..</text>
</g>
<g >
<title>unsigned int hardware::consume_chunk&lt;5440ul, 3ul, hardware::use_pclmul&gt;(unsigned int, unsigned char const*) (1 samples, 0.49%)</title><rect x="568.0" y="565" width="5.8" height="15.0" fill="rgb(134,134,240)" rx="2" ry="2" />
<text  x="571.03" y="575.5" ></text>
</g>
<g >
<title>buf::Block_hint::buffer_unfix_block_if_needed(buf_block_t*) (1 samples, 0.49%)</title><rect x="277.4" y="613" width="5.8" height="15.0" fill="rgb(97,97,205)" rx="2" ry="2" />
<text  x="280.39" y="623.5" ></text>
</g>
<g >
<title>log_wait_for_flush(log_t const&amp;, unsigned long, bool*) (2 samples, 0.99%)</title><rect x="492.5" y="725" width="11.6" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="495.46" y="735.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void (*())()&gt;::__call&lt;void&gt;(std::tuple&lt;&gt;&amp;&amp;, std::_Index_tuple&lt;&gt;) (1 samples, 0.49%)</title><rect x="1184.2" y="837" width="5.8" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="1187.19" y="847.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, Detached_thread, void (*)()&gt;(std::__invoke_other, Detached_thread&amp;&amp;, void (*&amp;&amp;)()) (14 samples, 6.90%)</title><rect x="1097.0" y="885" width="81.4" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="1100.00" y="895.5" >void std:..</text>
</g>
<g >
<title>srv_suspend_thread(srv_slot_t*) (10 samples, 4.93%)</title><rect x="1021.4" y="773" width="58.2" height="15.0" fill="rgb(95,95,204)" rx="2" ry="2" />
<text  x="1024.43" y="783.5" >srv_su..</text>
</g>
<g >
<title>sel_set_rec_lock(btr_pcur_t*, unsigned char const*, dict_index_t*, unsigned long const*, select_mode, unsigned long, unsigned long, que_thr_t*, mtr_t*) (2 samples, 0.99%)</title><rect x="289.0" y="661" width="11.6" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="292.01" y="671.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt;::operator()() (3 samples, 1.48%)</title><rect x="539.0" y="933" width="17.4" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="541.97" y="943.5" ></text>
</g>
<g >
<title>buf_page_hash_lock_held_s_or_x(buf_pool_t const*, buf_page_t const*) (1 samples, 0.49%)</title><rect x="486.7" y="565" width="5.8" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="489.65" y="575.5" ></text>
</g>
<g >
<title>trx_rsegf_get_nth_undo(unsigned char*, unsigned long, mtr_t*) (2 samples, 0.99%)</title><rect x="161.1" y="565" width="11.7" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="164.13" y="575.5" ></text>
</g>
<g >
<title>Wait_stats os_event_wait_for&lt;log_wait_for_flush(log_t const&amp;, unsigned long, bool*)::{lambda(bool)#1}&gt;(os_event*&amp;, unsigned long, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;, log_wait_for_flush(log_t const&amp;, unsigned long, bool*)::{lambda(bool)#1}) (2 samples, 0.99%)</title><rect x="492.5" y="709" width="11.6" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="495.46" y="719.5" ></text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.49%)</title><rect x="79.8" y="421" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="82.75" y="431.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (1 samples, 0.49%)</title><rect x="614.5" y="613" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="617.53" y="623.5" ></text>
</g>
<g >
<title>Sharded_rw_lock::x_own() const (1 samples, 0.49%)</title><rect x="230.9" y="421" width="5.8" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="233.89" y="431.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(unsigned int, unsigned int, char const*, unsigned int) (1 samples, 0.49%)</title><rect x="1184.2" y="741" width="5.8" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="1187.19" y="751.5" ></text>
</g>
<g >
<title>SimulatedAIOHandler::check_pending(unsigned long, os_event*) (1 samples, 0.49%)</title><rect x="515.7" y="725" width="5.8" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="518.71" y="735.5" ></text>
</g>
<g >
<title>std::atomic&lt;std::thread::id&gt;::compare_exchange_strong(std::thread::id&amp;, std::thread::id, std::memory_order) (1 samples, 0.49%)</title><rect x="289.0" y="485" width="5.8" height="15.0" fill="rgb(89,89,199)" rx="2" ry="2" />
<text  x="292.01" y="495.5" ></text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::release(TTASEventMutex&lt;GenericPolicy&gt; const&amp;) (1 samples, 0.49%)</title><rect x="573.8" y="405" width="5.9" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="576.84" y="415.5" ></text>
</g>
<g >
<title>lock_clust_rec_read_check_and_lock(lock_duration_t, buf_block_t const*, unsigned char const*, dict_index_t*, unsigned long const*, select_mode, lock_mode, unsigned long, que_thr_t*) (1 samples, 0.49%)</title><rect x="137.9" y="661" width="5.8" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="140.88" y="671.5" ></text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (1 samples, 0.49%)</title><rect x="323.9" y="565" width="5.8" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="326.89" y="575.5" ></text>
</g>
<g >
<title>handler::ha_close() (1 samples, 0.49%)</title><rect x="33.3" y="773" width="5.8" height="15.0" fill="rgb(119,119,225)" rx="2" ry="2" />
<text  x="36.25" y="783.5" ></text>
</g>
<g >
<title>srv_do_purge(unsigned long*) (73 samples, 35.96%)</title><rect x="579.7" y="773" width="424.3" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="582.66" y="783.5" >srv_do_purge(unsigned long*)</text>
</g>
<g >
<title>locksys::Latches::Unique_sharded_rw_lock::s_lock(ut::Location) (1 samples, 0.49%)</title><rect x="178.6" y="645" width="5.8" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="181.57" y="655.5" ></text>
</g>
<g >
<title>std::this_thread::get_id() (1 samples, 0.49%)</title><rect x="754.0" y="501" width="5.9" height="15.0" fill="rgb(85,85,195)" rx="2" ry="2" />
<text  x="757.04" y="511.5" ></text>
</g>
<g >
<title>srv_purge_coordinator_thread() (73 samples, 35.96%)</title><rect x="579.7" y="789" width="424.3" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="582.66" y="799.5" >srv_purge_coordinator_thread()</text>
</g>
<g >
<title>lock_rec_convert_impl_to_expl(buf_block_t const*, unsigned char const*, dict_index_t*, unsigned long const*) (1 samples, 0.49%)</title><rect x="225.1" y="517" width="5.8" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="228.07" y="527.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Add_dirty_blocks_to_flush_list&gt; &gt;(Iterate&lt;Add_dirty_blocks_to_flush_list&gt;&amp;) const (1 samples, 0.49%)</title><rect x="85.6" y="613" width="5.8" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="88.57" y="623.5" ></text>
</g>
<g >
<title>page_id_t::space() const (1 samples, 0.49%)</title><rect x="329.7" y="485" width="5.8" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="332.70" y="495.5" ></text>
</g>
<g >
<title>que_run_threads_low(que_thr_t*) (25 samples, 12.32%)</title><rect x="196.0" y="725" width="145.3" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="199.01" y="735.5" >que_run_threads_lo..</text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.49%)</title><rect x="382.0" y="645" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="385.02" y="655.5" ></text>
</g>
<g >
<title>Find_page::get_slot() const (1 samples, 0.49%)</title><rect x="666.8" y="581" width="5.9" height="15.0" fill="rgb(96,96,204)" rx="2" ry="2" />
<text  x="669.85" y="591.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, Detached_thread, void (*)()&gt;(std::__invoke_other, Detached_thread&amp;&amp;, void (*&amp;&amp;)()) (73 samples, 35.96%)</title><rect x="579.7" y="885" width="424.3" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="582.66" y="895.5" >void std::__invoke_impl&lt;void, Detached_thread, void (*)()..</text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (1 samples, 0.49%)</title><rect x="155.3" y="549" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="158.32" y="559.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.49%)</title><rect x="562.2" y="581" width="5.8" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="565.22" y="591.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void (*(log_t*))(log_t*)&gt;::operator()&lt;, void&gt;() (3 samples, 1.48%)</title><rect x="539.0" y="853" width="17.4" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="541.97" y="863.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt; &gt;::~_State_impl() (3 samples, 1.48%)</title><rect x="539.0" y="997" width="17.4" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="541.97" y="1007.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (1 samples, 0.49%)</title><rect x="695.9" y="629" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="698.91" y="639.5" ></text>
</g>
<g >
<title>trx_undo_page_get(page_id_t const&amp;, page_size_t const&amp;, mtr_t*) (3 samples, 1.48%)</title><rect x="632.0" y="629" width="17.4" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="634.97" y="639.5" ></text>
</g>
<g >
<title>rec_offs_nth_extern(dict_index_t const*, unsigned long const*, unsigned long) (1 samples, 0.49%)</title><rect x="271.6" y="581" width="5.8" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="274.58" y="591.5" ></text>
</g>
<g >
<title>pfs_memory_alloc_vc(unsigned int, unsigned long, PSI_thread**) (1 samples, 0.49%)</title><rect x="347.1" y="629" width="5.9" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="350.14" y="639.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.49%)</title><rect x="684.3" y="581" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="687.29" y="591.5" ></text>
</g>
<g >
<title>btr_pcur_t::restore_position(unsigned long, mtr_t*, ut::Location) (2 samples, 0.99%)</title><rect x="277.4" y="645" width="11.6" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="280.39" y="655.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::pfs_exit() (1 samples, 0.49%)</title><rect x="841.2" y="437" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="844.23" y="447.5" ></text>
</g>
<g >
<title>row_ins_index_entry_step(ins_node_t*, que_thr_t*) (2 samples, 0.99%)</title><rect x="120.4" y="677" width="11.7" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="123.44" y="687.5" ></text>
</g>
<g >
<title>ut_list_base&lt;dyn_buf_t&lt;512ul&gt;::block_t, ut_list_base_explicit_getter&lt;dyn_buf_t&lt;512ul&gt;::block_t, &amp;dyn_buf_t&lt;512ul&gt;::block_t::m_node&gt; &gt;::get_node(dyn_buf_t&lt;512ul&gt;::block_t const&amp;) (1 samples, 0.49%)</title><rect x="1166.7" y="485" width="5.9" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="1169.75" y="495.5" ></text>
</g>
<g >
<title>unsigned int hardware::consume_chunk&lt;168ul, 3ul, hardware::use_pclmul&gt;(unsigned int, unsigned char const*) (1 samples, 0.49%)</title><rect x="556.4" y="613" width="5.8" height="15.0" fill="rgb(131,131,237)" rx="2" ry="2" />
<text  x="559.40" y="623.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void (*&amp;)()&gt;::type std::__invoke&lt;void (*&amp;)()&gt;(void (*&amp;)()) (73 samples, 35.96%)</title><rect x="579.7" y="821" width="424.3" height="15.0" fill="rgb(108,108,215)" rx="2" ry="2" />
<text  x="582.66" y="831.5" >std::__invoke_result&lt;void (*&amp;)()&gt;::type std::__invoke&lt;voi..</text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(TTASEventMutex&lt;GenericPolicy&gt; const*, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="230.9" y="341" width="5.8" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="233.89" y="351.5" ></text>
</g>
<g >
<title>buf_page_release_latch(buf_block_t*, unsigned long) (1 samples, 0.49%)</title><rect x="713.3" y="597" width="5.9" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="716.35" y="607.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::enter(unsigned int, unsigned int, char const*, unsigned int) (10 samples, 4.93%)</title><rect x="1021.4" y="725" width="58.2" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="1024.43" y="735.5" >TTASEv..</text>
</g>
<g >
<title>execute_native_thread_routine (14 samples, 6.90%)</title><rect x="1097.0" y="965" width="81.4" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="1100.00" y="975.5" >execute_n..</text>
</g>
<g >
<title>ut::hash_uint64_pair(unsigned long, unsigned long) (1 samples, 0.49%)</title><rect x="649.4" y="517" width="5.8" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="652.41" y="527.5" ></text>
</g>
<g >
<title>srv_task_execute() (5 samples, 2.46%)</title><rect x="1149.3" y="773" width="29.1" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="1152.31" y="783.5" >sr..</text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.49%)</title><rect x="911.0" y="597" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="913.99" y="607.5" ></text>
</g>
<g >
<title>trx_write_serialisation_history(trx_t*, mtr_t*) (5 samples, 2.46%)</title><rect x="353.0" y="741" width="29.0" height="15.0" fill="rgb(107,107,214)" rx="2" ry="2" />
<text  x="355.96" y="751.5" >tr..</text>
</g>
<g >
<title>__skb_clone (1 samples, 0.49%)</title><rect x="15.8" y="789" width="5.8" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="18.81" y="799.5" ></text>
</g>
<g >
<title>trx_rsegf_get_nth_undo(unsigned char*, unsigned long, mtr_t*) (1 samples, 0.49%)</title><rect x="190.2" y="677" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="193.20" y="687.5" ></text>
</g>
<g >
<title>rw_lock_s_unlock_gen(rw_lock_t*, unsigned long) (1 samples, 0.49%)</title><rect x="864.5" y="565" width="5.8" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="867.48" y="575.5" ></text>
</g>
<g >
<title>btr_cur_update_in_place(unsigned long, btr_cur_t*, unsigned long*, upd_t const*, unsigned long, que_thr_t*, unsigned long, mtr_t*) (2 samples, 0.99%)</title><rect x="120.4" y="581" width="11.7" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="123.44" y="591.5" ></text>
</g>
<g >
<title>ut::hash_uint64_pair(unsigned long, unsigned long) (1 samples, 0.49%)</title><rect x="678.5" y="517" width="5.8" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="681.47" y="527.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.49%)</title><rect x="318.1" y="405" width="5.8" height="15.0" fill="rgb(123,123,229)" rx="2" ry="2" />
<text  x="321.08" y="415.5" ></text>
</g>
<g >
<title>buf_validate() (1 samples, 0.49%)</title><rect x="614.5" y="565" width="5.8" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="617.53" y="575.5" ></text>
</g>
<g >
<title>locksys::Latches::Unique_sharded_rw_lock::s_lock(ut::Location) (1 samples, 0.49%)</title><rect x="446.0" y="629" width="5.8" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="448.96" y="639.5" ></text>
</g>
<g >
<title>ha_innobase::open(char const*, int, unsigned int, dd::Table const*) (4 samples, 1.97%)</title><rect x="399.5" y="757" width="23.2" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="402.46" y="767.5" >h..</text>
</g>
<g >
<title>trx_commit_complete_for_mysql(trx_t*) (2 samples, 0.99%)</title><rect x="492.5" y="773" width="11.6" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="495.46" y="783.5" ></text>
</g>
<g >
<title>trx_rsegf_get_nth_undo(unsigned char*, unsigned long, mtr_t*) (1 samples, 0.49%)</title><rect x="666.8" y="645" width="5.9" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="669.85" y="655.5" ></text>
</g>
<g >
<title>cmp_dtuple_rec_with_match_bytes(dtuple_t const*, unsigned char const*, dict_index_t const*, unsigned long const*, unsigned long*, unsigned long*) (2 samples, 0.99%)</title><rect x="265.8" y="597" width="11.6" height="15.0" fill="rgb(102,102,211)" rx="2" ry="2" />
<text  x="268.76" y="607.5" ></text>
</g>
<g >
<title>Wait_stats os_event_wait_for&lt;log_flusher(log_t*)::{lambda(bool)#1}&gt;(os_event*&amp;, unsigned long, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;, log_flusher(log_t*)::{lambda(bool)#1}) (1 samples, 0.49%)</title><rect x="533.2" y="757" width="5.8" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="536.15" y="767.5" ></text>
</g>
<g >
<title>mtr_t::memo_contains_page_flagged(unsigned char const*, unsigned long) const (1 samples, 0.49%)</title><rect x="626.2" y="597" width="5.8" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="629.16" y="607.5" ></text>
</g>
<g >
<title>srv_worker_thread() (14 samples, 6.90%)</title><rect x="1097.0" y="981" width="81.4" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="1100.00" y="991.5" >srv_worke..</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt; &gt;::~_State_impl() (2 samples, 0.99%)</title><rect x="568.0" y="997" width="11.7" height="15.0" fill="rgb(81,81,190)" rx="2" ry="2" />
<text  x="571.03" y="1007.5" ></text>
</g>
<g >
<title>auto trx_sys_t::latch_and_execute_with_active_trx&lt;trx_rw_is_active(unsigned long, bool)::{lambda(trx_t*)#1}&gt;(unsigned long, trx_rw_is_active(unsigned long, bool)::{lambda(trx_t*)#1}&amp;&amp;, ut::Location const&amp;) (1 samples, 0.49%)</title><rect x="225.1" y="485" width="5.8" height="15.0" fill="rgb(97,97,205)" rx="2" ry="2" />
<text  x="228.07" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void (*&amp;)(log_t*), log_t*&amp;&gt;::type std::__invoke&lt;void (*&amp;)(log_t*), log_t*&amp;&gt;(void (*&amp;)(log_t*), log_t*&amp;) (3 samples, 1.48%)</title><rect x="539.0" y="821" width="17.4" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="541.97" y="831.5" ></text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (1 samples, 0.49%)</title><rect x="184.4" y="693" width="5.8" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="187.38" y="703.5" ></text>
</g>
<g >
<title>napi_complete_done (1 samples, 0.49%)</title><rect x="318.1" y="341" width="5.8" height="15.0" fill="rgb(123,123,230)" rx="2" ry="2" />
<text  x="321.08" y="351.5" ></text>
</g>
<g >
<title>log_write_up_to(log_t&amp;, unsigned long, bool) (1 samples, 0.49%)</title><rect x="172.8" y="677" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="175.76" y="687.5" ></text>
</g>
<g >
<title>tcp_write_xmit (1 samples, 0.49%)</title><rect x="15.8" y="821" width="5.8" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="18.81" y="831.5" ></text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;std::__is_char&lt;char&gt;::__value, bool&gt;::__type std::operator==&lt;char&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.49%)</title><rect x="428.5" y="757" width="5.8" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="431.52" y="767.5" ></text>
</g>
<g >
<title>que_run_threads(que_thr_t*) (25 samples, 12.32%)</title><rect x="196.0" y="741" width="145.3" height="15.0" fill="rgb(136,136,242)" rx="2" ry="2" />
<text  x="199.01" y="751.5" >que_run_threads(qu..</text>
</g>
<g >
<title>dev_hard_start_xmit (1 samples, 0.49%)</title><rect x="318.1" y="117" width="5.8" height="15.0" fill="rgb(105,105,212)" rx="2" ry="2" />
<text  x="321.08" y="127.5" ></text>
</g>
<g >
<title>void Detached_thread::operator()&lt;void (*)()&gt;(void (*&amp;&amp;)()) (12 samples, 5.91%)</title><rect x="1021.4" y="869" width="69.8" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="1024.43" y="879.5" >void De..</text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::exit() (1 samples, 0.49%)</title><rect x="196.0" y="709" width="5.8" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="199.01" y="719.5" ></text>
</g>
<g >
<title>mtr_t::commit() (1 samples, 0.49%)</title><rect x="841.2" y="661" width="5.8" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="844.23" y="671.5" ></text>
</g>
<g >
<title>pfs_rw_lock_x_unlock_func(unsigned long, rw_lock_t*) (1 samples, 0.49%)</title><rect x="730.8" y="517" width="5.8" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="733.79" y="527.5" ></text>
</g>
<g >
<title>trx_release_impl_and_expl_locks(trx_t*, bool) (2 samples, 0.99%)</title><rect x="440.1" y="693" width="11.7" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="443.15" y="703.5" ></text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (1 samples, 0.49%)</title><rect x="318.1" y="533" width="5.8" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="321.08" y="543.5" ></text>
</g>
<g >
<title>row_purge_record_func(purge_node_t*, unsigned char*, que_thr_t const*, bool, THD*) (2 samples, 0.99%)</title><rect x="1160.9" y="661" width="11.7" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="1163.94" y="671.5" ></text>
</g>
<g >
<title>rw_lock_s_unlock_gen(rw_lock_t*, unsigned long) (1 samples, 0.49%)</title><rect x="132.1" y="549" width="5.8" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="135.07" y="559.5" ></text>
</g>
<g >
<title>log_free_check() (1 samples, 0.49%)</title><rect x="201.8" y="709" width="5.8" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="204.82" y="719.5" ></text>
</g>
<g >
<title>void Detached_thread::operator()&lt;void (*)(log_t*), log_t*&gt;(void (*&amp;&amp;)(log_t*), log_t*&amp;&amp;) (2 samples, 0.99%)</title><rect x="556.4" y="869" width="11.6" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="559.40" y="879.5" ></text>
</g>
<g >
<title>row_upd_clust_step(upd_node_t*, que_thr_t*) (5 samples, 2.46%)</title><rect x="143.7" y="677" width="29.1" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="146.69" y="687.5" >ro..</text>
</g>
<g >
<title>row_ins_clust_index_entry_by_modify(btr_pcur_t*, unsigned long, unsigned long, unsigned long**, mem_block_info_t**, mem_block_info_t*, dtuple_t const*, que_thr_t*, mtr_t*) (1 samples, 0.49%)</title><rect x="225.1" y="597" width="5.8" height="15.0" fill="rgb(84,84,193)" rx="2" ry="2" />
<text  x="228.07" y="607.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::is_owned() const (1 samples, 0.49%)</title><rect x="312.3" y="533" width="5.8" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="315.27" y="543.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::enter(unsigned int, unsigned int, char const*, unsigned int) (8 samples, 3.94%)</title><rect x="1102.8" y="725" width="46.5" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="1105.81" y="735.5" >TTAS..</text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (1 samples, 0.49%)</title><rect x="661.0" y="629" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="664.03" y="639.5" ></text>
</g>
<g >
<title>mach_read_from_4(unsigned char const*) (3 samples, 1.48%)</title><rect x="62.3" y="501" width="17.5" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="65.32" y="511.5" ></text>
</g>
<g >
<title>trx_rseg_t::latch() (1 samples, 0.49%)</title><rect x="318.1" y="581" width="5.8" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="321.08" y="591.5" ></text>
</g>
<g >
<title>row_purge_remove_clust_if_poss(purge_node_t*) (2 samples, 0.99%)</title><rect x="1160.9" y="629" width="11.7" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="1163.94" y="639.5" ></text>
</g>
<g >
<title>page_id_t::space() const (1 samples, 0.49%)</title><rect x="661.0" y="549" width="5.8" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="664.03" y="559.5" ></text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.49%)</title><rect x="974.9" y="565" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="977.93" y="575.5" ></text>
</g>
<g >
<title>mach_read_from_4(unsigned char const*) (1 samples, 0.49%)</title><rect x="608.7" y="629" width="5.8" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="611.72" y="639.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.49%)</title><rect x="974.9" y="645" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="977.93" y="655.5" ></text>
</g>
<g >
<title>ut::detail::Alloc_&lt;ut::detail::Alloc_pfs&gt;::free(void*) (1 samples, 0.49%)</title><rect x="829.6" y="485" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="832.61" y="495.5" ></text>
</g>
<g >
<title>trx_rseg_t::latch() (3 samples, 1.48%)</title><rect x="353.0" y="725" width="17.4" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="355.96" y="735.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Find_page&gt; &gt;(Iterate&lt;Find_page&gt;&amp;) const (1 samples, 0.49%)</title><rect x="161.1" y="517" width="5.8" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="164.13" y="527.5" ></text>
</g>
<g >
<title>PSI_mutex_locker_state_v1::PSI_mutex_locker_state_v1() (1 samples, 0.49%)</title><rect x="963.3" y="485" width="5.8" height="15.0" fill="rgb(123,123,229)" rx="2" ry="2" />
<text  x="966.30" y="495.5" ></text>
</g>
<g >
<title>Iterate&lt;Find_page&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (1 samples, 0.49%)</title><rect x="318.1" y="485" width="5.8" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="321.08" y="495.5" ></text>
</g>
<g >
<title>trx_undo_get_next_rec_from_next_page(unsigned int, page_size_t const&amp;, unsigned char const*, unsigned int, unsigned long, unsigned long, mtr_t*) (1 samples, 0.49%)</title><rect x="701.7" y="693" width="5.8" height="15.0" fill="rgb(131,131,237)" rx="2" ry="2" />
<text  x="704.72" y="703.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::is_free(unsigned int, unsigned int, unsigned int&amp;) const (1 samples, 0.49%)</title><rect x="1184.2" y="693" width="5.8" height="15.0" fill="rgb(136,136,242)" rx="2" ry="2" />
<text  x="1187.19" y="703.5" ></text>
</g>
<g >
<title>rw_lock_s_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="1085.4" y="501" width="5.8" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="1088.37" y="511.5" ></text>
</g>
<g >
<title>std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; std::__set_difference&lt;std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_less_iter&gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_less_iter) (1 samples, 0.49%)</title><rect x="254.1" y="437" width="5.9" height="15.0" fill="rgb(110,110,218)" rx="2" ry="2" />
<text  x="257.14" y="447.5" ></text>
</g>
<g >
<title>unlock_external(THD*, TABLE**, unsigned int) (1 samples, 0.49%)</title><rect x="44.9" y="773" width="5.8" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="47.88" y="783.5" ></text>
</g>
<g >
<title>void hardware::Loop&lt;3ul&gt;::run&lt;hardware::Update_step_executor&lt;hardware::use_pclmul, 168ul&gt;, unsigned long (&amp;) [3], unsigned long const*&amp;&gt;(unsigned long (&amp;) [3], unsigned long const*&amp;) (1 samples, 0.49%)</title><rect x="556.4" y="597" width="5.8" height="15.0" fill="rgb(118,118,224)" rx="2" ry="2" />
<text  x="559.40" y="607.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt;::operator()() (2 samples, 0.99%)</title><rect x="568.0" y="933" width="11.7" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="571.03" y="943.5" ></text>
</g>
<g >
<title>mtr_t::release_s_latch_at_savepoint(unsigned long, rw_lock_t*) (1 samples, 0.49%)</title><rect x="1166.7" y="533" width="5.9" height="15.0" fill="rgb(81,81,191)" rx="2" ry="2" />
<text  x="1169.75" y="543.5" ></text>
</g>
<g >
<title>do_futex (3 samples, 1.48%)</title><rect x="1004.0" y="949" width="17.4" height="15.0" fill="rgb(135,135,241)" rx="2" ry="2" />
<text  x="1006.99" y="959.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void (*&amp;)()&gt;(std::__invoke_other, void (*&amp;)()) (73 samples, 35.96%)</title><rect x="579.7" y="805" width="424.3" height="15.0" fill="rgb(131,131,236)" rx="2" ry="2" />
<text  x="582.66" y="815.5" >void std::__invoke_impl&lt;void, void (*&amp;)()&gt;(std::__invoke_..</text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::Context::Context(latch_id_t) (1 samples, 0.49%)</title><rect x="230.9" y="325" width="5.8" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="233.89" y="335.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void (*&amp;)(log_t*), log_t*&amp;&gt;::type std::__invoke&lt;void (*&amp;)(log_t*), log_t*&amp;&gt;(void (*&amp;)(log_t*), log_t*&amp;) (2 samples, 0.99%)</title><rect x="556.4" y="821" width="11.6" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="559.40" y="831.5" ></text>
</g>
<g >
<title>dd::acquire_shared_table_mdl(THD*, char const*, char const*, bool, MDL_ticket**) (1 samples, 0.49%)</title><rect x="1155.1" y="629" width="5.8" height="15.0" fill="rgb(123,123,229)" rx="2" ry="2" />
<text  x="1158.12" y="639.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.49%)</title><rect x="323.9" y="453" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="326.89" y="463.5" ></text>
</g>
<g >
<title>handler::ha_external_lock(THD*, int) (1 samples, 0.49%)</title><rect x="44.9" y="757" width="5.8" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="47.88" y="767.5" ></text>
</g>
<g >
<title>buf_pool_watch_is_sentinel(buf_pool_t const*, buf_page_t const*) (1 samples, 0.49%)</title><rect x="486.7" y="581" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="489.65" y="591.5" ></text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(unsigned long), unsigned long&gt; &gt;::_M_invoke&lt;0ul, 1ul, 2ul&gt;(std::_Index_tuple&lt;0ul, 1ul, 2ul&gt;) (1 samples, 0.49%)</title><rect x="515.7" y="917" width="5.8" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="518.71" y="927.5" ></text>
</g>
<g >
<title>flst_write_addr(unsigned char*, fil_addr_t, mtr_t*) (1 samples, 0.49%)</title><rect x="719.2" y="661" width="5.8" height="15.0" fill="rgb(118,118,224)" rx="2" ry="2" />
<text  x="722.16" y="671.5" ></text>
</g>
<g >
<title>yylex() (1 samples, 0.49%)</title><rect x="108.8" y="725" width="5.8" height="15.0" fill="rgb(136,136,241)" rx="2" ry="2" />
<text  x="111.82" y="735.5" ></text>
</g>
<g >
<title>Wait_stats os_event_wait_for&lt;log_flush_notifier(log_t*)::{lambda(bool)#1}&gt;(os_event*&amp;, unsigned long, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;, log_flush_notifier(log_t*)::{lambda(bool)#1}) (2 samples, 0.99%)</title><rect x="521.5" y="757" width="11.7" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="524.53" y="767.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_exit() (1 samples, 0.49%)</title><rect x="277.4" y="517" width="5.8" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="280.39" y="527.5" ></text>
</g>
<g >
<title>rw_lock_s_unlock_func(unsigned long, rw_lock_t*) (1 samples, 0.49%)</title><rect x="864.5" y="549" width="5.8" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="867.48" y="559.5" ></text>
</g>
<g >
<title>dyn_buf_t&lt;512ul&gt;::size() const (1 samples, 0.49%)</title><rect x="1166.7" y="517" width="5.9" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="1169.75" y="527.5" ></text>
</g>
<g >
<title>rw_lock_s_lock(rw_lock_t*, ut::Location) (1 samples, 0.49%)</title><rect x="823.8" y="565" width="5.8" height="15.0" fill="rgb(118,118,224)" rx="2" ry="2" />
<text  x="826.79" y="575.5" ></text>
</g>
<g >
<title>row_ins(ins_node_t*, que_thr_t*) (8 samples, 3.94%)</title><rect x="207.6" y="677" width="46.5" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="210.64" y="687.5" >row_..</text>
</g>
<g >
<title>Iterate&lt;Find_page&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (1 samples, 0.49%)</title><rect x="690.1" y="581" width="5.8" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="693.10" y="591.5" ></text>
</g>
<g >
<title>closefrm(TABLE*, bool) (1 samples, 0.49%)</title><rect x="33.3" y="789" width="5.8" height="15.0" fill="rgb(120,120,226)" rx="2" ry="2" />
<text  x="36.25" y="799.5" ></text>
</g>
<g >
<title>ut_list_base&lt;dict_table_t, ut_list_base_explicit_getter&lt;dict_table_t, &amp;dict_table_t::table_LRU&gt; &gt;::base_iterator&lt;dict_table_t&gt;::operator!=(ut_list_base&lt;dict_table_t, ut_list_base_explicit_getter&lt;dict_table_t, &amp;dict_table_t::table_LRU&gt; &gt;::base_iterator&lt;dict_table_t&gt; const&amp;) const (1 samples, 0.49%)</title><rect x="1079.6" y="613" width="5.8" height="15.0" fill="rgb(97,97,205)" rx="2" ry="2" />
<text  x="1082.56" y="623.5" ></text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (1 samples, 0.49%)</title><rect x="79.8" y="485" width="5.8" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="82.75" y="495.5" ></text>
</g>
<g >
<title>[unknown] (15 samples, 7.39%)</title><rect x="1091.2" y="1013" width="87.2" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="1094.18" y="1023.5" >[unknown]</text>
</g>
<g >
<title>__dev_queue_xmit (1 samples, 0.49%)</title><rect x="318.1" y="165" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="321.08" y="175.5" ></text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (1 samples, 0.49%)</title><rect x="190.2" y="693" width="5.8" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="193.20" y="703.5" ></text>
</g>
<g >
<title>page_id_t::hash() const (1 samples, 0.49%)</title><rect x="382.0" y="581" width="5.8" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="385.02" y="591.5" ></text>
</g>
<g >
<title>buf_page_t::is_io_fix_write() const (1 samples, 0.49%)</title><rect x="254.1" y="549" width="5.9" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="257.14" y="559.5" ></text>
</g>
<g >
<title>bool dd::cache::Storage_adapter::store&lt;dd::Table_stat&gt;(THD*, dd::Table_stat*) (11 samples, 5.42%)</title><rect x="44.9" y="837" width="63.9" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="47.88" y="847.5" >bool dd..</text>
</g>
<g >
<title>rw_lock_s_unlock(rw_lock_t*) (1 samples, 0.49%)</title><rect x="864.5" y="581" width="5.8" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="867.48" y="591.5" ></text>
</g>
<g >
<title>void log_sync_point&lt;37ul&gt;(char const (&amp;) [37ul]) (1 samples, 0.49%)</title><rect x="521.5" y="725" width="5.8" height="15.0" fill="rgb(125,125,232)" rx="2" ry="2" />
<text  x="524.53" y="735.5" ></text>
</g>
<g >
<title>buf_calc_page_crc32(unsigned char const*, bool) (1 samples, 0.49%)</title><rect x="568.0" y="629" width="5.8" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="571.03" y="639.5" ></text>
</g>
<g >
<title>trx_purge_truncate() (49 samples, 24.14%)</title><rect x="713.3" y="741" width="284.9" height="15.0" fill="rgb(131,131,237)" rx="2" ry="2" />
<text  x="716.35" y="751.5" >trx_purge_truncate()</text>
</g>
<g >
<title>Find_page::operator()(mtr_memo_slot_t*) (1 samples, 0.49%)</title><rect x="161.1" y="485" width="5.8" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="164.13" y="495.5" ></text>
</g>
<g >
<title>mtr_t::Command::execute() (2 samples, 0.99%)</title><rect x="85.6" y="645" width="11.6" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="88.57" y="655.5" ></text>
</g>
<g >
<title>my_strcasecmp_utf8mb3 (1 samples, 0.49%)</title><rect x="1155.1" y="597" width="5.8" height="15.0" fill="rgb(134,134,240)" rx="2" ry="2" />
<text  x="1158.12" y="607.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator()(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) const (1 samples, 0.49%)</title><rect x="428.5" y="773" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="431.52" y="783.5" ></text>
</g>
<g >
<title>trans_commit_implicit(THD*, bool) (13 samples, 6.40%)</title><rect x="434.3" y="869" width="75.6" height="15.0" fill="rgb(111,111,219)" rx="2" ry="2" />
<text  x="437.33" y="879.5" >trans_co..</text>
</g>
<g >
<title>connection (87 samples, 42.86%)</title><rect x="10.0" y="1029" width="505.7" height="15.0" fill="rgb(120,120,226)" rx="2" ry="2" />
<text  x="13.00" y="1039.5" >connection</text>
</g>
<g >
<title>std::__invoke_result&lt;void (*&amp;)()&gt;::type std::__invoke&lt;void (*&amp;)()&gt;(void (*&amp;)()) (12 samples, 5.91%)</title><rect x="1021.4" y="821" width="69.8" height="15.0" fill="rgb(108,108,215)" rx="2" ry="2" />
<text  x="1024.43" y="831.5" >std::__..</text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.49%)</title><rect x="643.6" y="565" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="646.60" y="575.5" ></text>
</g>
<g >
<title>std::atomic&lt;std::thread::id&gt;::store(std::thread::id, std::memory_order) (1 samples, 0.49%)</title><rect x="637.8" y="437" width="5.8" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="640.78" y="447.5" ></text>
</g>
<g >
<title>Lock_iter::first(hash_cell_t*, RecID const&amp;) (1 samples, 0.49%)</title><rect x="248.3" y="453" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="251.33" y="463.5" ></text>
</g>
<g >
<title>trx_rseg_t::unlatch() (4 samples, 1.97%)</title><rect x="62.3" y="581" width="23.3" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="65.32" y="591.5" >t..</text>
</g>
<g >
<title>handler::index_read_map(unsigned char*, unsigned char const*, unsigned long, ha_rkey_function) (2 samples, 0.99%)</title><rect x="97.2" y="757" width="11.6" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="100.19" y="767.5" ></text>
</g>
<g >
<title>ut::fast_modulo_t::fast_modulo_t(unsigned long, unsigned long) (1 samples, 0.49%)</title><rect x="242.5" y="309" width="5.8" height="15.0" fill="rgb(124,124,231)" rx="2" ry="2" />
<text  x="245.51" y="319.5" ></text>
</g>
<g >
<title>ib_log_fl_notif (2 samples, 0.99%)</title><rect x="521.5" y="1029" width="11.7" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="524.53" y="1039.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (3 samples, 1.48%)</title><rect x="823.8" y="645" width="17.4" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="826.79" y="655.5" ></text>
</g>
<g >
<title>mach_read_from_4(unsigned char const*) (2 samples, 0.99%)</title><rect x="893.5" y="613" width="11.7" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="896.55" y="623.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.49%)</title><rect x="382.0" y="661" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="385.02" y="671.5" ></text>
</g>
<g >
<title>pvclock_clocksource_read (1 samples, 0.49%)</title><rect x="318.1" y="37" width="5.8" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="321.08" y="47.5" ></text>
</g>
<g >
<title>Wait_stats Log_thread_waiting::wait&lt;log_flusher(log_t*)::{lambda(bool)#1}&gt;(log_flusher(log_t*)::{lambda(bool)#1}) (1 samples, 0.49%)</title><rect x="533.2" y="773" width="5.8" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="536.15" y="783.5" ></text>
</g>
<g >
<title>try_to_wake_up (3 samples, 1.48%)</title><rect x="1004.0" y="901" width="17.4" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="1006.99" y="911.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Find_page&gt; &gt;(Iterate&lt;Find_page&gt;&amp;) const (1 samples, 0.49%)</title><rect x="591.3" y="597" width="5.8" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="594.28" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;buf_io_fix&gt;* std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_M_create_node&lt;buf_io_fix const&amp;&gt;(buf_io_fix const&amp;) (1 samples, 0.49%)</title><rect x="254.1" y="325" width="5.9" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="257.14" y="335.5" ></text>
</g>
<g >
<title>dd::Raw_table::find_record(dd::Object_key const&amp;, std::unique_ptr&lt;dd::Raw_record, std::default_delete&lt;dd::Raw_record&gt; &gt;&amp;) (2 samples, 0.99%)</title><rect x="97.2" y="789" width="11.6" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="100.19" y="799.5" ></text>
</g>
<g >
<title>pars_info_create() (1 samples, 0.49%)</title><rect x="341.3" y="773" width="5.8" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="344.33" y="783.5" ></text>
</g>
<g >
<title>std::this_thread::get_id() (1 samples, 0.49%)</title><rect x="632.0" y="485" width="5.8" height="15.0" fill="rgb(85,85,195)" rx="2" ry="2" />
<text  x="634.97" y="495.5" ></text>
</g>
<g >
<title>unsigned long Counter::inc&lt;64ul&gt;(Counter::Shards&lt;64ul&gt;&amp;, unsigned long) (1 samples, 0.49%)</title><rect x="986.6" y="629" width="5.8" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="989.55" y="639.5" ></text>
</g>
<g >
<title>rw_lock_s_lock_gen(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="1085.4" y="517" width="5.8" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="1088.37" y="527.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;mtr_t const*, std::hash&lt;mtr_t const*&gt;, std::equal_to&lt;mtr_t const*&gt;, ut::allocator&lt;mtr_t const*, ut::detail::allocator_base_pfs&lt;mtr_t const*&gt; &gt; &gt;::insert(mtr_t const*&amp;&amp;) (1 samples, 0.49%)</title><rect x="434.3" y="709" width="5.8" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="437.33" y="719.5" ></text>
</g>
<g >
<title>rw_lock_remove_debug_info(rw_lock_t*, unsigned long, unsigned long) (1 samples, 0.49%)</title><rect x="713.3" y="517" width="5.9" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="716.35" y="527.5" ></text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.49%)</title><rect x="632.0" y="501" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="634.97" y="511.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::lookup() (1 samples, 0.49%)</title><rect x="823.8" y="581" width="5.8" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="826.79" y="591.5" ></text>
</g>
<g >
<title>intern_close_table(TABLE*) (1 samples, 0.49%)</title><rect x="33.3" y="805" width="5.8" height="15.0" fill="rgb(97,97,206)" rx="2" ry="2" />
<text  x="36.25" y="815.5" ></text>
</g>
<g >
<title>ut::hash_uint64_pair(unsigned long, unsigned long) (1 samples, 0.49%)</title><rect x="382.0" y="565" width="5.8" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="385.02" y="575.5" ></text>
</g>
<g >
<title>mtr_t::memo_contains_page_flagged(unsigned char const*, unsigned long) const (1 samples, 0.49%)</title><rect x="597.1" y="613" width="5.8" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="600.09" y="623.5" ></text>
</g>
<g >
<title>ip_protocol_deliver_rcu (1 samples, 0.49%)</title><rect x="318.1" y="261" width="5.8" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="321.08" y="271.5" ></text>
</g>
<g >
<title>unlikely(bool) (2 samples, 0.99%)</title><rect x="812.2" y="645" width="11.6" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="815.17" y="655.5" ></text>
</g>
<g >
<title>que_run_threads(que_thr_t*) (2 samples, 0.99%)</title><rect x="1079.6" y="757" width="11.6" height="15.0" fill="rgb(136,136,242)" rx="2" ry="2" />
<text  x="1082.56" y="767.5" ></text>
</g>
<g >
<title>trx_purge_attach_undo_recs(unsigned long, unsigned long) (22 samples, 10.84%)</title><rect x="585.5" y="741" width="127.8" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="588.47" y="751.5" >trx_purge_attach..</text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::exit() (1 samples, 0.49%)</title><rect x="132.1" y="485" width="5.8" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="135.07" y="495.5" ></text>
</g>
<g >
<title>ha_innobase::info_low(unsigned int, bool) (49 samples, 24.14%)</title><rect x="108.8" y="837" width="284.8" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="111.82" y="847.5" >ha_innobase::info_low(unsigned int, bo..</text>
</g>
<g >
<title>void Detached_thread::operator()&lt;void (*)(unsigned long), unsigned long&gt;(void (*&amp;&amp;)(unsigned long), unsigned long&amp;&amp;) (1 samples, 0.49%)</title><rect x="515.7" y="869" width="5.8" height="15.0" fill="rgb(109,109,216)" rx="2" ry="2" />
<text  x="518.71" y="879.5" ></text>
</g>
<g >
<title>que_run_threads(que_thr_t*) (10 samples, 4.93%)</title><rect x="114.6" y="757" width="58.2" height="15.0" fill="rgb(136,136,242)" rx="2" ry="2" />
<text  x="117.63" y="767.5" >que_ru..</text>
</g>
<g >
<title>[unknown] (2 samples, 0.99%)</title><rect x="521.5" y="1013" width="11.7" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="524.53" y="1023.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.49%)</title><rect x="79.8" y="517" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="82.75" y="527.5" ></text>
</g>
<g >
<title>start_thread (84 samples, 41.38%)</title><rect x="27.4" y="1013" width="488.3" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="30.44" y="1023.5" >start_thread</text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (5 samples, 2.46%)</title><rect x="620.3" y="645" width="29.1" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="623.34" y="655.5" >tr..</text>
</g>
<g >
<title>kvm_clock_get_cycles (1 samples, 0.49%)</title><rect x="318.1" y="69" width="5.8" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="321.08" y="79.5" ></text>
</g>
<g >
<title>ext4_buffered_write_iter (1 samples, 0.49%)</title><rect x="562.2" y="517" width="5.8" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="565.22" y="527.5" ></text>
</g>
<g >
<title>Double_write::flush_to_disk(buf_flush_t) (1 samples, 0.49%)</title><rect x="573.8" y="597" width="5.9" height="15.0" fill="rgb(93,93,201)" rx="2" ry="2" />
<text  x="576.84" y="607.5" ></text>
</g>
<g >
<title>rw_lock_x_lock_gen(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="736.6" y="581" width="5.8" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="739.60" y="591.5" ></text>
</g>
<g >
<title>rec_offs_validate(unsigned char const*, dict_index_t const*, unsigned long const*) (1 samples, 0.49%)</title><rect x="271.6" y="549" width="5.8" height="15.0" fill="rgb(96,96,204)" rx="2" ry="2" />
<text  x="274.58" y="559.5" ></text>
</g>
<g >
<title>rw_lock_s_unlock_gen(rw_lock_t*, unsigned long) (2 samples, 0.99%)</title><rect x="829.6" y="565" width="11.6" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="832.61" y="575.5" ></text>
</g>
<g >
<title>ut_delay(unsigned long) (8 samples, 3.94%)</title><rect x="1102.8" y="677" width="46.5" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="1105.81" y="687.5" >ut_d..</text>
</g>
<g >
<title>trx_rseg_t::unlatch() (3 samples, 1.48%)</title><rect x="684.3" y="677" width="17.4" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="687.29" y="687.5" ></text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (5 samples, 2.46%)</title><rect x="457.6" y="677" width="29.1" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="460.59" y="687.5" >tr..</text>
</g>
<g >
<title>ut::hash_uint64_pair(unsigned long, unsigned long) (1 samples, 0.49%)</title><rect x="294.8" y="469" width="5.8" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="297.83" y="479.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.49%)</title><rect x="602.9" y="533" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="605.91" y="543.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (1 samples, 0.49%)</title><rect x="323.9" y="533" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="326.89" y="543.5" ></text>
</g>
<g >
<title>unlikely(bool) (2 samples, 0.99%)</title><rect x="788.9" y="565" width="11.6" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="791.92" y="575.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt; &gt;::~_State_impl() (73 samples, 35.96%)</title><rect x="579.7" y="997" width="424.3" height="15.0" fill="rgb(81,81,190)" rx="2" ry="2" />
<text  x="582.66" y="1007.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple..</text>
</g>
<g >
<title>handle_connection (84 samples, 41.38%)</title><rect x="27.4" y="981" width="488.3" height="15.0" fill="rgb(97,97,206)" rx="2" ry="2" />
<text  x="30.44" y="991.5" >handle_connection</text>
</g>
<g >
<title>file_write_and_wait_range (1 samples, 0.49%)</title><rect x="533.2" y="565" width="5.8" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="536.15" y="575.5" ></text>
</g>
<g >
<title>row_purge_del_mark(purge_node_t*) (2 samples, 0.99%)</title><rect x="1160.9" y="645" width="11.7" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="1163.94" y="655.5" ></text>
</g>
<g >
<title>wake_up_q (3 samples, 1.48%)</title><rect x="1004.0" y="917" width="17.4" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="1006.99" y="927.5" ></text>
</g>
<g >
<title>rw_lock_remove_debug_info(rw_lock_t*, unsigned long, unsigned long) (1 samples, 0.49%)</title><rect x="277.4" y="533" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="280.39" y="543.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::locked(TTASEventMutex&lt;GenericPolicy&gt; const*, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="957.5" y="485" width="5.8" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="960.49" y="495.5" ></text>
</g>
<g >
<title>dd::cache::Object_registry::m_map(dd::cache::Object_registry::Type_selector&lt;dd::Spatial_reference_system&gt;) (1 samples, 0.49%)</title><rect x="393.6" y="693" width="5.9" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="396.65" y="703.5" ></text>
</g>
<g >
<title>row_search_on_row_ref(btr_pcur_t*, unsigned long, dict_table_t*, dtuple_t const*, mtr_t*) (2 samples, 0.99%)</title><rect x="1160.9" y="581" width="11.7" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="1163.94" y="591.5" ></text>
</g>
<g >
<title>ib_lock_t const* Lock_iter::for_each&lt;locksys::rec_queue_validate_latched(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*)::{lambda(ib_lock_t*)#3}&gt;(RecID const&amp;, locksys::rec_queue_validate_latched(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*)::{lambda(ib_lock_t*)#3}&amp;&amp;, hash_table_t*) (1 samples, 0.49%)</title><rect x="248.3" y="517" width="5.8" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="251.33" y="527.5" ></text>
</g>
<g >
<title>srv_release_threads(srv_thread_type, unsigned long) (1 samples, 0.49%)</title><rect x="579.7" y="725" width="5.8" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="582.66" y="735.5" ></text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::release(TTASEventMutex&lt;GenericPolicy&gt; const&amp;) (1 samples, 0.49%)</title><rect x="196.0" y="693" width="5.8" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="199.01" y="703.5" ></text>
</g>
<g >
<title>locksys::Latches::owns_exclusive_global_latch() const (1 samples, 0.49%)</title><rect x="289.0" y="597" width="5.8" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="292.01" y="607.5" ></text>
</g>
<g >
<title>rw_lock_x_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="974.9" y="581" width="5.8" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="977.93" y="591.5" ></text>
</g>
<g >
<title>srv_worker_thread() (1 samples, 0.49%)</title><rect x="1184.2" y="789" width="5.8" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="1187.19" y="799.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::locked(TTASEventMutex&lt;GenericPolicy&gt; const*, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="260.0" y="485" width="5.8" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="262.95" y="495.5" ></text>
</g>
<g >
<title>close_thread_table(THD*, TABLE**) (1 samples, 0.49%)</title><rect x="33.3" y="837" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="36.25" y="847.5" ></text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.49%)</title><rect x="637.8" y="501" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="640.78" y="511.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::lookup() (1 samples, 0.49%)</title><rect x="382.0" y="613" width="5.8" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="385.02" y="623.5" ></text>
</g>
<g >
<title>locksys::try_release_all_locks(trx_t*) (2 samples, 0.99%)</title><rect x="440.1" y="661" width="11.7" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="443.15" y="671.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.49%)</title><rect x="614.5" y="581" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="617.53" y="591.5" ></text>
</g>
<g >
<title>__futex_abstimed_wait_common (1 samples, 0.49%)</title><rect x="21.6" y="1013" width="5.8" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="24.63" y="1023.5" ></text>
</g>
<g >
<title>buf_flush_page_and_try_neighbors(buf_page_t*, buf_flush_t, unsigned long, unsigned long*) (2 samples, 0.99%)</title><rect x="568.0" y="709" width="11.7" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="571.03" y="719.5" ></text>
</g>
<g >
<title>cmp_rec_rec(unsigned char const*, unsigned char const*, unsigned long const*, unsigned long const*, dict_index_t const*, bool, unsigned long*, bool) (1 samples, 0.49%)</title><rect x="416.9" y="565" width="5.8" height="15.0" fill="rgb(131,131,236)" rx="2" ry="2" />
<text  x="419.90" y="575.5" ></text>
</g>
<g >
<title>mtr_t::memo_contains_page_flagged(unsigned char const*, unsigned long) const (2 samples, 0.99%)</title><rect x="585.5" y="613" width="11.6" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="588.47" y="623.5" ></text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::complement(std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.49%)</title><rect x="405.3" y="421" width="5.8" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="408.27" y="431.5" ></text>
</g>
<g >
<title>buf_page_t::is_io_fix_write() const (1 samples, 0.49%)</title><rect x="155.3" y="469" width="5.8" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="158.32" y="479.5" ></text>
</g>
<g >
<title>lock_clust_rec_modify_check_and_lock(unsigned long, buf_block_t const*, unsigned char const*, dict_index_t*, unsigned long const*, que_thr_t*) (1 samples, 0.49%)</title><rect x="225.1" y="533" width="5.8" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="228.07" y="543.5" ></text>
</g>
<g >
<title>locksys::owns_page_shard(page_id_t const&amp;) (1 samples, 0.49%)</title><rect x="120.4" y="485" width="5.9" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="123.44" y="495.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Find_page&gt; &gt;(Iterate&lt;Find_page&gt;&amp;) const (1 samples, 0.49%)</title><rect x="887.7" y="629" width="5.8" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="890.73" y="639.5" ></text>
</g>
<g >
<title>btr_cur_optimistic_update(unsigned long, btr_cur_t*, unsigned long**, mem_block_info_t**, upd_t const*, unsigned long, que_thr_t*, unsigned long, mtr_t*) (1 samples, 0.49%)</title><rect x="225.1" y="581" width="5.8" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="228.07" y="591.5" ></text>
</g>
<g >
<title>TrxUndoRsegsIterator::set_next() (7 samples, 3.45%)</title><rect x="608.7" y="677" width="40.7" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="611.72" y="687.5" >Trx..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.49%)</title><rect x="562.2" y="597" width="5.8" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="565.22" y="607.5" ></text>
</g>
<g >
<title>RecID::matches(ib_lock_t const*) const (1 samples, 0.49%)</title><rect x="103.0" y="613" width="5.8" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="106.00" y="623.5" ></text>
</g>
<g >
<title>rw_lock_debug_create() (1 samples, 0.49%)</title><rect x="672.7" y="485" width="5.8" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="675.66" y="495.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::trylock(char const*, unsigned int) (1 samples, 0.49%)</title><rect x="289.0" y="517" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="292.01" y="527.5" ></text>
</g>
<g >
<title>trx_flush_log_if_needed(unsigned long, trx_t*) (2 samples, 0.99%)</title><rect x="492.5" y="757" width="11.6" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="495.46" y="767.5" ></text>
</g>
<g >
<title>sch_direct_xmit (1 samples, 0.49%)</title><rect x="318.1" y="133" width="5.8" height="15.0" fill="rgb(109,109,216)" rx="2" ry="2" />
<text  x="321.08" y="143.5" ></text>
</g>
<g >
<title>locksys::Shard_naked_latch_guard::Shard_naked_latch_guard(ut::Location, PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;&amp;) (1 samples, 0.49%)</title><rect x="440.1" y="597" width="5.9" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="443.15" y="607.5" ></text>
</g>
<g >
<title>row_upd(upd_node_t*, que_thr_t*) (7 samples, 3.45%)</title><rect x="300.6" y="677" width="40.7" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="303.64" y="687.5" >row..</text>
</g>
<g >
<title>trx_undo_page_get(page_id_t const&amp;, page_size_t const&amp;, mtr_t*) (2 samples, 0.99%)</title><rect x="672.7" y="645" width="11.6" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="675.66" y="655.5" ></text>
</g>
<g >
<title>Gtid_state::generate_automatic_gtid(THD*, int, long, int*) (1 samples, 0.49%)</title><rect x="509.9" y="821" width="5.8" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="512.90" y="831.5" ></text>
</g>
<g >
<title>std::operator|(std::memory_order, std::__memory_order_modifier) (1 samples, 0.49%)</title><rect x="289.0" y="453" width="5.8" height="15.0" fill="rgb(96,96,204)" rx="2" ry="2" />
<text  x="292.01" y="463.5" ></text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (3 samples, 1.48%)</title><rect x="684.3" y="661" width="17.4" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="687.29" y="671.5" ></text>
</g>
<g >
<title>trx_rsegf_get(unsigned int, unsigned int, page_size_t const&amp;, mtr_t*) (4 samples, 1.97%)</title><rect x="847.0" y="661" width="23.3" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="850.04" y="671.5" >t..</text>
</g>
<g >
<title>buf_page_hash_lock_held_s(buf_pool_t const*, buf_page_t const*) (1 samples, 0.49%)</title><rect x="1160.9" y="437" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="1163.94" y="447.5" ></text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (4 samples, 1.97%)</title><rect x="463.4" y="645" width="23.3" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="466.40" y="655.5" >m..</text>
</g>
<g >
<title>buf_page_make_young_if_needed(buf_page_t*) (1 samples, 0.49%)</title><rect x="969.1" y="597" width="5.8" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="972.11" y="607.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (2 samples, 0.99%)</title><rect x="974.9" y="661" width="11.7" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="977.93" y="671.5" ></text>
</g>
<g >
<title>ib_log_wr_notif (3 samples, 1.48%)</title><rect x="539.0" y="1029" width="17.4" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="541.97" y="1039.5" ></text>
</g>
<g >
<title>buf_page_release_latch(buf_block_t*, unsigned long) (1 samples, 0.49%)</title><rect x="132.1" y="581" width="5.8" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="135.07" y="591.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(unsigned long), unsigned long&gt; &gt; &gt;::_M_run() (1 samples, 0.49%)</title><rect x="515.7" y="949" width="5.8" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="518.71" y="959.5" ></text>
</g>
<g >
<title>lock_rec_other_has_expl_req(lock_mode, buf_block_t const*, bool, unsigned long, trx_t const*) (1 samples, 0.49%)</title><rect x="248.3" y="485" width="5.8" height="15.0" fill="rgb(125,125,232)" rx="2" ry="2" />
<text  x="251.33" y="495.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.49%)</title><rect x="312.3" y="581" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="315.27" y="591.5" ></text>
</g>
<g >
<title>pfs_rw_lock_x_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="672.7" y="549" width="5.8" height="15.0" fill="rgb(118,118,224)" rx="2" ry="2" />
<text  x="675.66" y="559.5" ></text>
</g>
<g >
<title>dyn_buf_t&lt;512ul&gt;::block_t::used() const (1 samples, 0.49%)</title><rect x="376.2" y="613" width="5.8" height="15.0" fill="rgb(134,134,240)" rx="2" ry="2" />
<text  x="379.21" y="623.5" ></text>
</g>
<g >
<title>Fil_shard::get_space_by_id_from_map(unsigned int) const (1 samples, 0.49%)</title><rect x="980.7" y="581" width="5.9" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="983.74" y="591.5" ></text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.49%)</title><rect x="364.6" y="629" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="367.58" y="639.5" ></text>
</g>
<g >
<title>row_ins_step(que_thr_t*) (8 samples, 3.94%)</title><rect x="207.6" y="693" width="46.5" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="210.64" y="703.5" >row_..</text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::lookup() (1 samples, 0.49%)</title><rect x="486.7" y="597" width="5.8" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="489.65" y="607.5" ></text>
</g>
<g >
<title>Double_write::write_pages(buf_flush_t) (1 samples, 0.49%)</title><rect x="573.8" y="581" width="5.9" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="576.84" y="591.5" ></text>
</g>
<g >
<title>std::thread::id::id(unsigned long) (1 samples, 0.49%)</title><rect x="632.0" y="469" width="5.8" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="634.97" y="479.5" ></text>
</g>
<g >
<title>lock_clust_rec_read_check_and_lock(lock_duration_t, buf_block_t const*, unsigned char const*, dict_index_t*, unsigned long const*, select_mode, lock_mode, unsigned long, que_thr_t*) (2 samples, 0.99%)</title><rect x="289.0" y="645" width="11.6" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="292.01" y="655.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.49%)</title><rect x="533.2" y="629" width="5.8" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="536.15" y="639.5" ></text>
</g>
<g >
<title>Lock_iter::first(hash_cell_t*, RecID const&amp;) (1 samples, 0.49%)</title><rect x="236.7" y="421" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="239.70" y="431.5" ></text>
</g>
<g >
<title>page_size_t::page_size_t(unsigned int) (1 samples, 0.49%)</title><rect x="149.5" y="597" width="5.8" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="152.51" y="607.5" ></text>
</g>
<g >
<title>std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; std::set_difference&lt;std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; &gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;) (1 samples, 0.49%)</title><rect x="254.1" y="453" width="5.9" height="15.0" fill="rgb(114,114,222)" rx="2" ry="2" />
<text  x="257.14" y="463.5" ></text>
</g>
<g >
<title>rw_lock_x_unlock_gen(rw_lock_t*, unsigned long) (1 samples, 0.49%)</title><rect x="841.2" y="533" width="5.8" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="844.23" y="543.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void (*&amp;)()&gt;::type std::__invoke&lt;void (*&amp;)()&gt;(void (*&amp;)()) (1 samples, 0.49%)</title><rect x="1184.2" y="821" width="5.8" height="15.0" fill="rgb(108,108,215)" rx="2" ry="2" />
<text  x="1187.19" y="831.5" ></text>
</g>
<g >
<title>rw_lock_validate(rw_lock_t const*) (1 samples, 0.49%)</title><rect x="323.9" y="469" width="5.8" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="326.89" y="479.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::exit() (1 samples, 0.49%)</title><rect x="236.7" y="293" width="5.8" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="239.70" y="303.5" ></text>
</g>
<g >
<title>std::array&lt;unsigned long, 8ul&gt;::operator[](unsigned long) (1 samples, 0.49%)</title><rect x="649.4" y="485" width="5.8" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="652.41" y="495.5" ></text>
</g>
<g >
<title>all (203 samples, 100%)</title><rect x="10.0" y="1045" width="1180.0" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="13.00" y="1055.5" ></text>
</g>
<g >
<title>auto buf::Block_hint::run_with_hint&lt;btr_pcur_t::restore_position(unsigned long, mtr_t*, ut::Location)::{lambda(buf_block_t*)#1}&gt;(btr_pcur_t::restore_position(unsigned long, mtr_t*, ut::Location)::{lambda(buf_block_t*)#1}&amp;&amp;) (2 samples, 0.99%)</title><rect x="405.3" y="565" width="11.6" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="408.27" y="575.5" ></text>
</g>
<g >
<title>TrxUndoRsegsIterator::set_next() (4 samples, 1.97%)</title><rect x="585.5" y="693" width="23.2" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="588.47" y="703.5" >T..</text>
</g>
<g >
<title>rw_lock_s_unlock_gen(rw_lock_t*, unsigned long) (1 samples, 0.49%)</title><rect x="725.0" y="533" width="5.8" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="727.98" y="543.5" ></text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (1 samples, 0.49%)</title><rect x="190.2" y="661" width="5.8" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="193.20" y="671.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Release_all&gt; &gt;(Iterate&lt;Release_all&gt;&amp;) const (2 samples, 0.99%)</title><rect x="725.0" y="629" width="11.6" height="15.0" fill="rgb(114,114,222)" rx="2" ry="2" />
<text  x="727.98" y="639.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Find_page&gt; &gt;(Iterate&lt;Find_page&gt;&amp;) const (1 samples, 0.49%)</title><rect x="451.8" y="613" width="5.8" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="454.77" y="623.5" ></text>
</g>
<g >
<title>Fil_shard::do_io(IORequest const&amp;, bool, page_id_t const&amp;, page_size_t const&amp;, unsigned long, unsigned long, void*, void*) (1 samples, 0.49%)</title><rect x="573.8" y="517" width="5.9" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="576.84" y="527.5" ></text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (1 samples, 0.49%)</title><rect x="597.1" y="629" width="5.8" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="600.09" y="639.5" ></text>
</g>
<g >
<title>ktime_get_with_offset (1 samples, 0.49%)</title><rect x="318.1" y="85" width="5.8" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="321.08" y="95.5" ></text>
</g>
<g >
<title>trx_rw_is_active(unsigned long, bool)::{lambda(trx_t*)#1}::operator()(trx_t*) const (1 samples, 0.49%)</title><rect x="225.1" y="437" width="5.8" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="228.07" y="447.5" ></text>
</g>
<g >
<title>AIO::pending_io_count() const (1 samples, 0.49%)</title><rect x="515.7" y="661" width="5.8" height="15.0" fill="rgb(123,123,229)" rx="2" ry="2" />
<text  x="518.71" y="671.5" ></text>
</g>
<g >
<title>rw_lock_add_debug_info(rw_lock_t*, unsigned long, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="736.6" y="517" width="5.8" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="739.60" y="527.5" ></text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::can_leave(std::bitset&lt;3ul&gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.49%)</title><rect x="155.3" y="405" width="5.8" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="158.32" y="415.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.49%)</title><rect x="666.8" y="565" width="5.9" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="669.85" y="575.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_enter() (1 samples, 0.49%)</title><rect x="446.0" y="549" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="448.96" y="559.5" ></text>
</g>
<g >
<title>auto locksys::latch_peeked_shard_and_do&lt;locksys::try_relatch_trx_and_shard_and_do&lt;locksys::try_release_all_locks(trx_t*)::{lambda()#1}&gt;(ib_lock_t const*, locksys::try_release_all_locks(trx_t*)::{lambda()#1}&amp;&amp;)::{lambda()#1}&gt;(ib_lock_t const*, locksys::try_release_all_locks(trx_t*)::{lambda()#1}&amp;&amp;) (1 samples, 0.49%)</title><rect x="440.1" y="629" width="5.9" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="443.15" y="639.5" ></text>
</g>
<g >
<title>dd::Update_dictionary_tables_ctx::~Update_dictionary_tables_ctx() (1 samples, 0.49%)</title><rect x="44.9" y="821" width="5.8" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="47.88" y="831.5" ></text>
</g>
<g >
<title>locksys::Latches::owns_page_shard(page_id_t const&amp;) const (1 samples, 0.49%)</title><rect x="248.3" y="421" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="251.33" y="431.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (2 samples, 0.99%)</title><rect x="521.5" y="965" width="11.7" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="524.53" y="975.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::is_owned() const (1 samples, 0.49%)</title><rect x="248.3" y="405" width="5.8" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="251.33" y="415.5" ></text>
</g>
<g >
<title>[unknown] (12 samples, 5.91%)</title><rect x="1021.4" y="1013" width="69.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="1024.43" y="1023.5" >[unknown]</text>
</g>
<g >
<title>void Detached_thread::operator()&lt;void (*)(log_t*), log_t*&gt;(void (*&amp;&amp;)(log_t*), log_t*&amp;&amp;) (1 samples, 0.49%)</title><rect x="533.2" y="869" width="5.8" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="536.15" y="879.5" ></text>
</g>
<g >
<title>Iterate&lt;Find_page&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (1 samples, 0.49%)</title><rect x="451.8" y="597" width="5.8" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="454.77" y="607.5" ></text>
</g>
<g >
<title>unsigned long const*&amp; std::forward&lt;unsigned long const*&amp;&gt;(std::remove_reference&lt;unsigned long const*&amp;&gt;::type&amp;) (1 samples, 0.49%)</title><rect x="556.4" y="565" width="5.8" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="559.40" y="575.5" ></text>
</g>
<g >
<title>ut::detail::allocator_base_pfs&lt;mtr_t const*&gt;::allocate_impl(unsigned long) (1 samples, 0.49%)</title><rect x="353.0" y="565" width="5.8" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="355.96" y="575.5" ></text>
</g>
<g >
<title>srv_suspend_thread(srv_slot_t*) (1 samples, 0.49%)</title><rect x="1184.2" y="773" width="5.8" height="15.0" fill="rgb(95,95,204)" rx="2" ry="2" />
<text  x="1187.19" y="783.5" ></text>
</g>
<g >
<title>release_or_close_table(THD*, TABLE*) (1 samples, 0.49%)</title><rect x="33.3" y="821" width="5.8" height="15.0" fill="rgb(97,97,206)" rx="2" ry="2" />
<text  x="36.25" y="831.5" ></text>
</g>
<g >
<title>hash_lock_s_confirm(rw_lock_t*, hash_table_t*, unsigned long) (1 samples, 0.49%)</title><rect x="637.8" y="517" width="5.8" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="640.78" y="527.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::mtr_add_page(buf_block_t*) (1 samples, 0.49%)</title><rect x="56.5" y="485" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="59.50" y="495.5" ></text>
</g>
<g >
<title>mtr_t::memo_push(void*, mtr_memo_type_t) (1 samples, 0.49%)</title><rect x="411.1" y="501" width="5.8" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="414.08" y="511.5" ></text>
</g>
<g >
<title>__x64_sys_futex (1 samples, 0.49%)</title><rect x="172.8" y="549" width="5.8" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="175.76" y="559.5" ></text>
</g>
<g >
<title>row_purge_step(que_thr_t*) (2 samples, 0.99%)</title><rect x="1079.6" y="709" width="11.6" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="1082.56" y="719.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (1 samples, 0.49%)</title><rect x="329.7" y="549" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="332.70" y="559.5" ></text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (2 samples, 0.99%)</title><rect x="608.7" y="645" width="11.6" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="611.72" y="655.5" ></text>
</g>
<g >
<title>srv_worker_thread() (14 samples, 6.90%)</title><rect x="1097.0" y="789" width="81.4" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="1100.00" y="799.5" >srv_worke..</text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::lookup() (2 samples, 0.99%)</title><rect x="957.5" y="581" width="11.6" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="960.49" y="591.5" ></text>
</g>
<g >
<title>row_purge_del_mark(purge_node_t*) (1 samples, 0.49%)</title><rect x="1085.4" y="645" width="5.8" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="1088.37" y="655.5" ></text>
</g>
<g >
<title>rw_lock_x_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="672.7" y="533" width="5.8" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="675.66" y="543.5" ></text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (5 samples, 2.46%)</title><rect x="655.2" y="661" width="29.1" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="658.22" y="671.5" >tr..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;TABLE_SHARE, Table_share_deleter&gt; &gt;, Malloc_allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;TABLE_SHARE, Table_share_deleter&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.49%)</title><rect x="428.5" y="837" width="5.8" height="15.0" fill="rgb(110,110,218)" rx="2" ry="2" />
<text  x="431.52" y="847.5" ></text>
</g>
<g >
<title>trx_undo_page_get(page_id_t const&amp;, page_size_t const&amp;, mtr_t*) (1 samples, 0.49%)</title><rect x="614.5" y="629" width="5.8" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="617.53" y="639.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void (*())()&gt;::__call&lt;void&gt;(std::tuple&lt;&gt;&amp;&amp;, std::_Index_tuple&lt;&gt;) (12 samples, 5.91%)</title><rect x="1021.4" y="837" width="69.8" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="1024.43" y="847.5" >void st..</text>
</g>
<g >
<title>lock_trx_release_locks(trx_t*) (2 samples, 0.99%)</title><rect x="440.1" y="677" width="11.7" height="15.0" fill="rgb(131,131,237)" rx="2" ry="2" />
<text  x="443.15" y="687.5" ></text>
</g>
<g >
<title>buf_page_hash_lock_held_s_or_x(buf_pool_t const*, buf_page_t const*) (1 samples, 0.49%)</title><rect x="748.2" y="549" width="5.8" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="751.23" y="559.5" ></text>
</g>
<g >
<title>ut::hash_uint64_pair(unsigned long, unsigned long) (1 samples, 0.49%)</title><rect x="184.4" y="549" width="5.8" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="187.38" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;TABLE_SHARE, Table_share_deleter&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned long, std::__detail::_Hash_node_value&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;TABLE_SHARE, Table_share_deleter&gt; &gt;, true&gt; const&amp;) const (1 samples, 0.49%)</title><rect x="428.5" y="789" width="5.8" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="431.52" y="799.5" ></text>
</g>
<g >
<title>rw_lock_x_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="143.7" y="533" width="5.8" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="146.69" y="543.5" ></text>
</g>
<g >
<title>dd::cache::Object_registry::erase_all() (1 samples, 0.49%)</title><rect x="39.1" y="853" width="5.8" height="15.0" fill="rgb(131,131,237)" rx="2" ry="2" />
<text  x="42.06" y="863.5" ></text>
</g>
<g >
<title>Find_page::get_block() const (1 samples, 0.49%)</title><rect x="387.8" y="661" width="5.8" height="15.0" fill="rgb(130,130,235)" rx="2" ry="2" />
<text  x="390.83" y="671.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, Detached_thread, void (*)(log_t*), log_t*&gt;(std::__invoke_other, Detached_thread&amp;&amp;, void (*&amp;&amp;)(log_t*), log_t*&amp;&amp;) (1 samples, 0.49%)</title><rect x="533.2" y="885" width="5.8" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="536.15" y="895.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.49%)</title><rect x="323.9" y="501" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="326.89" y="511.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (73 samples, 35.96%)</title><rect x="579.7" y="965" width="424.3" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="582.66" y="975.5" >execute_native_thread_routine</text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;mtr_t const*, false&gt;* std::__detail::_AllocNode&lt;ut::allocator&lt;std::__detail::_Hash_node&lt;mtr_t const*, false&gt;, ut::detail::allocator_base_pfs&lt;mtr_t const*&gt; &gt; &gt;::operator()&lt;mtr_t const*&gt;(mtr_t const*&amp;&amp;) const (1 samples, 0.49%)</title><rect x="353.0" y="629" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="355.96" y="639.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (3 samples, 1.48%)</title><rect x="957.5" y="613" width="17.4" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="960.49" y="623.5" ></text>
</g>
<g >
<title>mtr_t::Command::release_all() (1 samples, 0.49%)</title><rect x="132.1" y="661" width="5.8" height="15.0" fill="rgb(134,134,240)" rx="2" ry="2" />
<text  x="135.07" y="671.5" ></text>
</g>
<g >
<title>vfs_write (1 samples, 0.49%)</title><rect x="562.2" y="549" width="5.8" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="565.22" y="559.5" ></text>
</g>
<g >
<title>sel_set_rec_lock(btr_pcur_t*, unsigned char const*, dict_index_t*, unsigned long const*, select_mode, unsigned long, unsigned long, que_thr_t*, mtr_t*) (1 samples, 0.49%)</title><rect x="103.0" y="709" width="5.8" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="106.00" y="719.5" ></text>
</g>
<g >
<title>Sharded_rw_lock::x_own() const (1 samples, 0.49%)</title><rect x="289.0" y="565" width="5.8" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="292.01" y="575.5" ></text>
</g>
<g >
<title>Find_page::get_slot() const (1 samples, 0.49%)</title><rect x="387.8" y="645" width="5.8" height="15.0" fill="rgb(96,96,204)" rx="2" ry="2" />
<text  x="390.83" y="655.5" ></text>
</g>
<g >
<title>Buf_fetch_other::get(buf_block_t*&amp;) (1 samples, 0.49%)</title><rect x="748.2" y="597" width="5.8" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="751.23" y="607.5" ></text>
</g>
<g >
<title>mtr_t::memo_contains(dyn_buf_t&lt;512ul&gt; const*, void const*, unsigned long) (1 samples, 0.49%)</title><rect x="719.2" y="597" width="5.8" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="722.16" y="607.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.49%)</title><rect x="707.5" y="645" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="710.54" y="655.5" ></text>
</g>
<g >
<title>ib_io_wr-2 (1 samples, 0.49%)</title><rect x="515.7" y="1029" width="5.8" height="15.0" fill="rgb(86,86,196)" rx="2" ry="2" />
<text  x="518.71" y="1039.5" ></text>
</g>
<g >
<title>dd::Weak_object_impl_&lt;true&gt;::store(dd::Open_dictionary_tables_ctx*) (10 samples, 4.93%)</title><rect x="50.7" y="821" width="58.1" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="53.69" y="831.5" >dd::We..</text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Release_all&gt; &gt;(Iterate&lt;Release_all&gt;&amp;) const (1 samples, 0.49%)</title><rect x="841.2" y="629" width="5.8" height="15.0" fill="rgb(114,114,222)" rx="2" ry="2" />
<text  x="844.23" y="639.5" ></text>
</g>
<g >
<title>yyparse() (1 samples, 0.49%)</title><rect x="108.8" y="741" width="5.8" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="111.82" y="751.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void (*(log_t*))(log_t*)&gt;::__call&lt;void, , 0ul&gt;(std::tuple&lt;&gt;&amp;&amp;, std::_Index_tuple&lt;0ul&gt;) (1 samples, 0.49%)</title><rect x="533.2" y="837" width="5.8" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="536.15" y="847.5" ></text>
</g>
<g >
<title>dd::info_schema::update_table_stats(THD*, Table_ref*) (11 samples, 5.42%)</title><rect x="44.9" y="869" width="63.9" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="47.88" y="879.5" >dd::inf..</text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::mtr_add_page(buf_block_t*) (1 samples, 0.49%)</title><rect x="974.9" y="629" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="977.93" y="639.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::lookup() (1 samples, 0.49%)</title><rect x="649.4" y="565" width="5.8" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="652.41" y="575.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::commit(THD*, bool) (12 samples, 5.91%)</title><rect x="434.3" y="837" width="69.8" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="437.33" y="847.5" >MYSQL_B..</text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.49%)</title><rect x="143.7" y="597" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="146.69" y="607.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt; &gt;::~_State_impl() (2 samples, 0.99%)</title><rect x="556.4" y="997" width="11.6" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="559.40" y="1007.5" ></text>
</g>
<g >
<title>mtr_t::Command::prepare_write() (1 samples, 0.49%)</title><rect x="91.4" y="629" width="5.8" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="94.38" y="639.5" ></text>
</g>
<g >
<title>mlog_write_ulint(unsigned char*, unsigned long, mlog_id_t, mtr_t*) (1 samples, 0.49%)</title><rect x="719.2" y="645" width="5.8" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="722.16" y="655.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.49%)</title><rect x="690.1" y="549" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="693.10" y="559.5" ></text>
</g>
<g >
<title>mtr_t::commit() (1 samples, 0.49%)</title><rect x="399.5" y="597" width="5.8" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="402.46" y="607.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned (1 samples, 0.49%)</title><rect x="341.3" y="757" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="344.33" y="767.5" ></text>
</g>
<g >
<title>trx_commit(trx_t*) (4 samples, 1.97%)</title><rect x="172.8" y="757" width="23.2" height="15.0" fill="rgb(107,107,215)" rx="2" ry="2" />
<text  x="175.76" y="767.5" >t..</text>
</g>
<g >
<title>rw_lock_debug_mutex_exit() (1 samples, 0.49%)</title><rect x="695.9" y="501" width="5.8" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="698.91" y="511.5" ></text>
</g>
<g >
<title>__x64_sys_fsync (1 samples, 0.49%)</title><rect x="533.2" y="613" width="5.8" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="536.15" y="623.5" ></text>
</g>
<g >
<title>dd::cache::Local_multi_map&lt;dd::Spatial_reference_system&gt;* dd::cache::Object_registry::create_map_if_needed&lt;dd::cache::Local_multi_map&lt;dd::Spatial_reference_system&gt; &gt;(std::unique_ptr&lt;dd::cache::Local_multi_map&lt;dd::Spatial_reference_system&gt;, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Spatial_reference_system&gt; &gt; &gt;*) (1 samples, 0.49%)</title><rect x="393.6" y="677" width="5.9" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="396.65" y="687.5" ></text>
</g>
<g >
<title>row_update_for_mysql_using_upd_graph(unsigned char const*, row_prebuilt_t*) (8 samples, 3.94%)</title><rect x="50.7" y="741" width="46.5" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="53.69" y="751.5" >row_..</text>
</g>
<g >
<title>[unknown] (2 samples, 0.99%)</title><rect x="568.0" y="1013" width="11.7" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="571.03" y="1023.5" ></text>
</g>
<g >
<title>locksys::rec_queue_validate_latched(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*)::{lambda(trx_t const*)#2}::operator()(trx_t const*) const (2 samples, 0.99%)</title><rect x="236.7" y="469" width="11.6" height="15.0" fill="rgb(83,83,192)" rx="2" ry="2" />
<text  x="239.70" y="479.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (12 samples, 5.91%)</title><rect x="1021.4" y="965" width="69.8" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="1024.43" y="975.5" >execute..</text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::trylock(char const*, unsigned int) (1 samples, 0.49%)</title><rect x="230.9" y="373" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="233.89" y="383.5" ></text>
</g>
<g >
<title>row_upd_del_mark_clust_rec(unsigned long, upd_node_t*, dict_index_t*, unsigned long*, que_thr_t*, bool, mtr_t*) (5 samples, 2.46%)</title><rect x="143.7" y="661" width="29.1" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="146.69" y="671.5" >ro..</text>
</g>
<g >
<title>pvclock_clocksource_read (1 samples, 0.49%)</title><rect x="318.1" y="53" width="5.8" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="321.08" y="63.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, Detached_thread, void (*)()&gt;(std::__invoke_other, Detached_thread&amp;&amp;, void (*&amp;&amp;)()) (12 samples, 5.91%)</title><rect x="1021.4" y="885" width="69.8" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="1024.43" y="895.5" >void st..</text>
</g>
<g >
<title>trx_rsegf_get_nth_undo(unsigned char*, unsigned long, mtr_t*) (15 samples, 7.39%)</title><rect x="870.3" y="661" width="87.2" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="873.30" y="671.5" >trx_rsegf_..</text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::assert_latches_let_distinguish(std::bitset&lt;3ul&gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.49%)</title><rect x="155.3" y="421" width="5.8" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="158.32" y="431.5" ></text>
</g>
<g >
<title>buf_flush_try_neighbors(page_id_t const&amp;, buf_flush_t, unsigned long, unsigned long) (2 samples, 0.99%)</title><rect x="568.0" y="693" width="11.7" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="571.03" y="703.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_enter() (1 samples, 0.49%)</title><rect x="725.0" y="485" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="727.98" y="495.5" ></text>
</g>
<g >
<title>validate_rec_offset(dict_index_t const*, unsigned long const*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="300.6" y="581" width="5.9" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="303.64" y="591.5" ></text>
</g>
<g >
<title>ut::detail::allocator_base_pfs&lt;std::pair&lt;char const* const, dict_index_t*&gt; &gt;::allocate_impl(unsigned long) (1 samples, 0.49%)</title><rect x="347.1" y="693" width="5.9" height="15.0" fill="rgb(85,85,195)" rx="2" ry="2" />
<text  x="350.14" y="703.5" ></text>
</g>
<g >
<title>fseg_n_reserved_pages_low(unsigned int, page_size_t const&amp;, unsigned char*, unsigned long*, mtr_t*) (1 samples, 0.49%)</title><rect x="387.8" y="725" width="5.8" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="390.83" y="735.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::exit() (1 samples, 0.49%)</title><rect x="823.8" y="501" width="5.8" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="826.79" y="511.5" ></text>
</g>
<g >
<title>mtr_t::memo_modify_page(unsigned char const*) (1 samples, 0.49%)</title><rect x="719.2" y="613" width="5.8" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="722.16" y="623.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_exit() (1 samples, 0.49%)</title><rect x="841.2" y="469" width="5.8" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="844.23" y="479.5" ></text>
</g>
<g >
<title>Release_all::operator()(mtr_memo_slot_t*) const (1 samples, 0.49%)</title><rect x="132.1" y="613" width="5.8" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="135.07" y="623.5" ></text>
</g>
<g >
<title>sel_set_rec_lock(btr_pcur_t*, unsigned char const*, dict_index_t*, unsigned long const*, select_mode, unsigned long, unsigned long, que_thr_t*, mtr_t*) (1 samples, 0.49%)</title><rect x="137.9" y="677" width="5.8" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="140.88" y="687.5" ></text>
</g>
<g >
<title>auto ut::Seq_lock&lt;ut::mt_fast_modulo_t::data_t&gt;::read&lt;ut::mt_fast_modulo_t::load()::{lambda(ut::mt_fast_modulo_t::data_t const&amp;)#1}&gt;(ut::mt_fast_modulo_t::load()::{lambda(ut::mt_fast_modulo_t::data_t const&amp;)#1}&amp;&amp;) const (1 samples, 0.49%)</title><rect x="242.5" y="341" width="5.8" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="245.51" y="351.5" ></text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (3 samples, 1.48%)</title><rect x="353.0" y="709" width="17.4" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="355.96" y="719.5" ></text>
</g>
<g >
<title>open_and_lock_tables(THD*, Table_ref*, unsigned int) (6 samples, 2.96%)</title><rect x="393.6" y="869" width="34.9" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="396.65" y="879.5" >op..</text>
</g>
<g >
<title>validate_rec_offset(dict_index_t const*, unsigned long const*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="207.6" y="517" width="5.8" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="210.64" y="527.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::trylock(char const*, unsigned int) (1 samples, 0.49%)</title><rect x="864.5" y="501" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="867.48" y="511.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.49%)</title><rect x="166.9" y="533" width="5.9" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="169.95" y="543.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::exit() (1 samples, 0.49%)</title><rect x="573.8" y="421" width="5.9" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="576.84" y="431.5" ></text>
</g>
<g >
<title>void* ut::detail::Alloc_pfs::alloc&lt;false&gt;(unsigned long, unsigned int) (1 samples, 0.49%)</title><rect x="736.6" y="453" width="5.8" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="739.60" y="463.5" ></text>
</g>
<g >
<title>pfs_os_file_write_func(IORequest&amp;, char const*, pfs_os_file_t, void const*, unsigned long, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="562.2" y="693" width="5.8" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="565.22" y="703.5" ></text>
</g>
<g >
<title>trx_write_serialisation_history(trx_t*, mtr_t*) (7 samples, 3.45%)</title><rect x="451.8" y="709" width="40.7" height="15.0" fill="rgb(107,107,214)" rx="2" ry="2" />
<text  x="454.77" y="719.5" >trx..</text>
</g>
<g >
<title>locksys::Shard_latch_guard::Shard_latch_guard(ut::Location, page_id_t const&amp;) (1 samples, 0.49%)</title><rect x="126.3" y="517" width="5.8" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="129.26" y="527.5" ></text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (3 samples, 1.48%)</title><rect x="823.8" y="597" width="17.4" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="826.79" y="607.5" ></text>
</g>
<g >
<title>btr_cur_update_in_place(unsigned long, btr_cur_t*, unsigned long*, upd_t const*, unsigned long, que_thr_t*, unsigned long, mtr_t*) (5 samples, 2.46%)</title><rect x="56.5" y="645" width="29.1" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="59.50" y="655.5" >bt..</text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.49%)</title><rect x="79.8" y="501" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="82.75" y="511.5" ></text>
</g>
<g >
<title>row_ins_index_entry(dict_index_t*, dtuple_t*, unsigned int&amp;, que_thr_t*) (8 samples, 3.94%)</title><rect x="207.6" y="645" width="46.5" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="210.64" y="655.5" >row_..</text>
</g>
<g >
<title>ut::hash_uint64(unsigned long) (1 samples, 0.49%)</title><rect x="184.4" y="533" width="5.8" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="187.38" y="543.5" ></text>
</g>
<g >
<title>row_sel(sel_node_t*, que_thr_t*) (2 samples, 0.99%)</title><rect x="132.1" y="693" width="11.6" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="135.07" y="703.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void (*&amp;)()&gt;(std::__invoke_other, void (*&amp;)()) (14 samples, 6.90%)</title><rect x="1097.0" y="805" width="81.4" height="15.0" fill="rgb(131,131,236)" rx="2" ry="2" />
<text  x="1100.00" y="815.5" >void std:..</text>
</g>
<g >
<title>ut::hash_uint64(unsigned long) (1 samples, 0.49%)</title><rect x="649.4" y="501" width="5.8" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="652.41" y="511.5" ></text>
</g>
<g >
<title>dict_table_close(dict_table_t*, bool, bool) (1 samples, 0.49%)</title><rect x="1079.6" y="629" width="5.8" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="1082.56" y="639.5" ></text>
</g>
<g >
<title>LatchDebug::instance() (1 samples, 0.49%)</title><rect x="957.5" y="469" width="5.8" height="15.0" fill="rgb(81,81,191)" rx="2" ry="2" />
<text  x="960.49" y="479.5" ></text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::release(TTASEventMutex&lt;GenericPolicy&gt; const&amp;) (1 samples, 0.49%)</title><rect x="277.4" y="485" width="5.8" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="280.39" y="495.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.99%)</title><rect x="556.4" y="1013" width="11.6" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="559.40" y="1023.5" ></text>
</g>
<g >
<title>Log_file_handle::write(unsigned long, unsigned long, unsigned char const*) (1 samples, 0.49%)</title><rect x="562.2" y="709" width="5.8" height="15.0" fill="rgb(111,111,219)" rx="2" ry="2" />
<text  x="565.22" y="719.5" ></text>
</g>
<g >
<title>log_free_check(log_t&amp;) (1 samples, 0.49%)</title><rect x="201.8" y="693" width="5.8" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="204.82" y="703.5" ></text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::assert_latches_let_distinguish(std::bitset&lt;3ul&gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.49%)</title><rect x="254.1" y="517" width="5.9" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="257.14" y="527.5" ></text>
</g>
<g >
<title>void std::vector&lt;latch_level_t, ut::allocator&lt;latch_level_t, ut::detail::allocator_base_pfs&lt;latch_level_t&gt; &gt; &gt;::_M_range_initialize&lt;latch_level_t const*&gt;(latch_level_t const*, latch_level_t const*, std::forward_iterator_tag) (1 samples, 0.49%)</title><rect x="114.6" y="645" width="5.8" height="15.0" fill="rgb(81,81,191)" rx="2" ry="2" />
<text  x="117.63" y="655.5" ></text>
</g>
<g >
<title>ha_innobase::index_read(unsigned char*, unsigned char const*, unsigned int, ha_rkey_function) (2 samples, 0.99%)</title><rect x="97.2" y="741" width="11.6" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="100.19" y="751.5" ></text>
</g>
<g >
<title>buf_page_hash_get_low(buf_pool_t*, page_id_t const&amp;) (1 samples, 0.49%)</title><rect x="184.4" y="581" width="5.8" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="187.38" y="591.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::is_owned() const (1 samples, 0.49%)</title><rect x="707.5" y="565" width="5.8" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="710.54" y="575.5" ></text>
</g>
<g >
<title>sock_sendmsg (1 samples, 0.49%)</title><rect x="15.8" y="885" width="5.8" height="15.0" fill="rgb(135,135,241)" rx="2" ry="2" />
<text  x="18.81" y="895.5" ></text>
</g>
<g >
<title>void Detached_thread::operator()&lt;void (*)(log_t*), log_t*&gt;(void (*&amp;&amp;)(log_t*), log_t*&amp;&amp;) (3 samples, 1.48%)</title><rect x="539.0" y="869" width="17.4" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="541.97" y="879.5" ></text>
</g>
<g >
<title>row_prebuilt_free(row_prebuilt_t*, bool) (1 samples, 0.49%)</title><rect x="33.3" y="741" width="5.8" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="36.25" y="751.5" ></text>
</g>
<g >
<title>__strchr_avx2 (1 samples, 0.49%)</title><rect x="44.9" y="741" width="5.8" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="47.88" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;mtr_t const*, false&gt;* std::__detail::_Hashtable_alloc&lt;ut::allocator&lt;std::__detail::_Hash_node&lt;mtr_t const*, false&gt;, ut::detail::allocator_base_pfs&lt;mtr_t const*&gt; &gt; &gt;::_M_allocate_node&lt;mtr_t const*&gt;(mtr_t const*&amp;&amp;) (1 samples, 0.49%)</title><rect x="353.0" y="613" width="5.8" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="355.96" y="623.5" ></text>
</g>
<g >
<title>os_aio_validate() (1 samples, 0.49%)</title><rect x="515.7" y="693" width="5.8" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="518.71" y="703.5" ></text>
</g>
<g >
<title>trx_flush_log_if_needed_low(unsigned long) (1 samples, 0.49%)</title><rect x="172.8" y="693" width="5.8" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="175.76" y="703.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::lookup() (1 samples, 0.49%)</title><rect x="1160.9" y="485" width="5.8" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="1163.94" y="495.5" ></text>
</g>
<g >
<title>Find_page::operator()(mtr_memo_slot_t*) (1 samples, 0.49%)</title><rect x="626.2" y="549" width="5.8" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="629.16" y="559.5" ></text>
</g>
<g >
<title>tcp_sendmsg_locked (1 samples, 0.49%)</title><rect x="15.8" y="853" width="5.8" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="18.81" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Insert&lt;mtr_t const*, mtr_t const*, ut::allocator&lt;mtr_t const*, ut::detail::allocator_base_pfs&lt;mtr_t const*&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;mtr_t const*&gt;, std::hash&lt;mtr_t const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt;, true&gt;::insert(mtr_t const*&amp;&amp;) (1 samples, 0.49%)</title><rect x="353.0" y="661" width="5.8" height="15.0" fill="rgb(87,87,197)" rx="2" ry="2" />
<text  x="355.96" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;buf_io_fix&gt; std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_M_insert_unique_&lt;buf_io_fix const&amp;, std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_Alloc_node&gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, buf_io_fix const&amp;, std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_Alloc_node&amp;) (1 samples, 0.49%)</title><rect x="254.1" y="373" width="5.9" height="15.0" fill="rgb(95,95,204)" rx="2" ry="2" />
<text  x="257.14" y="383.5" ></text>
</g>
<g >
<title>row_sel(sel_node_t*, que_thr_t*) (4 samples, 1.97%)</title><rect x="399.5" y="613" width="23.2" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="402.46" y="623.5" >r..</text>
</g>
<g >
<title>void std::_Bind&lt;void (*(log_t*))(log_t*)&gt;::__call&lt;void, , 0ul&gt;(std::tuple&lt;&gt;&amp;&amp;, std::_Index_tuple&lt;0ul&gt;) (2 samples, 0.99%)</title><rect x="556.4" y="837" width="11.6" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="559.40" y="847.5" ></text>
</g>
<g >
<title>lock_trx_has_rec_x_lock(que_thr_t*, dict_table_t const*, buf_block_t const*, unsigned long) (1 samples, 0.49%)</title><rect x="306.5" y="645" width="5.8" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="309.45" y="655.5" ></text>
</g>
<g >
<title>trx_undo_report_row_operation(unsigned long, unsigned long, que_thr_t*, dict_index_t*, dtuple_t const*, upd_t const*, unsigned long, unsigned char const*, unsigned long const*, unsigned long*) (4 samples, 1.97%)</title><rect x="312.3" y="613" width="23.2" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="315.27" y="623.5" >t..</text>
</g>
<g >
<title>Fil_shard::mutex_release() const (1 samples, 0.49%)</title><rect x="573.8" y="437" width="5.9" height="15.0" fill="rgb(131,131,236)" rx="2" ry="2" />
<text  x="576.84" y="447.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::assign_automatic_gtids_to_flush_group(THD*) (1 samples, 0.49%)</title><rect x="509.9" y="837" width="5.8" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="512.90" y="847.5" ></text>
</g>
<g >
<title>__pwrite64 (1 samples, 0.49%)</title><rect x="562.2" y="613" width="5.8" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="565.22" y="623.5" ></text>
</g>
<g >
<title>row_ins_clust_index_entry(dict_index_t*, dtuple_t*, que_thr_t*, bool) (8 samples, 3.94%)</title><rect x="207.6" y="629" width="46.5" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="210.64" y="639.5" >row_..</text>
</g>
<g >
<title>latch_level_t const&amp; std::forward&lt;latch_level_t const&amp;&gt;(std::remove_reference&lt;latch_level_t const&amp;&gt;::type&amp;) (1 samples, 0.49%)</title><rect x="114.6" y="597" width="5.8" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="117.63" y="607.5" ></text>
</g>
<g >
<title>cmp_dtuple_rec_with_match_bytes(dtuple_t const*, unsigned char const*, dict_index_t const*, unsigned long const*, unsigned long*, unsigned long*) (2 samples, 0.99%)</title><rect x="207.6" y="549" width="11.7" height="15.0" fill="rgb(102,102,211)" rx="2" ry="2" />
<text  x="210.64" y="559.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;Detached_thread, void (*)()&gt;::type std::__invoke&lt;Detached_thread, void (*)()&gt;(Detached_thread&amp;&amp;, void (*&amp;&amp;)()) (12 samples, 5.91%)</title><rect x="1021.4" y="901" width="69.8" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="1024.43" y="911.5" >std::__..</text>
</g>
<g >
<title>std::atomic&lt;PFS_memory_class*&gt;::operator PFS_memory_class*() const (1 samples, 0.49%)</title><rect x="829.6" y="437" width="5.8" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="832.61" y="447.5" ></text>
</g>
<g >
<title>ib_lock_t const* Lock_iter::for_each&lt;lock_rec_other_has_expl_req(lock_mode, buf_block_t const*, bool, unsigned long, trx_t const*)::{lambda(ib_lock_t const*)#1}&gt;(RecID const&amp;, lock_rec_other_has_expl_req(lock_mode, buf_block_t const*, bool, unsigned long, trx_t const*)::{lambda(ib_lock_t const*)#1}&amp;&amp;, hash_table_t*) (1 samples, 0.49%)</title><rect x="236.7" y="437" width="5.8" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="239.70" y="447.5" ></text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::locked(TTASEventMutex&lt;GenericPolicy&gt; const&amp;, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="225.1" y="373" width="5.8" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="228.07" y="383.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Find_page&gt; &gt;(Iterate&lt;Find_page&gt;&amp;) const (1 samples, 0.49%)</title><rect x="690.1" y="597" width="5.8" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="693.10" y="607.5" ></text>
</g>
<g >
<title>ib_srv_purge (76 samples, 37.44%)</title><rect x="579.7" y="1029" width="441.7" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="582.66" y="1039.5" >ib_srv_purge</text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (1 samples, 0.49%)</title><rect x="649.4" y="629" width="5.8" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="652.41" y="639.5" ></text>
</g>
<g >
<title>trx_rseg_t::latch() (20 samples, 9.85%)</title><rect x="725.0" y="693" width="116.2" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="727.98" y="703.5" >trx_rseg_t::la..</text>
</g>
<g >
<title>std::__invoke_result&lt;Detached_thread, void (*)()&gt;::type std::__invoke&lt;Detached_thread, void (*)()&gt;(Detached_thread&amp;&amp;, void (*&amp;&amp;)()) (2 samples, 0.99%)</title><rect x="568.0" y="901" width="11.7" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="571.03" y="911.5" ></text>
</g>
<g >
<title>void hardware::Loop&lt;3ul&gt;::run&lt;hardware::Update_step_executor&lt;hardware::use_pclmul, 5440ul&gt;, unsigned long (&amp;) [3], unsigned long const*&amp;&gt;(unsigned long (&amp;) [3], unsigned long const*&amp;) (1 samples, 0.49%)</title><rect x="568.0" y="549" width="5.8" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="571.03" y="559.5" ></text>
</g>
<g >
<title>std::atomic&lt;std::thread::id&gt;::load(std::memory_order) const (1 samples, 0.49%)</title><rect x="248.3" y="357" width="5.8" height="15.0" fill="rgb(95,95,203)" rx="2" ry="2" />
<text  x="251.33" y="367.5" ></text>
</g>
<g >
<title>locksys::rec_queue_latch_and_validate(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*) (1 samples, 0.49%)</title><rect x="103.0" y="677" width="5.8" height="15.0" fill="rgb(86,86,196)" rx="2" ry="2" />
<text  x="106.00" y="687.5" ></text>
</g>
<g >
<title>trx_rseg_t::latch() (1 samples, 0.49%)</title><rect x="56.5" y="581" width="5.8" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="59.50" y="591.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void (*())()&gt;::__call&lt;void&gt;(std::tuple&lt;&gt;&amp;&amp;, std::_Index_tuple&lt;&gt;) (73 samples, 35.96%)</title><rect x="579.7" y="837" width="424.3" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="582.66" y="847.5" >void std::_Bind&lt;void (*())()&gt;::__call&lt;void&gt;(std::tuple&lt;&gt;&amp;..</text>
</g>
<g >
<title>ut::allocator&lt;std::__detail::_Hash_node&lt;mtr_t const*, false&gt;, ut::detail::allocator_base_pfs&lt;mtr_t const*&gt; &gt;::allocate(unsigned long, std::__detail::_Hash_node&lt;mtr_t const*, false&gt; const*) (1 samples, 0.49%)</title><rect x="353.0" y="581" width="5.8" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="355.96" y="591.5" ></text>
</g>
<g >
<title>lock_rec_lock(bool, select_mode, unsigned long, buf_block_t const*, unsigned long, dict_index_t*, que_thr_t*) (1 samples, 0.49%)</title><rect x="120.4" y="533" width="5.9" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="123.44" y="543.5" ></text>
</g>
<g >
<title>std::operator==(std::thread::id, std::thread::id) (1 samples, 0.49%)</title><rect x="864.5" y="453" width="5.8" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="867.48" y="463.5" ></text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::is_transition_possible(std::bitset&lt;3ul&gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.49%)</title><rect x="155.3" y="389" width="5.8" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="158.32" y="399.5" ></text>
</g>
<g >
<title>__copy_skb_header (1 samples, 0.49%)</title><rect x="15.8" y="773" width="5.8" height="15.0" fill="rgb(134,134,240)" rx="2" ry="2" />
<text  x="18.81" y="783.5" ></text>
</g>
<g >
<title>hash_lock_s_confirm(rw_lock_t*, hash_table_t*, unsigned long) (1 samples, 0.49%)</title><rect x="79.8" y="437" width="5.8" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="82.75" y="447.5" ></text>
</g>
<g >
<title>dyn_buf_t&lt;512ul&gt;::has_space(unsigned long) (1 samples, 0.49%)</title><rect x="411.1" y="485" width="5.8" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="414.08" y="495.5" ></text>
</g>
<g >
<title>trx_undo_report_row_operation(unsigned long, unsigned long, que_thr_t*, dict_index_t*, dtuple_t const*, upd_t const*, unsigned long, unsigned char const*, unsigned long const*, unsigned long*) (5 samples, 2.46%)</title><rect x="143.7" y="629" width="29.1" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="146.69" y="639.5" >tr..</text>
</g>
<g >
<title>std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;::operator=(buf_io_fix const&amp;) (1 samples, 0.49%)</title><rect x="254.1" y="421" width="5.9" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="257.14" y="431.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.49%)</title><rect x="486.7" y="629" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="489.65" y="639.5" ></text>
</g>
<g >
<title>ut_list_base&lt;dyn_buf_t&lt;512ul&gt;::block_t, ut_list_base_explicit_getter&lt;dyn_buf_t&lt;512ul&gt;::block_t, &amp;dyn_buf_t&lt;512ul&gt;::block_t::m_node&gt; &gt;::base_iterator&lt;dyn_buf_t&lt;512ul&gt;::block_t const&gt;::operator++() (1 samples, 0.49%)</title><rect x="1166.7" y="501" width="5.9" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="1169.75" y="511.5" ></text>
</g>
<g >
<title>rw_lock_x_lock_low(rw_lock_t*, unsigned long, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="672.7" y="517" width="5.8" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="675.66" y="527.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.49%)</title><rect x="15.8" y="965" width="5.8" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="18.81" y="975.5" ></text>
</g>
<g >
<title>bool dd::cache::Dictionary_client::store&lt;dd::Table_stat&gt;(dd::Table_stat*) (11 samples, 5.42%)</title><rect x="44.9" y="853" width="63.9" height="15.0" fill="rgb(123,123,229)" rx="2" ry="2" />
<text  x="47.88" y="863.5" >bool dd..</text>
</g>
<g >
<title>rec_offs_nth_default(dict_index_t const*, unsigned long const*, unsigned long) (1 samples, 0.49%)</title><rect x="207.6" y="533" width="5.8" height="15.0" fill="rgb(130,130,235)" rx="2" ry="2" />
<text  x="210.64" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.49%)</title><rect x="550.6" y="709" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="553.59" y="719.5" ></text>
</g>
<g >
<title>ib_lock_t const* Lock_iter::for_each&lt;locksys::rec_queue_validate_latched(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*)::{lambda(ib_lock_t*)#3}&gt;(RecID const&amp;, locksys::rec_queue_validate_latched(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*)::{lambda(ib_lock_t*)#3}&amp;&amp;, hash_table_t*) (1 samples, 0.49%)</title><rect x="103.0" y="645" width="5.8" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="106.00" y="655.5" ></text>
</g>
<g >
<title>Release_all::operator()(mtr_memo_slot_t*) const (1 samples, 0.49%)</title><rect x="841.2" y="597" width="5.8" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="844.23" y="607.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.49%)</title><rect x="1097.0" y="757" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="1100.00" y="767.5" ></text>
</g>
<g >
<title>ut_delay(unsigned long) (10 samples, 4.93%)</title><rect x="1021.4" y="677" width="58.2" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="1024.43" y="687.5" >ut_del..</text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.49%)</title><rect x="771.5" y="581" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="774.48" y="591.5" ></text>
</g>
<g >
<title>trx_undo_page_get(page_id_t const&amp;, page_size_t const&amp;, mtr_t*) (1 samples, 0.49%)</title><rect x="364.6" y="693" width="5.8" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="367.58" y="703.5" ></text>
</g>
<g >
<title>locksys::rec_queue_validate_latched(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*)::{lambda(ib_lock_t*)#3}::operator()(ib_lock_t*) const (1 samples, 0.49%)</title><rect x="248.3" y="501" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="251.33" y="511.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_enter() (1 samples, 0.49%)</title><rect x="230.9" y="389" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="233.89" y="399.5" ></text>
</g>
<g >
<title>Iterate&lt;Find_page&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (1 samples, 0.49%)</title><rect x="376.2" y="629" width="5.8" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="379.21" y="639.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt; &gt;::~_State_impl() (1 samples, 0.49%)</title><rect x="1184.2" y="997" width="5.8" height="15.0" fill="rgb(81,81,190)" rx="2" ry="2" />
<text  x="1187.19" y="1007.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (1 samples, 0.49%)</title><rect x="318.1" y="421" width="5.8" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="321.08" y="431.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void (*&amp;)(log_t*), log_t*&amp;&gt;(std::__invoke_other, void (*&amp;)(log_t*), log_t*&amp;) (3 samples, 1.48%)</title><rect x="539.0" y="805" width="17.4" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="541.97" y="815.5" ></text>
</g>
<g >
<title>trx_undo_report_row_operation(unsigned long, unsigned long, que_thr_t*, dict_index_t*, dtuple_t const*, upd_t const*, unsigned long, unsigned char const*, unsigned long const*, unsigned long*) (5 samples, 2.46%)</title><rect x="56.5" y="613" width="29.1" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="59.50" y="623.5" >tr..</text>
</g>
<g >
<title>que_thr_dec_refer_count(que_thr_t*, que_thr_t**) (1 samples, 0.49%)</title><rect x="1149.3" y="725" width="5.8" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="1152.31" y="735.5" ></text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.49%)</title><rect x="1160.9" y="421" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="1163.94" y="431.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 1.48%)</title><rect x="539.0" y="981" width="17.4" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="541.97" y="991.5" ></text>
</g>
<g >
<title>auto trx_sys_t::latch_and_execute_with_active_trx&lt;locksys::rec_queue_validate_latched(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*)::{lambda(trx_t const*)#2}&gt;(unsigned long, locksys::rec_queue_validate_latched(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*)::{lambda(trx_t const*)#2}&amp;&amp;, ut::Location const&amp;) (2 samples, 0.99%)</title><rect x="236.7" y="517" width="11.6" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="239.70" y="527.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(unsigned int, unsigned int, char const*, unsigned int) (8 samples, 3.94%)</title><rect x="1102.8" y="741" width="46.5" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="1105.81" y="751.5" >Poli..</text>
</g>
<g >
<title>pthread_cond_broadcast@@GLIBC_2.3.2 (3 samples, 1.48%)</title><rect x="1004.0" y="1013" width="17.4" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="1006.99" y="1023.5" ></text>
</g>
<g >
<title>__x64_sys_pwrite64 (1 samples, 0.49%)</title><rect x="562.2" y="565" width="5.8" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="565.22" y="575.5" ></text>
</g>
<g >
<title>locksys::Shard_latch_guard::Shard_latch_guard(ut::Location, page_id_t const&amp;) (1 samples, 0.49%)</title><rect x="306.5" y="629" width="5.8" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="309.45" y="639.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_enter() (1 samples, 0.49%)</title><rect x="260.0" y="533" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="262.95" y="543.5" ></text>
</g>
<g >
<title>trx_rseg_t::latch() (1 samples, 0.49%)</title><rect x="184.4" y="709" width="5.8" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="187.38" y="719.5" ></text>
</g>
<g >
<title>ib_srv_wkr-2 (16 samples, 7.88%)</title><rect x="1091.2" y="1029" width="93.0" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="1094.18" y="1039.5" >ib_srv_wkr-2</text>
</g>
<g >
<title>btr_pcur_t::open_no_init(dict_index_t*, dtuple_t const*, page_cur_mode_t, unsigned long, unsigned long, mtr_t*, ut::Location) (4 samples, 1.97%)</title><rect x="254.1" y="645" width="23.3" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="257.14" y="655.5" >b..</text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.49%)</title><rect x="335.5" y="549" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="338.52" y="559.5" ></text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.49%)</title><rect x="742.4" y="597" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="745.41" y="607.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::peek_owner() const (1 samples, 0.49%)</title><rect x="248.3" y="373" width="5.8" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="251.33" y="383.5" ></text>
</g>
<g >
<title>trx_undo_get_first_rec(unsigned long*, unsigned int, page_size_t const&amp;, unsigned int, unsigned long, unsigned long, mtr_t*) (1 samples, 0.49%)</title><rect x="649.4" y="661" width="5.8" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="652.41" y="671.5" ></text>
</g>
<g >
<title>open_tables(THD*, Table_ref**, unsigned int*, unsigned int, Prelocking_strategy*) (6 samples, 2.96%)</title><rect x="393.6" y="837" width="34.9" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="396.65" y="847.5" >op..</text>
</g>
<g >
<title>lock_clust_rec_read_check_and_lock(lock_duration_t, buf_block_t const*, unsigned char const*, dict_index_t*, unsigned long const*, select_mode, lock_mode, unsigned long, que_thr_t*) (4 samples, 1.97%)</title><rect x="230.9" y="565" width="23.2" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="233.89" y="575.5" >l..</text>
</g>
<g >
<title>copy_user_generic_string (1 samples, 0.49%)</title><rect x="562.2" y="469" width="5.8" height="15.0" fill="rgb(87,87,197)" rx="2" ry="2" />
<text  x="565.22" y="479.5" ></text>
</g>
<g >
<title>ib_log_flush (1 samples, 0.49%)</title><rect x="533.2" y="1029" width="5.8" height="15.0" fill="rgb(95,95,203)" rx="2" ry="2" />
<text  x="536.15" y="1039.5" ></text>
</g>
<g >
<title>rw_lock_add_debug_info(rw_lock_t*, unsigned long, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="672.7" y="501" width="5.8" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="675.66" y="511.5" ></text>
</g>
<g >
<title>void Detached_thread::operator()&lt;void (*)()&gt;(void (*&amp;&amp;)()) (73 samples, 35.96%)</title><rect x="579.7" y="869" width="424.3" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="582.66" y="879.5" >void Detached_thread::operator()&lt;void (*)()&gt;(void (*&amp;&amp;)())</text>
</g>
<g >
<title>srv_task_execute() (2 samples, 0.99%)</title><rect x="1079.6" y="773" width="11.6" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="1082.56" y="783.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Release_all&gt; &gt;(Iterate&lt;Release_all&gt;&amp;) const (1 samples, 0.49%)</title><rect x="132.1" y="645" width="5.8" height="15.0" fill="rgb(114,114,222)" rx="2" ry="2" />
<text  x="135.07" y="655.5" ></text>
</g>
<g >
<title>futex_wake (3 samples, 1.48%)</title><rect x="1004.0" y="933" width="17.4" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="1006.99" y="943.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.49%)</title><rect x="155.3" y="517" width="5.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="158.32" y="527.5" ></text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (1 samples, 0.49%)</title><rect x="602.9" y="581" width="5.8" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="605.91" y="591.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(unsigned int, unsigned int, char const*, unsigned int) (10 samples, 4.93%)</title><rect x="1021.4" y="741" width="58.2" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="1024.43" y="751.5" >Policy..</text>
</g>
<g >
<title>pfs_rw_lock_x_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="143.7" y="549" width="5.8" height="15.0" fill="rgb(118,118,224)" rx="2" ry="2" />
<text  x="146.69" y="559.5" ></text>
</g>
<g >
<title>page_id_t::hash() const (1 samples, 0.49%)</title><rect x="184.4" y="565" width="5.8" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="187.38" y="575.5" ></text>
</g>
<g >
<title>fil_space_t::get_recent_version() const (1 samples, 0.49%)</title><rect x="707.5" y="597" width="5.8" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="710.54" y="607.5" ></text>
</g>
<g >
<title>rw_lock_remove_debug_info(rw_lock_t*, unsigned long, unsigned long) (1 samples, 0.49%)</title><rect x="730.8" y="485" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="733.79" y="495.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_exit() (1 samples, 0.49%)</title><rect x="823.8" y="517" width="5.8" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="826.79" y="527.5" ></text>
</g>
<g >
<title>rw_lock_s_unlock_func(unsigned long, rw_lock_t*) (1 samples, 0.49%)</title><rect x="725.0" y="517" width="5.8" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="727.98" y="527.5" ></text>
</g>
<g >
<title>buf_page_t::Latching_rules_helpers::assert_latches_let_distinguish(buf_page_t const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) (1 samples, 0.49%)</title><rect x="254.1" y="533" width="5.9" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="257.14" y="543.5" ></text>
</g>
<g >
<title>dict_stats_save(dict_table_t*, index_id_t const*) (47 samples, 23.15%)</title><rect x="108.8" y="805" width="273.2" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="111.82" y="815.5" >dict_stats_save(dict_table_t*, index..</text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::release(TTASEventMutex&lt;GenericPolicy&gt; const*) (1 samples, 0.49%)</title><rect x="277.4" y="469" width="5.8" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="280.39" y="479.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 1.48%)</title><rect x="1004.0" y="997" width="17.4" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="1006.99" y="1007.5" ></text>
</g>
<g >
<title>log_free_check() (1 samples, 0.49%)</title><rect x="114.6" y="725" width="5.8" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="117.63" y="735.5" ></text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(TTASEventMutex&lt;GenericPolicy&gt; const&amp;, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="527.3" y="693" width="5.9" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="530.34" y="703.5" ></text>
</g>
<g >
<title>trx_undo_set_state_at_finish(trx_undo_t*, mtr_t*) (1 samples, 0.49%)</title><rect x="486.7" y="693" width="5.8" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="489.65" y="703.5" ></text>
</g>
<g >
<title>buf_page_t::was_stale() const (1 samples, 0.49%)</title><rect x="707.5" y="613" width="5.8" height="15.0" fill="rgb(87,87,197)" rx="2" ry="2" />
<text  x="710.54" y="623.5" ></text>
</g>
<g >
<title>trx_rsegf_get_nth_undo(unsigned char*, unsigned long, mtr_t*) (1 samples, 0.49%)</title><rect x="597.1" y="645" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="600.09" y="655.5" ></text>
</g>
<g >
<title>dict_stats_update(dict_table_t*, dict_stats_upd_option_t) (4 samples, 1.97%)</title><rect x="399.5" y="725" width="23.2" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="402.46" y="735.5" >d..</text>
</g>
<g >
<title>std::map&lt;char const*, dict_index_t*, ut_strcmp_functor, ut::allocator&lt;std::pair&lt;char const* const, dict_index_t*&gt;, ut::detail::allocator_base_pfs&lt;std::pair&lt;char const* const, dict_index_t*&gt; &gt; &gt; &gt;::operator[](char const*&amp;&amp;) (1 samples, 0.49%)</title><rect x="347.1" y="789" width="5.9" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="350.14" y="799.5" ></text>
</g>
<g >
<title>handler::ha_update_row(unsigned char const*, unsigned char*) (8 samples, 3.94%)</title><rect x="50.7" y="789" width="46.5" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="53.69" y="799.5" >hand..</text>
</g>
<g >
<title>buf_validate() (1 samples, 0.49%)</title><rect x="405.3" y="501" width="5.8" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="408.27" y="511.5" ></text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (1 samples, 0.49%)</title><rect x="695.9" y="581" width="5.8" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="698.91" y="591.5" ></text>
</g>
<g >
<title>void mutex_enter_inline&lt;PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt; &gt;(PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;*, ut::Location) (1 samples, 0.49%)</title><rect x="1184.2" y="757" width="5.8" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="1187.19" y="767.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void (*&amp;)(unsigned long), unsigned long&amp;&gt;::type std::__invoke&lt;void (*&amp;)(unsigned long), unsigned long&amp;&gt;(void (*&amp;)(unsigned long), unsigned long&amp;) (1 samples, 0.49%)</title><rect x="515.7" y="821" width="5.8" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="518.71" y="831.5" ></text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (2 samples, 0.99%)</title><rect x="957.5" y="597" width="11.6" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="960.49" y="607.5" ></text>
</g>
<g >
<title>dict_stats_save_index_stat(dict_index_t*, long, char const*, unsigned long, unsigned long*, char const*, trx_t*) (26 samples, 12.81%)</title><rect x="196.0" y="789" width="151.1" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="199.01" y="799.5" >dict_stats_save_ind..</text>
</g>
<g >
<title>rec_get_offsets(unsigned char const*, dict_index_t const*, unsigned long*, unsigned long, ut::Location, mem_block_info_t**) (1 samples, 0.49%)</title><rect x="335.5" y="613" width="5.8" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="338.52" y="623.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::exit() (1 samples, 0.49%)</title><rect x="277.4" y="501" width="5.8" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="280.39" y="511.5" ></text>
</g>
<g >
<title>__GI___lll_lock_wake (1 samples, 0.49%)</title><rect x="172.8" y="597" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="175.76" y="607.5" ></text>
</g>
<g >
<title>netif_receive_skb_list_internal (1 samples, 0.49%)</title><rect x="318.1" y="325" width="5.8" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="321.08" y="335.5" ></text>
</g>
<g >
<title>open_table(THD*, Table_ref*, Open_table_context*) (6 samples, 2.96%)</title><rect x="393.6" y="805" width="34.9" height="15.0" fill="rgb(110,110,217)" rx="2" ry="2" />
<text  x="396.65" y="815.5" >op..</text>
</g>
<g >
<title>Fil_shard::validate() const (1 samples, 0.49%)</title><rect x="573.8" y="453" width="5.9" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="576.84" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;buf_io_fix&gt; std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_M_insert_&lt;buf_io_fix const&amp;, std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_Alloc_node&gt;(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, buf_io_fix const&amp;, std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_Alloc_node&amp;) (1 samples, 0.49%)</title><rect x="254.1" y="357" width="5.9" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="257.14" y="367.5" ></text>
</g>
<g >
<title>ut::malloc_withkey(ut::PSI_memory_key_t, unsigned long) (1 samples, 0.49%)</title><rect x="347.1" y="677" width="5.9" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="350.14" y="687.5" ></text>
</g>
<g >
<title>dict_stats_fetch_from_ps(dict_table_t*) (4 samples, 1.97%)</title><rect x="399.5" y="709" width="23.2" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="402.46" y="719.5" >d..</text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (14 samples, 6.90%)</title><rect x="876.1" y="645" width="81.4" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="879.11" y="655.5" >mtr_t::re..</text>
</g>
<g >
<title>mtr_t::Command::release_all() (1 samples, 0.49%)</title><rect x="713.3" y="677" width="5.9" height="15.0" fill="rgb(134,134,240)" rx="2" ry="2" />
<text  x="716.35" y="687.5" ></text>
</g>
<g >
<title>buf_page_get_state(buf_page_t const*) (1 samples, 0.49%)</title><rect x="85.6" y="533" width="5.8" height="15.0" fill="rgb(93,93,201)" rx="2" ry="2" />
<text  x="88.57" y="543.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core.constprop.0 (1 samples, 0.49%)</title><rect x="318.1" y="293" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="321.08" y="303.5" ></text>
</g>
<g >
<title>trx_undo_assign_undo(trx_t*, trx_undo_ptr_t*, unsigned long) (3 samples, 1.48%)</title><rect x="155.3" y="613" width="17.5" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="158.32" y="623.5" ></text>
</g>
<g >
<title>mtr_t::memo_contains_page_flagged(unsigned char const*, unsigned long) const (1 samples, 0.49%)</title><rect x="666.8" y="613" width="5.9" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="669.85" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;buf_io_fix&gt;* std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_Alloc_node::operator()&lt;buf_io_fix const&amp;&gt;(buf_io_fix const&amp;) const (1 samples, 0.49%)</title><rect x="254.1" y="341" width="5.9" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="257.14" y="351.5" ></text>
</g>
<g >
<title>Find_page::operator()(mtr_memo_slot_t*) (2 samples, 0.99%)</title><rect x="934.2" y="581" width="11.7" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="937.24" y="591.5" ></text>
</g>
<g >
<title>row_upd_step(que_thr_t*) (8 samples, 3.94%)</title><rect x="50.7" y="725" width="46.5" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="53.69" y="735.5" >row_..</text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::try_lock() (1 samples, 0.49%)</title><rect x="289.0" y="501" width="5.8" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="292.01" y="511.5" ></text>
</g>
<g >
<title>__copy_skb_header (1 samples, 0.49%)</title><rect x="15.8" y="757" width="5.8" height="15.0" fill="rgb(134,134,240)" rx="2" ry="2" />
<text  x="18.81" y="767.5" ></text>
</g>
<g >
<title>row_purge_parse_undo_rec(purge_node_t*, unsigned char*, bool*, THD*, que_thr_t*) (1 samples, 0.49%)</title><rect x="1155.1" y="677" width="5.8" height="15.0" fill="rgb(81,81,190)" rx="2" ry="2" />
<text  x="1158.12" y="687.5" ></text>
</g>
<g >
<title>trx_commit_for_mysql(trx_t*) (10 samples, 4.93%)</title><rect x="434.3" y="757" width="58.2" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="437.33" y="767.5" >trx_co..</text>
</g>
<g >
<title>Release_all::operator()(mtr_memo_slot_t*) const (1 samples, 0.49%)</title><rect x="713.3" y="629" width="5.9" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="716.35" y="639.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void (*())()&gt;::__call&lt;void&gt;(std::tuple&lt;&gt;&amp;&amp;, std::_Index_tuple&lt;&gt;) (14 samples, 6.90%)</title><rect x="1097.0" y="837" width="81.4" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="1100.00" y="847.5" >void std:..</text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.49%)</title><rect x="178.6" y="581" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="181.57" y="591.5" ></text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (9 samples, 4.43%)</title><rect x="759.9" y="645" width="52.3" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="762.85" y="655.5" >mtr_t..</text>
</g>
<g >
<title>__x64_sys_futex (1 samples, 0.49%)</title><rect x="172.8" y="533" width="5.8" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="175.76" y="543.5" ></text>
</g>
<g >
<title>std::atomic&lt;bool&gt;::load(std::memory_order) const (1 samples, 0.49%)</title><rect x="132.1" y="453" width="5.8" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="135.07" y="463.5" ></text>
</g>
<g >
<title>AIO::total_pending_io_count() (1 samples, 0.49%)</title><rect x="515.7" y="677" width="5.8" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="518.71" y="687.5" ></text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::locked(TTASEventMutex&lt;GenericPolicy&gt; const&amp;, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="126.3" y="373" width="5.8" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="129.26" y="383.5" ></text>
</g>
<g >
<title>Find_page::operator()(mtr_memo_slot_t*) (3 samples, 1.48%)</title><rect x="783.1" y="581" width="17.4" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="786.10" y="591.5" ></text>
</g>
<g >
<title>Fil_shard::mutex_owned() const (1 samples, 0.49%)</title><rect x="707.5" y="581" width="5.8" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="710.54" y="591.5" ></text>
</g>
<g >
<title>rw_lock_s_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="126.3" y="437" width="5.8" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="129.26" y="447.5" ></text>
</g>
<g >
<title>buf_flush_note_modification(buf_block_t*, unsigned long, unsigned long, Flush_observer*) (1 samples, 0.49%)</title><rect x="85.6" y="549" width="5.8" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="88.57" y="559.5" ></text>
</g>
<g >
<title>rw_lock_x_lock_gen(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="143.7" y="565" width="5.8" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="146.69" y="575.5" ></text>
</g>
<g >
<title>rw_lock_add_debug_info(rw_lock_t*, unsigned long, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="695.9" y="517" width="5.8" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="698.91" y="527.5" ></text>
</g>
<g >
<title>Find_page::operator()(mtr_memo_slot_t*) (1 samples, 0.49%)</title><rect x="318.1" y="469" width="5.8" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="321.08" y="479.5" ></text>
</g>
<g >
<title>dd::cache::Multi_map_base&lt;dd::Spatial_reference_system&gt;::Iterator dd::cache::Object_registry::begin&lt;dd::Spatial_reference_system&gt;() (1 samples, 0.49%)</title><rect x="393.6" y="725" width="5.9" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="396.65" y="735.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, Detached_thread, void (*)(unsigned long), unsigned long&gt;(std::__invoke_other, Detached_thread&amp;&amp;, void (*&amp;&amp;)(unsigned long), unsigned long&amp;&amp;) (1 samples, 0.49%)</title><rect x="515.7" y="885" width="5.8" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="518.71" y="895.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::commit(THD*, bool) (1 samples, 0.49%)</title><rect x="509.9" y="885" width="5.8" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="512.90" y="895.5" ></text>
</g>
<g >
<title>log_flush_notifier(log_t*) (2 samples, 0.99%)</title><rect x="521.5" y="789" width="11.7" height="15.0" fill="rgb(85,85,195)" rx="2" ry="2" />
<text  x="524.53" y="799.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.49%)</title><rect x="225.1" y="341" width="5.8" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="228.07" y="351.5" ></text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.49%)</title><rect x="236.7" y="325" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="239.70" y="335.5" ></text>
</g>
<g >
<title>dd::cache::Local_multi_map&lt;dd::Spatial_reference_system&gt;* dd::cache::Object_registry::m_map&lt;dd::Spatial_reference_system&gt;() (1 samples, 0.49%)</title><rect x="393.6" y="709" width="5.9" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="396.65" y="719.5" ></text>
</g>
<g >
<title>trx_undo_page_get_s_latched(page_id_t const&amp;, page_size_t const&amp;, mtr_t*) (1 samples, 0.49%)</title><rect x="707.5" y="693" width="5.8" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="710.54" y="703.5" ></text>
</g>
<g >
<title>rw_lock_remove_debug_info(rw_lock_t*, unsigned long, unsigned long) (1 samples, 0.49%)</title><rect x="132.1" y="517" width="5.8" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="135.07" y="527.5" ></text>
</g>
<g >
<title>que_eval_sql(pars_info_t*, char const*, trx_t*) (25 samples, 12.32%)</title><rect x="196.0" y="757" width="145.3" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="199.01" y="767.5" >que_eval_sql(pars_..</text>
</g>
<g >
<title>__tcp_transmit_skb (1 samples, 0.49%)</title><rect x="15.8" y="805" width="5.8" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="18.81" y="815.5" ></text>
</g>
<g >
<title>Iterate&lt;Release_all&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (1 samples, 0.49%)</title><rect x="841.2" y="613" width="5.8" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="844.23" y="623.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (3 samples, 1.48%)</title><rect x="632.0" y="581" width="17.4" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="634.97" y="591.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void (*&amp;)()&gt;(std::__invoke_other, void (*&amp;)()) (1 samples, 0.49%)</title><rect x="1184.2" y="805" width="5.8" height="15.0" fill="rgb(131,131,236)" rx="2" ry="2" />
<text  x="1187.19" y="815.5" ></text>
</g>
<g >
<title>std::enable_if&lt;ut::detail::Alloc_pfs::is_pfs_instrumented_v, void*&gt;::type ut::detail::Alloc_&lt;ut::detail::Alloc_pfs&gt;::alloc&lt;false, ut::detail::Alloc_pfs&gt;(unsigned long, unsigned int) (1 samples, 0.49%)</title><rect x="736.6" y="469" width="5.8" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="739.60" y="479.5" ></text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::locked(TTASEventMutex&lt;GenericPolicy&gt; const&amp;, char const*, unsigned long) (1 samples, 0.49%)</title><rect x="957.5" y="501" width="5.8" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="960.49" y="511.5" ></text>
</g>
<g >
<title>buf_page_hash_get_low(buf_pool_t*, page_id_t const&amp;) (1 samples, 0.49%)</title><rect x="957.5" y="565" width="5.8" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="960.49" y="575.5" ></text>
</g>
<g >
<title>buf_page_optimistic_get(unsigned long, buf_block_t*, unsigned long, Page_fetch, char const*, unsigned long, mtr_t*) (2 samples, 0.99%)</title><rect x="405.3" y="517" width="11.6" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="408.27" y="527.5" ></text>
</g>
<g >
<title>trx_rsegf_get_nth_undo(unsigned char*, unsigned long, mtr_t*) (2 samples, 0.99%)</title><rect x="620.3" y="629" width="11.7" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="623.34" y="639.5" ></text>
</g>
<g >
<title>ib_srv_wkr-1 (12 samples, 5.91%)</title><rect x="1021.4" y="1029" width="69.8" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="1024.43" y="1039.5" >ib_srv_..</text>
</g>
<g >
<title>mach_read_ulint(unsigned char const*, mlog_id_t) (1 samples, 0.49%)</title><rect x="620.3" y="597" width="5.9" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="623.34" y="607.5" ></text>
</g>
<g >
<title>ha_innobase::analyze(THD*, HA_CHECK_OPT*) (49 samples, 24.14%)</title><rect x="108.8" y="853" width="284.8" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="111.82" y="863.5" >ha_innobase::analyze(THD*, HA_CHECK_OP..</text>
</g>
<g >
<title>dev_queue_xmit_nit (1 samples, 0.49%)</title><rect x="318.1" y="101" width="5.8" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="321.08" y="111.5" ></text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (1 samples, 0.49%)</title><rect x="358.8" y="677" width="5.8" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="361.77" y="687.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt; &gt;::_M_run() (12 samples, 5.91%)</title><rect x="1021.4" y="949" width="69.8" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="1024.43" y="959.5" >std::th..</text>
</g>
<g >
<title>void std::_Bind&lt;void (*())()&gt;::operator()&lt;, void&gt;() (12 samples, 5.91%)</title><rect x="1021.4" y="853" width="69.8" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="1024.43" y="863.5" >void st..</text>
</g>
<g >
<title>buf_page_hash_lock_get(buf_pool_t const*, page_id_t) (1 samples, 0.49%)</title><rect x="382.0" y="597" width="5.8" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="385.02" y="607.5" ></text>
</g>
<g >
<title>__dev_xmit_skb (1 samples, 0.49%)</title><rect x="318.1" y="149" width="5.8" height="15.0" fill="rgb(110,110,218)" rx="2" ry="2" />
<text  x="321.08" y="159.5" ></text>
</g>
<g >
<title>row_upd_clust_step(upd_node_t*, que_thr_t*) (8 samples, 3.94%)</title><rect x="50.7" y="693" width="46.5" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="53.69" y="703.5" >row_..</text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::trylock(char const*, unsigned int) (1 samples, 0.49%)</title><rect x="725.0" y="469" width="5.8" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="727.98" y="479.5" ></text>
</g>
<g >
<title>bool std::operator==&lt;dd::cache::Local_multi_map&lt;dd::Column_statistics&gt;, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Column_statistics&gt; &gt; &gt;(std::unique_ptr&lt;dd::cache::Local_multi_map&lt;dd::Column_statistics&gt;, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Column_statistics&gt; &gt; &gt; const&amp;, decltype(nullptr)) (1 samples, 0.49%)</title><rect x="39.1" y="773" width="5.8" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="42.06" y="783.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.49%)</title><rect x="184.4" y="645" width="5.8" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="187.38" y="655.5" ></text>
</g>
<g >
<title>btr_cur_search_to_nth_level(dict_index_t*, unsigned long, dtuple_t const*, page_cur_mode_t, unsigned long, btr_cur_t*, unsigned long, char const*, unsigned long, mtr_t*) (3 samples, 1.48%)</title><rect x="207.6" y="581" width="17.5" height="15.0" fill="rgb(123,123,230)" rx="2" ry="2" />
<text  x="210.64" y="591.5" ></text>
</g>
<g >
<title>btr_cur_optimistic_latch_leaves(buf_block_t*, unsigned long, unsigned long*, btr_cur_t*, char const*, unsigned long, mtr_t*) (2 samples, 0.99%)</title><rect x="405.3" y="533" width="11.6" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="408.27" y="543.5" ></text>
</g>
<g >
<title>locksys::owns_page_shard(page_id_t const&amp;) (1 samples, 0.49%)</title><rect x="230.9" y="485" width="5.8" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="233.89" y="495.5" ></text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (2 samples, 0.99%)</title><rect x="370.4" y="677" width="11.6" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="373.39" y="687.5" ></text>
</g>
<g >
<title>locksys::owns_page_shard(page_id_t const&amp;) (1 samples, 0.49%)</title><rect x="242.5" y="453" width="5.8" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="245.51" y="463.5" ></text>
</g>
<g >
<title>trx_undo_page_get(page_id_t const&amp;, page_size_t const&amp;, mtr_t*) (1 samples, 0.49%)</title><rect x="56.5" y="549" width="5.8" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="59.50" y="559.5" ></text>
</g>
<g >
<title>dict_stats_exec_sql(pars_info_t*, char const*, trx_t*) (15 samples, 7.39%)</title><rect x="108.8" y="789" width="87.2" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="111.82" y="799.5" >dict_stats..</text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt;::_M_invoke&lt;0ul, 1ul, 2ul&gt;(std::_Index_tuple&lt;0ul, 1ul, 2ul&gt;) (1 samples, 0.49%)</title><rect x="533.2" y="917" width="5.8" height="15.0" fill="rgb(131,131,236)" rx="2" ry="2" />
<text  x="536.15" y="927.5" ></text>
</g>
<g >
<title>os_file_write_func(IORequest&amp;, char const*, int, void const*, unsigned long, unsigned long) (1 samples, 0.49%)</title><rect x="562.2" y="677" width="5.8" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="565.22" y="687.5" ></text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.49%)</title><rect x="486.7" y="533" width="5.8" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="489.65" y="543.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;Detached_thread, void (*)()&gt;::type std::__invoke&lt;Detached_thread, void (*)()&gt;(Detached_thread&amp;&amp;, void (*&amp;&amp;)()) (73 samples, 35.96%)</title><rect x="579.7" y="901" width="424.3" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="582.66" y="911.5" >std::__invoke_result&lt;Detached_thread, void (*)()&gt;::type s..</text>
</g>
<g >
<title>rw_lock_x_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.49%)</title><rect x="736.6" y="549" width="5.8" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="739.60" y="559.5" ></text>
</g>
<g >
<title>dict_stats_exec_sql(pars_info_t*, char const*, trx_t*) (25 samples, 12.32%)</title><rect x="196.0" y="773" width="145.3" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="199.01" y="783.5" >dict_stats_exec_sq..</text>
</g>
<g >
<title>locksys::owns_page_shard(page_id_t const&amp;) (1 samples, 0.49%)</title><rect x="294.8" y="565" width="5.8" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="297.83" y="575.5" ></text>
</g>
</g>
</svg>
