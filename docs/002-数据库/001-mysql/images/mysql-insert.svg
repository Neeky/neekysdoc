<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#e0e0ff" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="902.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >mysql-insert</text>
<text id="details" x="10.00" y="885" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="885" > </text>
<g id="frames">
<g >
<title>pfs_rw_lock_x_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.68%)</title><rect x="834.4" y="357" width="8.1" height="15.0" fill="rgb(118,118,224)" rx="2" ry="2" />
<text  x="837.38" y="367.5" ></text>
</g>
<g >
<title>trx_rsegf_get_nth_undo(unsigned char*, unsigned long, mtr_t*) (5 samples, 3.42%)</title><rect x="850.5" y="453" width="40.5" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="853.55" y="463.5" >trx..</text>
</g>
<g >
<title>buf_flush_page_coordinator_thread() (2 samples, 1.37%)</title><rect x="1173.8" y="789" width="16.2" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="1176.84" y="799.5" ></text>
</g>
<g >
<title>fil_space_get_flags(unsigned int) (1 samples, 0.68%)</title><rect x="494.9" y="453" width="8.1" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="497.93" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;dd::cache::Local_multi_map&lt;dd::Event&gt;, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Event&gt; &gt; &gt;::get() const (1 samples, 0.68%)</title><rect x="575.8" y="597" width="8.0" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="578.75" y="607.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.68%)</title><rect x="882.9" y="373" width="8.1" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="885.88" y="383.5" ></text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::can_leave(std::bitset&lt;3ul&gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.68%)</title><rect x="195.9" y="325" width="8.1" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="198.89" y="335.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.68%)</title><rect x="672.7" y="341" width="8.1" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="675.74" y="351.5" ></text>
</g>
<g >
<title>ksys_write (1 samples, 0.68%)</title><rect x="616.2" y="501" width="8.0" height="15.0" fill="rgb(88,88,198)" rx="2" ry="2" />
<text  x="619.16" y="511.5" ></text>
</g>
<g >
<title>ha_commit_low(THD*, bool, bool) (35 samples, 23.97%)</title><rect x="624.2" y="597" width="282.9" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="627.25" y="607.5" >ha_commit_low(THD*, bool, bool)</text>
</g>
<g >
<title>trx_undo_page_get(page_id_t const&amp;, page_size_t const&amp;, mtr_t*) (3 samples, 2.05%)</title><rect x="1084.9" y="565" width="24.3" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="1087.93" y="575.5" >t..</text>
</g>
<g >
<title>my_checksum(unsigned int, unsigned char const*, unsigned long) (1 samples, 0.68%)</title><rect x="907.1" y="485" width="8.1" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="910.12" y="495.5" ></text>
</g>
<g >
<title>get_timespec64 (1 samples, 0.68%)</title><rect x="1133.4" y="757" width="8.1" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="1136.42" y="767.5" ></text>
</g>
<g >
<title>AutoDebugTrace::~AutoDebugTrace() (1 samples, 0.68%)</title><rect x="155.5" y="613" width="8.1" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="158.48" y="623.5" ></text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::assert_latches_let_distinguish(std::bitset&lt;3ul&gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.68%)</title><rect x="826.3" y="325" width="8.1" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="829.30" y="335.5" ></text>
</g>
<g >
<title>__write (1 samples, 0.68%)</title><rect x="616.2" y="549" width="8.0" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="619.16" y="559.5" ></text>
</g>
<g >
<title>std::operator&amp;(std::memory_order, std::__memory_order_modifier) (1 samples, 0.68%)</title><rect x="996.0" y="357" width="8.1" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="999.03" y="367.5" ></text>
</g>
<g >
<title>buf_pool_validate_instance(buf_pool_t*) (1 samples, 0.68%)</title><rect x="826.3" y="373" width="8.1" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="829.30" y="383.5" ></text>
</g>
<g >
<title>btr_cur_get_page(btr_cur_t*) (1 samples, 0.68%)</title><rect x="171.6" y="501" width="8.1" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="174.64" y="511.5" ></text>
</g>
<g >
<title>rw_lock_x_unlock_func(unsigned long, rw_lock_t*) (1 samples, 0.68%)</title><rect x="1004.1" y="389" width="8.1" height="15.0" fill="rgb(114,114,222)" rx="2" ry="2" />
<text  x="1007.11" y="399.5" ></text>
</g>
<g >
<title>Find_page::get_block() const (1 samples, 0.68%)</title><rect x="850.5" y="421" width="8.1" height="15.0" fill="rgb(130,130,235)" rx="2" ry="2" />
<text  x="853.55" y="431.5" ></text>
</g>
<g >
<title>handler::ha_write_row(unsigned char*) (53 samples, 36.30%)</title><rect x="98.9" y="661" width="428.4" height="15.0" fill="rgb(136,136,241)" rx="2" ry="2" />
<text  x="101.90" y="671.5" >handler::ha_write_row(unsigned char*)</text>
</g>
<g >
<title>dd::cache::Local_multi_map&lt;dd::Event&gt;* dd::cache::Object_registry::m_map&lt;dd::Event&gt;() (1 samples, 0.68%)</title><rect x="575.8" y="645" width="8.0" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="578.75" y="655.5" ></text>
</g>
<g >
<title>hash_get_sync_obj_index(hash_table_t*, unsigned long) (1 samples, 0.68%)</title><rect x="729.3" y="293" width="8.1" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="732.32" y="303.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (2 samples, 1.37%)</title><rect x="931.4" y="533" width="16.1" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="934.37" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;Fil_shard*, std::allocator&lt;Fil_shard*&gt; &gt;::size() const (1 samples, 0.68%)</title><rect x="389.9" y="373" width="8.0" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="392.86" y="383.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::commit(THD*, bool) (38 samples, 26.03%)</title><rect x="608.1" y="677" width="307.1" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="611.08" y="687.5" >MYSQL_BIN_LOG::commit(THD*, bool)</text>
</g>
<g >
<title>log_files_governor_iteration(log_t&amp;) (1 samples, 0.68%)</title><rect x="1117.3" y="581" width="8.0" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="1120.26" y="591.5" ></text>
</g>
<g >
<title>file_update_time (1 samples, 0.68%)</title><rect x="616.2" y="437" width="8.0" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="619.16" y="447.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::lookup() (1 samples, 0.68%)</title><rect x="705.1" y="357" width="8.1" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="708.07" y="367.5" ></text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::release(TTASEventMutex&lt;GenericPolicy&gt; const&amp;) (1 samples, 0.68%)</title><rect x="381.8" y="357" width="8.1" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="384.78" y="367.5" ></text>
</g>
<g >
<title>buf_validate() (3 samples, 2.05%)</title><rect x="1084.9" y="501" width="24.3" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="1087.93" y="511.5" >b..</text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Find_page&gt; &gt;(Iterate&lt;Find_page&gt;&amp;) const (4 samples, 2.74%)</title><rect x="785.9" y="405" width="32.3" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="788.89" y="415.5" >bo..</text>
</g>
<g >
<title>rw_lock_x_lock_gen(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.68%)</title><rect x="462.6" y="437" width="8.1" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="465.60" y="447.5" ></text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (6 samples, 4.11%)</title><rect x="947.5" y="533" width="48.5" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="950.53" y="543.5" >mtr_..</text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt;::_M_invoke&lt;0ul, 1ul&gt;(std::_Index_tuple&lt;0ul, 1ul&gt;) (2 samples, 1.37%)</title><rect x="1173.8" y="725" width="16.2" height="15.0" fill="rgb(136,136,242)" rx="2" ry="2" />
<text  x="1176.84" y="735.5" ></text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::assert_latches_let_distinguish(std::bitset&lt;3ul&gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.68%)</title><rect x="1101.1" y="421" width="8.1" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="1104.10" y="431.5" ></text>
</g>
<g >
<title>rw_lock_s_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.68%)</title><rect x="503.0" y="453" width="8.1" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="506.01" y="463.5" ></text>
</g>
<g >
<title>close_thread_tables(THD*) (1 samples, 0.68%)</title><rect x="543.4" y="709" width="8.1" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="546.42" y="719.5" ></text>
</g>
<g >
<title>Release_all::operator()(mtr_memo_slot_t*) const (2 samples, 1.37%)</title><rect x="680.8" y="373" width="16.2" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="683.82" y="383.5" ></text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (1 samples, 0.68%)</title><rect x="729.3" y="373" width="8.1" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="732.32" y="383.5" ></text>
</g>
<g >
<title>binlog_log_row(TABLE*, unsigned char const*, unsigned char const*, bool (*)(THD*, TABLE*, bool, unsigned char const*, unsigned char const*)) (7 samples, 4.79%)</title><rect x="98.9" y="645" width="56.6" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="101.90" y="655.5" >binlo..</text>
</g>
<g >
<title>buf_pool_validate_instance(buf_pool_t*) (2 samples, 1.37%)</title><rect x="1060.7" y="469" width="16.1" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="1063.68" y="479.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::process_flush_stage_queue(unsigned long long*, bool*, THD**) (1 samples, 0.68%)</title><rect x="907.1" y="645" width="8.1" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="910.12" y="655.5" ></text>
</g>
<g >
<title>InList(link*, char const*) (1 samples, 0.68%)</title><rect x="155.5" y="565" width="8.1" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="158.48" y="575.5" ></text>
</g>
<g >
<title>fil_space_get_flags(unsigned int) (2 samples, 1.37%)</title><rect x="381.8" y="405" width="16.1" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="384.78" y="415.5" ></text>
</g>
<g >
<title>trx_undo_assign_undo(trx_t*, trx_undo_ptr_t*, unsigned long) (20 samples, 13.70%)</title><rect x="204.0" y="453" width="161.6" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="206.97" y="463.5" >trx_undo_assign_undo..</text>
</g>
<g >
<title>std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; std::__copy_move_a1&lt;false, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; &gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;) (1 samples, 0.68%)</title><rect x="826.3" y="229" width="8.1" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="829.30" y="239.5" ></text>
</g>
<g >
<title>trans_commit(THD*, bool) (67 samples, 45.89%)</title><rect x="567.7" y="709" width="541.5" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="570.67" y="719.5" >trans_commit(THD*, bool)</text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Find_page&gt; &gt;(Iterate&lt;Find_page&gt;&amp;) const (1 samples, 0.68%)</title><rect x="220.1" y="373" width="8.1" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="223.14" y="383.5" ></text>
</g>
<g >
<title>my_malloc(unsigned int, unsigned long, int) (1 samples, 0.68%)</title><rect x="98.9" y="517" width="8.1" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="101.90" y="527.5" ></text>
</g>
<g >
<title>ut_list_base&lt;rw_lock_debug_t, ut_list_base_explicit_getter&lt;rw_lock_debug_t, &amp;rw_lock_debug_t::list&gt; &gt;::begin() const (1 samples, 0.68%)</title><rect x="769.7" y="357" width="8.1" height="15.0" fill="rgb(119,119,225)" rx="2" ry="2" />
<text  x="772.73" y="367.5" ></text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (7 samples, 4.79%)</title><rect x="680.8" y="453" width="56.6" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="683.82" y="463.5" >trx_r..</text>
</g>
<g >
<title>lock_rec_insert_check_and_lock(unsigned long, unsigned char const*, buf_block_t*, dict_index_t*, que_thr_t*, mtr_t*, bool*) (1 samples, 0.68%)</title><rect x="406.0" y="469" width="8.1" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="409.03" y="479.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.68%)</title><rect x="705.1" y="405" width="8.1" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="708.07" y="415.5" ></text>
</g>
<g >
<title>mach_read_from_4(unsigned char const*) (1 samples, 0.68%)</title><rect x="244.4" y="357" width="8.1" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="247.38" y="367.5" ></text>
</g>
<g >
<title>btr_page_split_and_insert(unsigned int, btr_cur_t*, unsigned long**, mem_block_info_t**, dtuple_t const*, mtr_t*) (2 samples, 1.37%)</title><rect x="414.1" y="485" width="16.2" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="417.11" y="495.5" ></text>
</g>
<g >
<title>Double_write::enqueue(buf_flush_t, buf_page_t*, file::Block const*) (1 samples, 0.68%)</title><rect x="1181.9" y="421" width="8.1" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="1184.92" y="431.5" ></text>
</g>
<g >
<title>trx_rseg_t::latch() (7 samples, 4.79%)</title><rect x="777.8" y="485" width="56.6" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="780.81" y="495.5" >trx_r..</text>
</g>
<g >
<title>I_P_List&lt;MDL_ticket, I_P_List_adapter&lt;MDL_ticket, &amp;MDL_ticket::next_in_context, &amp;MDL_ticket::prev_in_context&gt;, I_P_List_null_counter, I_P_List_no_push_back&lt;MDL_ticket&gt; &gt;::push_front(MDL_ticket*) (1 samples, 0.68%)</title><rect x="583.8" y="645" width="8.1" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="586.84" y="655.5" ></text>
</g>
<g >
<title>btr_search_update_hash_node_on_insert(btr_cur_t*) (2 samples, 1.37%)</title><rect x="365.6" y="485" width="16.2" height="15.0" fill="rgb(110,110,217)" rx="2" ry="2" />
<text  x="368.62" y="495.5" ></text>
</g>
<g >
<title>THD::sql_parser() (1 samples, 0.68%)</title><rect x="1109.2" y="709" width="8.1" height="15.0" fill="rgb(123,123,230)" rx="2" ry="2" />
<text  x="1112.18" y="719.5" ></text>
</g>
<g >
<title>bool std::__invoke_impl&lt;bool, cs::util::ReplicatedColumnsView::ReplicatedColumnsView(TABLE const*, THD const*)::{lambda(TABLE const*, unsigned long)#1}&amp;, TABLE const*, unsigned long&gt;(std::__invoke_other, cs::util::ReplicatedColumnsView::ReplicatedColumnsView(TABLE const*, THD const*)::{lambda(TABLE const*, unsigned long)#1}&amp;, TABLE const*&amp;&amp;, unsigned long&amp;&amp;) (1 samples, 0.68%)</title><rect x="107.0" y="453" width="8.1" height="15.0" fill="rgb(97,97,205)" rx="2" ry="2" />
<text  x="109.99" y="463.5" ></text>
</g>
<g >
<title>dd::cache::Dictionary_client::commit_modified_objects() (1 samples, 0.68%)</title><rect x="575.8" y="693" width="8.0" height="15.0" fill="rgb(136,136,241)" rx="2" ry="2" />
<text  x="578.75" y="703.5" ></text>
</g>
<g >
<title>void std::vector&lt;rw_lock_debug_t const*, std::allocator&lt;rw_lock_debug_t const*&gt; &gt;::_M_realloc_insert&lt;rw_lock_debug_t const* const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;rw_lock_debug_t const**, std::vector&lt;rw_lock_debug_t const*, std::allocator&lt;rw_lock_debug_t const*&gt; &gt; &gt;, rw_lock_debug_t const* const&amp;) (1 samples, 0.68%)</title><rect x="365.6" y="405" width="8.1" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="368.62" y="415.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (1 samples, 0.68%)</title><rect x="1157.7" y="277" width="8.1" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="1160.67" y="287.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (1 samples, 0.68%)</title><rect x="729.3" y="421" width="8.1" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="732.32" y="431.5" ></text>
</g>
<g >
<title>__strchr_avx2 (1 samples, 0.68%)</title><rect x="163.6" y="501" width="8.0" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="166.56" y="511.5" ></text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::assert_latches_let_distinguish(std::bitset&lt;3ul&gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.68%)</title><rect x="1101.1" y="437" width="8.1" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="1104.10" y="447.5" ></text>
</g>
<g >
<title>std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; std::__copy_move_a&lt;false, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; &gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;) (1 samples, 0.68%)</title><rect x="478.8" y="309" width="8.0" height="15.0" fill="rgb(97,97,205)" rx="2" ry="2" />
<text  x="481.77" y="319.5" ></text>
</g>
<g >
<title>buf_page_t::was_stale() const (1 samples, 0.68%)</title><rect x="187.8" y="405" width="8.1" height="15.0" fill="rgb(87,87,197)" rx="2" ry="2" />
<text  x="190.81" y="415.5" ></text>
</g>
<g >
<title>mysql_encryption_file_write(IO_CACHE*, unsigned char const*, unsigned long, int) (1 samples, 0.68%)</title><rect x="616.2" y="581" width="8.0" height="15.0" fill="rgb(82,82,191)" rx="2" ry="2" />
<text  x="619.16" y="591.5" ></text>
</g>
<g >
<title>Iterate&lt;Find_page&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (2 samples, 1.37%)</title><rect x="333.3" y="341" width="16.2" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="336.29" y="351.5" ></text>
</g>
<g >
<title>Table_columns_view&lt;std::function&lt;bool (TABLE const*, unsigned long)&gt; &gt;::end() (1 samples, 0.68%)</title><rect x="123.2" y="581" width="8.0" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="126.15" y="591.5" ></text>
</g>
<g >
<title>pfs_rw_lock_x_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.68%)</title><rect x="228.2" y="309" width="8.1" height="15.0" fill="rgb(118,118,224)" rx="2" ry="2" />
<text  x="231.22" y="319.5" ></text>
</g>
<g >
<title>ha_search_with_data(hash_table_t*, unsigned long, unsigned char const*) (1 samples, 0.68%)</title><rect x="373.7" y="437" width="8.1" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="376.70" y="447.5" ></text>
</g>
<g >
<title>ha_search_and_update_if_found(hash_table_t*, unsigned long, unsigned char const*, buf_block_t*, unsigned char const*) (1 samples, 0.68%)</title><rect x="373.7" y="469" width="8.1" height="15.0" fill="rgb(88,88,198)" rx="2" ry="2" />
<text  x="376.70" y="479.5" ></text>
</g>
<g >
<title>std::operator==(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt; const&amp;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt; const&amp;) (1 samples, 0.68%)</title><rect x="1101.1" y="341" width="8.1" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="1104.10" y="351.5" ></text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (2 samples, 1.37%)</title><rect x="212.1" y="405" width="16.1" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="215.05" y="415.5" ></text>
</g>
<g >
<title>Release_all::operator()(mtr_memo_slot_t*) const (2 samples, 1.37%)</title><rect x="996.0" y="485" width="16.2" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="999.03" y="495.5" ></text>
</g>
<g >
<title>Log_file_handle::prepare_io_request(int, unsigned long, unsigned long, bool) (1 samples, 0.68%)</title><rect x="1141.5" y="501" width="8.1" height="15.0" fill="rgb(85,85,195)" rx="2" ry="2" />
<text  x="1144.51" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;buf_io_fix&gt; &gt; &gt;::allocate(std::allocator&lt;std::_Rb_tree_node&lt;buf_io_fix&gt; &gt;&amp;, unsigned long) (1 samples, 0.68%)</title><rect x="826.3" y="53" width="8.1" height="15.0" fill="rgb(88,88,198)" rx="2" ry="2" />
<text  x="829.30" y="63.5" ></text>
</g>
<g >
<title>tcp_event_data_recv (1 samples, 0.68%)</title><rect x="26.2" y="373" width="8.0" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="29.16" y="383.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_enter() (1 samples, 0.68%)</title><rect x="503.0" y="421" width="8.1" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="506.01" y="431.5" ></text>
</g>
<g >
<title>Iterate&lt;Find_page&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (1 samples, 0.68%)</title><rect x="220.1" y="357" width="8.1" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="223.14" y="367.5" ></text>
</g>
<g >
<title>all (146 samples, 100%)</title><rect x="10.0" y="853" width="1180.0" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="13.00" y="863.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.68%)</title><rect x="761.6" y="325" width="8.1" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="764.64" y="335.5" ></text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::assert_latches_let_distinguish(std::bitset&lt;3ul&gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.68%)</title><rect x="195.9" y="341" width="8.1" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="198.89" y="351.5" ></text>
</g>
<g >
<title>buf_flush_init_for_writing(buf_block_t const*, unsigned char*, void*, unsigned long, bool, bool) (1 samples, 0.68%)</title><rect x="1173.8" y="453" width="8.1" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="1176.84" y="463.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Find_page&gt; &gt;(Iterate&lt;Find_page&gt;&amp;) const (2 samples, 1.37%)</title><rect x="333.3" y="357" width="16.2" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="336.29" y="367.5" ></text>
</g>
<g >
<title>my_b_flush_io_cache(IO_CACHE*, int) (1 samples, 0.68%)</title><rect x="616.2" y="597" width="8.0" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="619.16" y="607.5" ></text>
</g>
<g >
<title>rec_validate(unsigned char const*, unsigned long const*) (1 samples, 0.68%)</title><rect x="414.1" y="437" width="8.1" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="417.11" y="447.5" ></text>
</g>
<g >
<title>buf_page_release_latch(buf_block_t*, unsigned long) (1 samples, 0.68%)</title><rect x="204.0" y="309" width="8.1" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="206.97" y="319.5" ></text>
</g>
<g >
<title>_db_return_(unsigned int, _db_stack_frame_*) (1 samples, 0.68%)</title><rect x="527.3" y="629" width="8.0" height="15.0" fill="rgb(131,131,237)" rx="2" ry="2" />
<text  x="530.26" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;buf_io_fix&gt; std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_M_insert_&lt;buf_io_fix const&amp;, std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_Alloc_node&gt;(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, buf_io_fix const&amp;, std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_Alloc_node&amp;) (1 samples, 0.68%)</title><rect x="826.3" y="117" width="8.1" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="829.30" y="127.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (2 samples, 1.37%)</title><rect x="10.0" y="357" width="16.2" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.68%)</title><rect x="616.2" y="517" width="8.0" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="619.16" y="527.5" ></text>
</g>
<g >
<title>dyn_buf_t&lt;512ul&gt;::block_t::end() (1 samples, 0.68%)</title><rect x="268.6" y="325" width="8.1" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="271.63" y="335.5" ></text>
</g>
<g >
<title>trx_rsegf_get_nth_undo(unsigned char*, unsigned long, mtr_t*) (8 samples, 5.48%)</title><rect x="284.8" y="405" width="64.7" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="287.79" y="415.5" >trx_rse..</text>
</g>
<g >
<title>__ext4_mark_inode_dirty (1 samples, 0.68%)</title><rect x="1157.7" y="245" width="8.1" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="1160.67" y="255.5" ></text>
</g>
<g >
<title>void log_sync_point&lt;31ul&gt;(char const (&amp;) [31ul]) (1 samples, 0.68%)</title><rect x="640.4" y="421" width="8.1" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="643.41" y="431.5" ></text>
</g>
<g >
<title>Table_columns_view&lt;std::function&lt;bool (TABLE const*, unsigned long)&gt; &gt;::init_fields_bitmaps() (1 samples, 0.68%)</title><rect x="147.4" y="533" width="8.1" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="150.40" y="543.5" ></text>
</g>
<g >
<title>std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; std::set_difference&lt;std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; &gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;) (1 samples, 0.68%)</title><rect x="478.8" y="357" width="8.0" height="15.0" fill="rgb(114,114,222)" rx="2" ry="2" />
<text  x="481.77" y="367.5" ></text>
</g>
<g >
<title>std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; std::__copy_move_a2&lt;false, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; &gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;) (1 samples, 0.68%)</title><rect x="826.3" y="213" width="8.1" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="829.30" y="223.5" ></text>
</g>
<g >
<title>_db_return_(unsigned int, _db_stack_frame_*) (1 samples, 0.68%)</title><rect x="155.5" y="597" width="8.1" height="15.0" fill="rgb(131,131,237)" rx="2" ry="2" />
<text  x="158.48" y="607.5" ></text>
</g>
<g >
<title>Write_rows_log_event::binlog_row_logging_function(THD*, TABLE*, bool, unsigned char const*, unsigned char const*) (2 samples, 1.37%)</title><rect x="98.9" y="629" width="16.2" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="101.90" y="639.5" ></text>
</g>
<g >
<title>Space_Ids::contains(unsigned int) (1 samples, 0.68%)</title><rect x="494.9" y="405" width="8.1" height="15.0" fill="rgb(82,82,191)" rx="2" ry="2" />
<text  x="497.93" y="415.5" ></text>
</g>
<g >
<title>ip_finish_output2 (3 samples, 2.05%)</title><rect x="10.0" y="581" width="24.2" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="13.00" y="591.5" >i..</text>
</g>
<g >
<title>MYSQL_BIN_LOG::write_transaction(THD*, binlog_cache_data*, Binlog_event_writer*) (1 samples, 0.68%)</title><rect x="907.1" y="581" width="8.1" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="910.12" y="591.5" ></text>
</g>
<g >
<title>mtr_t::memo_push(void*, mtr_memo_type_t) (1 samples, 0.68%)</title><rect x="349.5" y="325" width="8.0" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="352.45" y="335.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void (*&amp;)(log_t*), log_t*&amp;&gt;(std::__invoke_other, void (*&amp;)(log_t*), log_t*&amp;) (1 samples, 0.68%)</title><rect x="1117.3" y="613" width="8.0" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="1120.26" y="623.5" ></text>
</g>
<g >
<title>Double_write::submit(buf_flush_t, buf_page_t*, file::Block const*) (1 samples, 0.68%)</title><rect x="1181.9" y="437" width="8.1" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="1184.92" y="447.5" ></text>
</g>
<g >
<title>rec_get_next_offs(unsigned char const*, unsigned long) (1 samples, 0.68%)</title><rect x="1181.9" y="357" width="8.1" height="15.0" fill="rgb(83,83,192)" rx="2" ry="2" />
<text  x="1184.92" y="367.5" ></text>
</g>
<g >
<title>fil_space_get_page_size(unsigned int, bool*) (1 samples, 0.68%)</title><rect x="494.9" y="469" width="8.1" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="497.93" y="479.5" ></text>
</g>
<g >
<title>page_size_t::logical() const (1 samples, 0.68%)</title><rect x="341.4" y="309" width="8.1" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="344.37" y="319.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.68%)</title><rect x="616.2" y="533" width="8.0" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="619.16" y="543.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (1 samples, 0.68%)</title><rect x="705.1" y="421" width="8.1" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="708.07" y="431.5" ></text>
</g>
<g >
<title>store_token(sql_digest_storage*, unsigned int) (1 samples, 0.68%)</title><rect x="1109.2" y="597" width="8.1" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="1112.18" y="607.5" ></text>
</g>
<g >
<title>jbd2_journal_stop (1 samples, 0.68%)</title><rect x="616.2" y="373" width="8.0" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="619.16" y="383.5" ></text>
</g>
<g >
<title>trx_rsegf_get_nth_undo(unsigned char*, unsigned long, mtr_t*) (6 samples, 4.11%)</title><rect x="777.8" y="453" width="48.5" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="780.81" y="463.5" >trx_..</text>
</g>
<g >
<title>std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; std::copy&lt;std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; &gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;) (1 samples, 0.68%)</title><rect x="826.3" y="261" width="8.1" height="15.0" fill="rgb(81,81,191)" rx="2" ry="2" />
<text  x="829.30" y="271.5" ></text>
</g>
<g >
<title>(anonymous namespace)::Row_data_memory::max_row_length(TABLE*, unsigned char const*, unsigned long long) (1 samples, 0.68%)</title><rect x="98.9" y="581" width="8.1" height="15.0" fill="rgb(86,86,196)" rx="2" ry="2" />
<text  x="101.90" y="591.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt;::operator()() (2 samples, 1.37%)</title><rect x="1173.8" y="741" width="16.2" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="1176.84" y="751.5" ></text>
</g>
<g >
<title>Iterate&lt;Find_page&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (1 samples, 0.68%)</title><rect x="923.3" y="501" width="8.1" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="926.29" y="511.5" ></text>
</g>
<g >
<title>Iterate&lt;Find_page&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (2 samples, 1.37%)</title><rect x="753.6" y="373" width="16.1" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="756.56" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;buf_io_fix&gt; std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_M_insert_unique_&lt;buf_io_fix const&amp;&gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, buf_io_fix const&amp;) (1 samples, 0.68%)</title><rect x="478.8" y="213" width="8.0" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="481.77" y="223.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (1 samples, 0.68%)</title><rect x="228.2" y="389" width="8.1" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="231.22" y="399.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.68%)</title><rect x="1117.3" y="821" width="8.0" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="1120.26" y="831.5" ></text>
</g>
<g >
<title>AutoDebugTrace::~AutoDebugTrace() (1 samples, 0.68%)</title><rect x="397.9" y="501" width="8.1" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="400.95" y="511.5" ></text>
</g>
<g >
<title>Binlog_cache_storage::copy_to(Basic_ostream*, bool*) (1 samples, 0.68%)</title><rect x="907.1" y="533" width="8.1" height="15.0" fill="rgb(136,136,241)" rx="2" ry="2" />
<text  x="910.12" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.68%)</title><rect x="608.1" y="565" width="8.1" height="15.0" fill="rgb(107,107,215)" rx="2" ry="2" />
<text  x="611.08" y="575.5" ></text>
</g>
<g >
<title>rw_lock_add_debug_info(rw_lock_t*, unsigned long, unsigned long, ut::Location) (1 samples, 0.68%)</title><rect x="446.4" y="405" width="8.1" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="449.44" y="415.5" ></text>
</g>
<g >
<title>do_softirq (3 samples, 2.05%)</title><rect x="10.0" y="549" width="24.2" height="15.0" fill="rgb(110,110,217)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >d..</text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void (*&amp;)(log_t*), log_t*&amp;&gt;(std::__invoke_other, void (*&amp;)(log_t*), log_t*&amp;) (3 samples, 2.05%)</title><rect x="1141.5" y="613" width="24.3" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="1144.51" y="623.5" >v..</text>
</g>
<g >
<title>dd::cache::Object_registry::m_map(dd::cache::Object_registry::Type_selector&lt;dd::Event&gt;) (1 samples, 0.68%)</title><rect x="575.8" y="629" width="8.0" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="578.75" y="639.5" ></text>
</g>
<g >
<title>row_insert_for_mysql(unsigned char const*, row_prebuilt_t*) (45 samples, 30.82%)</title><rect x="163.6" y="629" width="363.7" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="166.56" y="639.5" >row_insert_for_mysql(unsigned char const*, row_pr..</text>
</g>
<g >
<title>std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_M_destroy_node(std::_Rb_tree_node&lt;buf_io_fix&gt;*) (1 samples, 0.68%)</title><rect x="195.9" y="245" width="8.1" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="198.89" y="255.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.68%)</title><rect x="1165.8" y="693" width="8.0" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="1168.75" y="703.5" ></text>
</g>
<g >
<title>log_files_governor(log_t*) (1 samples, 0.68%)</title><rect x="1117.3" y="597" width="8.0" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="1120.26" y="607.5" ></text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.68%)</title><rect x="228.2" y="277" width="8.1" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="231.22" y="287.5" ></text>
</g>
<g >
<title>Binlog_event_writer::write(unsigned char const*, unsigned long long) (1 samples, 0.68%)</title><rect x="907.1" y="501" width="8.1" height="15.0" fill="rgb(81,81,191)" rx="2" ry="2" />
<text  x="910.12" y="511.5" ></text>
</g>
<g >
<title>page_id_t::hash() const (1 samples, 0.68%)</title><rect x="705.1" y="325" width="8.1" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="708.07" y="335.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;Detached_thread, void (*)(log_t*), log_t*&gt;::type std::__invoke&lt;Detached_thread, void (*)(log_t*), log_t*&gt;(Detached_thread&amp;&amp;, void (*&amp;&amp;)(log_t*), log_t*&amp;&amp;) (1 samples, 0.68%)</title><rect x="1125.3" y="709" width="8.1" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="1128.34" y="719.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (7 samples, 4.79%)</title><rect x="446.4" y="485" width="56.6" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="449.44" y="495.5" >buf_p..</text>
</g>
<g >
<title>trx_rseg_t::unlatch() (10 samples, 6.85%)</title><rect x="284.8" y="437" width="80.8" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="287.79" y="447.5" >trx_rseg_..</text>
</g>
<g >
<title>buf_flush_batch(buf_pool_t*, buf_flush_t, unsigned long, unsigned long) (2 samples, 1.37%)</title><rect x="1173.8" y="549" width="16.2" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="1176.84" y="559.5" ></text>
</g>
<g >
<title>buf_page_t::is_io_fix_write() const (3 samples, 2.05%)</title><rect x="470.7" y="421" width="24.2" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="473.68" y="431.5" >b..</text>
</g>
<g >
<title>ha_prepare_low(THD*, bool) (24 samples, 16.44%)</title><rect x="915.2" y="661" width="194.0" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="918.21" y="671.5" >ha_prepare_low(THD*, bool)</text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::trylock(char const*, unsigned int) (1 samples, 0.68%)</title><rect x="503.0" y="405" width="8.1" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="506.01" y="415.5" ></text>
</g>
<g >
<title>THD::decide_logging_format(Table_ref*) (1 samples, 0.68%)</title><rect x="527.3" y="677" width="8.0" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="530.26" y="687.5" ></text>
</g>
<g >
<title>log_buffer_write(log_t&amp;, unsigned char const*, unsigned long, unsigned long) (1 samples, 0.68%)</title><rect x="640.4" y="437" width="8.1" height="15.0" fill="rgb(123,123,230)" rx="2" ry="2" />
<text  x="643.41" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void (*&amp;)()&gt;::type std::__invoke&lt;void (*&amp;)()&gt;(void (*&amp;)()) (2 samples, 1.37%)</title><rect x="1173.8" y="629" width="16.2" height="15.0" fill="rgb(108,108,215)" rx="2" ry="2" />
<text  x="1176.84" y="639.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.68%)</title><rect x="891.0" y="517" width="8.0" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="893.96" y="527.5" ></text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::assert_latches_let_distinguish(std::bitset&lt;3ul&gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.68%)</title><rect x="470.7" y="373" width="8.1" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="473.68" y="383.5" ></text>
</g>
<g >
<title>trx_release_impl_and_expl_locks(trx_t*, bool)::{lambda(Trx_by_id_with_min&amp;)#2}::operator()(Trx_by_id_with_min&amp;) const (1 samples, 0.68%)</title><rect x="664.7" y="453" width="8.0" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="667.66" y="463.5" ></text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(TTASEventMutex&lt;GenericPolicy&gt; const&amp;, char const*, unsigned long) (1 samples, 0.68%)</title><rect x="228.2" y="229" width="8.1" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="231.22" y="239.5" ></text>
</g>
<g >
<title>crc32c_pcl_intel_update (1 samples, 0.68%)</title><rect x="1157.7" y="149" width="8.1" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="1160.67" y="159.5" ></text>
</g>
<g >
<title>trx_undo_page_get(page_id_t const&amp;, page_size_t const&amp;, mtr_t*) (2 samples, 1.37%)</title><rect x="349.5" y="405" width="16.1" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="352.45" y="415.5" ></text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::complement(std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.68%)</title><rect x="470.7" y="341" width="8.1" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="473.68" y="351.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.68%)</title><rect x="1117.3" y="789" width="8.0" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="1120.26" y="799.5" ></text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (1 samples, 0.68%)</title><rect x="931.4" y="485" width="8.1" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="934.37" y="495.5" ></text>
</g>
<g >
<title>trx_release_impl_and_expl_locks(trx_t*, bool) (2 samples, 1.37%)</title><rect x="664.7" y="485" width="16.1" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="667.66" y="495.5" ></text>
</g>
<g >
<title>pfs_spawn_thread (131 samples, 89.73%)</title><rect x="58.5" y="805" width="1058.8" height="15.0" fill="rgb(81,81,190)" rx="2" ry="2" />
<text  x="61.49" y="815.5" >pfs_spawn_thread</text>
</g>
<g >
<title>ha_commit_trans(THD*, bool, bool) (65 samples, 44.52%)</title><rect x="583.8" y="693" width="525.4" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="586.84" y="703.5" >ha_commit_trans(THD*, bool, bool)</text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (3 samples, 2.05%)</title><rect x="1084.9" y="517" width="24.3" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="1087.93" y="527.5" >B..</text>
</g>
<g >
<title>std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; std::set_difference&lt;std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; &gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;) (1 samples, 0.68%)</title><rect x="826.3" y="293" width="8.1" height="15.0" fill="rgb(114,114,222)" rx="2" ry="2" />
<text  x="829.30" y="303.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::is_owned() const (1 samples, 0.68%)</title><rect x="381.8" y="341" width="8.1" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="384.78" y="351.5" ></text>
</g>
<g >
<title>page_cur_search_with_match(buf_block_t const*, dict_index_t const*, dtuple_t const*, page_cur_mode_t, unsigned long*, unsigned long*, page_cur_t*, rtr_info*) (1 samples, 0.68%)</title><rect x="511.1" y="485" width="8.1" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="514.10" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;mtr_t const*, mtr_t const*, ut::allocator&lt;mtr_t const*, ut::detail::allocator_base_pfs&lt;mtr_t const*&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;mtr_t const*&gt;, std::hash&lt;mtr_t const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_node(unsigned long, mtr_t const* const&amp;, unsigned long) const (1 samples, 0.68%)</title><rect x="697.0" y="373" width="8.1" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="699.99" y="383.5" ></text>
</g>
<g >
<title>ha_innobase::write_row(unsigned char*) (46 samples, 31.51%)</title><rect x="155.5" y="645" width="371.8" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="158.48" y="655.5" >ha_innobase::write_row(unsigned char*)</text>
</g>
<g >
<title>Commit_stage_manager::enroll_for(Commit_stage_manager::StageID, THD*, mysql_mutex_t*, mysql_mutex_t*) (1 samples, 0.68%)</title><rect x="608.1" y="629" width="8.1" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="611.08" y="639.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 2.05%)</title><rect x="10.0" y="789" width="24.2" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="13.00" y="799.5" >e..</text>
</g>
<g >
<title>buf_page_t::is_dirty() const (1 samples, 0.68%)</title><rect x="1060.7" y="453" width="8.1" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="1063.68" y="463.5" ></text>
</g>
<g >
<title>std::atomic&lt;srv_shutdown_t&gt;::load(std::memory_order) const (1 samples, 0.68%)</title><rect x="632.3" y="533" width="8.1" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="635.33" y="543.5" ></text>
</g>
<g >
<title>Table_columns_view&lt;std::function&lt;bool (TABLE const*, unsigned long)&gt; &gt;::init_fields_bitmaps() (1 samples, 0.68%)</title><rect x="98.9" y="549" width="8.1" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="101.90" y="559.5" ></text>
</g>
<g >
<title>rec_get_status(unsigned char const*) (1 samples, 0.68%)</title><rect x="519.2" y="453" width="8.1" height="15.0" fill="rgb(97,97,206)" rx="2" ry="2" />
<text  x="522.18" y="463.5" ></text>
</g>
<g >
<title>buf_page_hash_get_low(buf_pool_t*, page_id_t const&amp;) (1 samples, 0.68%)</title><rect x="729.3" y="341" width="8.1" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="732.32" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.68%)</title><rect x="1165.8" y="789" width="8.0" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="1168.75" y="799.5" ></text>
</g>
<g >
<title>std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; std::copy&lt;std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; &gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;) (1 samples, 0.68%)</title><rect x="478.8" y="325" width="8.0" height="15.0" fill="rgb(81,81,191)" rx="2" ry="2" />
<text  x="481.77" y="335.5" ></text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::assert_latches_let_distinguish(std::bitset&lt;3ul&gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.68%)</title><rect x="1068.8" y="421" width="8.0" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="1071.77" y="431.5" ></text>
</g>
<g >
<title>row_ins_sec_index_entry(dict_index_t*, dtuple_t*, que_thr_t*, bool) (16 samples, 10.96%)</title><rect x="397.9" y="533" width="129.4" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="400.95" y="543.5" >row_ins_sec_inde..</text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;buf_io_fix&gt; std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_M_insert_unique_&lt;buf_io_fix const&amp;, std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_Alloc_node&gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, buf_io_fix const&amp;, std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_Alloc_node&amp;) (1 samples, 0.68%)</title><rect x="826.3" y="133" width="8.1" height="15.0" fill="rgb(95,95,204)" rx="2" ry="2" />
<text  x="829.30" y="143.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::exit() (1 samples, 0.68%)</title><rect x="939.5" y="437" width="8.0" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="942.45" y="447.5" ></text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(TTASEventMutex&lt;GenericPolicy&gt; const&amp;, char const*, unsigned long) (1 samples, 0.68%)</title><rect x="503.0" y="389" width="8.1" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="506.01" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.68%)</title><rect x="58.5" y="597" width="8.1" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="61.49" y="607.5" ></text>
</g>
<g >
<title>buf_flush_page(buf_pool_t*, buf_page_t*, buf_flush_t, bool) (2 samples, 1.37%)</title><rect x="1173.8" y="485" width="16.2" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="1176.84" y="495.5" ></text>
</g>
<g >
<title>trx_rsegf_get_nth_undo(unsigned char*, unsigned long, mtr_t*) (4 samples, 2.74%)</title><rect x="737.4" y="437" width="32.3" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="740.40" y="447.5" >tr..</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2 samples, 1.37%)</title><rect x="10.0" y="325" width="16.2" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>Wait_stats os_event_wait_for&lt;log_write_notifier(log_t*)::{lambda(bool)#1}&gt;(os_event*&amp;, unsigned long, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;, log_write_notifier(log_t*)::{lambda(bool)#1}) (1 samples, 0.68%)</title><rect x="1125.3" y="565" width="8.1" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="1128.34" y="575.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;Detached_thread, void (*)(log_t*), log_t*&gt;::type std::__invoke&lt;Detached_thread, void (*)(log_t*), log_t*&gt;(Detached_thread&amp;&amp;, void (*&amp;&amp;)(log_t*), log_t*&amp;&amp;) (1 samples, 0.68%)</title><rect x="1117.3" y="709" width="8.0" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="1120.26" y="719.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt; &gt;::_M_run() (2 samples, 1.37%)</title><rect x="1173.8" y="757" width="16.2" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="1176.84" y="767.5" ></text>
</g>
<g >
<title>rw_lock_s_unlock_gen(rw_lock_t*, unsigned long) (1 samples, 0.68%)</title><rect x="996.0" y="421" width="8.1" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="999.03" y="431.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Find_page&gt; &gt;(Iterate&lt;Find_page&gt;&amp;) const (1 samples, 0.68%)</title><rect x="1020.3" y="517" width="8.1" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="1023.27" y="527.5" ></text>
</g>
<g >
<title>my_net_read(NET*) (1 samples, 0.68%)</title><rect x="58.5" y="725" width="8.1" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="61.49" y="735.5" ></text>
</g>
<g >
<title>ha_chain_get_first(hash_table_t*, unsigned long) (1 samples, 0.68%)</title><rect x="373.7" y="421" width="8.1" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="376.70" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;mtr_t const*, mtr_t const*, std::__detail::_Identity, std::equal_to&lt;mtr_t const*&gt;, std::hash&lt;mtr_t const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_equals(mtr_t const* const&amp;, unsigned long, std::__detail::_Hash_node_value&lt;mtr_t const*, false&gt; const&amp;) const (1 samples, 0.68%)</title><rect x="697.0" y="341" width="8.1" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="699.99" y="351.5" ></text>
</g>
<g >
<title>mtr_t::memo_contains_page_flagged(unsigned char const*, unsigned long) const (3 samples, 2.05%)</title><rect x="1028.4" y="517" width="24.2" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="1031.36" y="527.5" >m..</text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (3 samples, 2.05%)</title><rect x="745.5" y="421" width="24.2" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="748.48" y="431.5" >m..</text>
</g>
<g >
<title>check_record(THD*, mem_root_deque&lt;Item*&gt; const&amp;) (1 samples, 0.68%)</title><rect x="90.8" y="661" width="8.1" height="15.0" fill="rgb(136,136,241)" rx="2" ry="2" />
<text  x="93.82" y="671.5" ></text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::complement(std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.68%)</title><rect x="478.8" y="373" width="8.0" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="481.77" y="383.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Find_page&gt; &gt;(Iterate&lt;Find_page&gt;&amp;) const (3 samples, 2.05%)</title><rect x="955.6" y="501" width="24.3" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="958.62" y="511.5" >b..</text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::is_owned() const (1 samples, 0.68%)</title><rect x="462.6" y="293" width="8.1" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="465.60" y="303.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt;::operator()() (1 samples, 0.68%)</title><rect x="1125.3" y="741" width="8.1" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="1128.34" y="751.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (1 samples, 0.68%)</title><rect x="1165.8" y="661" width="8.0" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="1168.75" y="671.5" ></text>
</g>
<g >
<title>handle_connection (131 samples, 89.73%)</title><rect x="58.5" y="789" width="1058.8" height="15.0" fill="rgb(97,97,206)" rx="2" ry="2" />
<text  x="61.49" y="799.5" >handle_connection</text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (6 samples, 4.11%)</title><rect x="301.0" y="389" width="48.5" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="303.96" y="399.5" >mtr_..</text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::lookup() (1 samples, 0.68%)</title><rect x="729.3" y="357" width="8.1" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="732.32" y="367.5" ></text>
</g>
<g >
<title>pfs_rw_lock_x_unlock_func(unsigned long, rw_lock_t*) (1 samples, 0.68%)</title><rect x="1004.1" y="405" width="8.1" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="1007.11" y="415.5" ></text>
</g>
<g >
<title>jbd2_journal_stop (1 samples, 0.68%)</title><rect x="616.2" y="357" width="8.0" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="619.16" y="367.5" ></text>
</g>
<g >
<title>rw_lock_s_lock_gen(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.68%)</title><rect x="446.4" y="437" width="8.1" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="449.44" y="447.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt; &gt;::~_State_impl() (1 samples, 0.68%)</title><rect x="1125.3" y="805" width="8.1" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="1128.34" y="815.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::exit() (1 samples, 0.68%)</title><rect x="931.4" y="405" width="8.1" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="934.37" y="415.5" ></text>
</g>
<g >
<title>lock_trx_release_locks(trx_t*) (1 samples, 0.68%)</title><rect x="672.7" y="469" width="8.1" height="15.0" fill="rgb(131,131,237)" rx="2" ry="2" />
<text  x="675.74" y="479.5" ></text>
</g>
<g >
<title>locksys::rec_queue_latch_and_validate(buf_block_t const*, unsigned char const*, dict_index_t const*, unsigned long const*) (1 samples, 0.68%)</title><rect x="406.0" y="453" width="8.1" height="15.0" fill="rgb(86,86,196)" rx="2" ry="2" />
<text  x="409.03" y="463.5" ></text>
</g>
<g >
<title>rw_lock_add_debug_info(rw_lock_t*, unsigned long, unsigned long, ut::Location) (1 samples, 0.68%)</title><rect x="931.4" y="421" width="8.1" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="934.37" y="431.5" ></text>
</g>
<g >
<title>parse_sql(THD*, Parser_state*, Object_creation_ctx*) (1 samples, 0.68%)</title><rect x="1109.2" y="725" width="8.1" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="1112.18" y="735.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::prepare(THD*, bool) (24 samples, 16.44%)</title><rect x="915.2" y="677" width="194.0" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="918.21" y="687.5" >MYSQL_BIN_LOG::prepare(TH..</text>
</g>
<g >
<title>ksys_write (3 samples, 2.05%)</title><rect x="10.0" y="757" width="24.2" height="15.0" fill="rgb(88,88,198)" rx="2" ry="2" />
<text  x="13.00" y="767.5" >k..</text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;mtr_t const*&gt;::_M_ptr() const (1 samples, 0.68%)</title><rect x="697.0" y="309" width="8.1" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="699.99" y="319.5" ></text>
</g>
<g >
<title>__x64_sys_futex (1 samples, 0.68%)</title><rect x="1133.4" y="773" width="8.1" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="1136.42" y="783.5" ></text>
</g>
<g >
<title>btr_search_info_update(btr_cur_t*) (1 samples, 0.68%)</title><rect x="438.4" y="485" width="8.0" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="441.36" y="495.5" ></text>
</g>
<g >
<title>vfs_write (1 samples, 0.68%)</title><rect x="616.2" y="485" width="8.0" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="619.16" y="495.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::mtr_add_page(buf_block_t*) (1 samples, 0.68%)</title><rect x="349.5" y="341" width="8.0" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="352.45" y="351.5" ></text>
</g>
<g >
<title>code_state() (1 samples, 0.68%)</title><rect x="551.5" y="661" width="8.1" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="554.51" y="671.5" ></text>
</g>
<g >
<title>native_rw_unlock(pthread_rwlock_t*) (1 samples, 0.68%)</title><rect x="527.3" y="597" width="8.0" height="15.0" fill="rgb(87,87,197)" rx="2" ry="2" />
<text  x="530.26" y="607.5" ></text>
</g>
<g >
<title>futex_wait (1 samples, 0.68%)</title><rect x="1165.8" y="741" width="8.0" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="1168.75" y="751.5" ></text>
</g>
<g >
<title>Double_write::check_block(buf_block_t const*) (1 samples, 0.68%)</title><rect x="1181.9" y="389" width="8.1" height="15.0" fill="rgb(97,97,205)" rx="2" ry="2" />
<text  x="1184.92" y="399.5" ></text>
</g>
<g >
<title>trx_rsegf_get_nth_undo(unsigned char*, unsigned long, mtr_t*) (6 samples, 4.11%)</title><rect x="236.3" y="405" width="48.5" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="239.30" y="415.5" >trx_..</text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.68%)</title><rect x="939.5" y="485" width="8.0" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="942.45" y="495.5" ></text>
</g>
<g >
<title>Iterate&lt;Find_page&gt;::Iterate(Find_page&amp;) (1 samples, 0.68%)</title><rect x="252.5" y="357" width="8.0" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="255.47" y="367.5" ></text>
</g>
<g >
<title>__strchr_avx2 (1 samples, 0.68%)</title><rect x="74.7" y="741" width="8.0" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="77.66" y="751.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (2 samples, 1.37%)</title><rect x="1060.7" y="501" width="16.1" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="1063.68" y="511.5" ></text>
</g>
<g >
<title>trx_rseg_t::latch() (10 samples, 6.85%)</title><rect x="204.0" y="437" width="80.8" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="206.97" y="447.5" >trx_rseg_..</text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (3 samples, 2.05%)</title><rect x="179.7" y="437" width="24.3" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="182.73" y="447.5" >B..</text>
</g>
<g >
<title>trx_undo_page_get(page_id_t const&amp;, page_size_t const&amp;, mtr_t*) (1 samples, 0.68%)</title><rect x="729.3" y="437" width="8.1" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="732.32" y="447.5" ></text>
</g>
<g >
<title>buf_page_release_latch(buf_block_t*, unsigned long) (2 samples, 1.37%)</title><rect x="680.8" y="341" width="16.2" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="683.82" y="351.5" ></text>
</g>
<g >
<title>buf_validate() (1 samples, 0.68%)</title><rect x="195.9" y="421" width="8.1" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="198.89" y="431.5" ></text>
</g>
<g >
<title>ut::hash_uint64_pair(unsigned long, unsigned long) (1 samples, 0.68%)</title><rect x="705.1" y="309" width="8.1" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="708.07" y="319.5" ></text>
</g>
<g >
<title>gtid_pre_statement_post_implicit_commit_checks(THD*) (1 samples, 0.68%)</title><rect x="551.5" y="709" width="8.1" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="554.51" y="719.5" ></text>
</g>
<g >
<title>buf_validate() (2 samples, 1.37%)</title><rect x="1060.7" y="485" width="16.1" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="1063.68" y="495.5" ></text>
</g>
<g >
<title>Iterate&lt;Find_page&gt;::Iterate(Find_page&amp;) (1 samples, 0.68%)</title><rect x="325.2" y="357" width="8.1" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="328.21" y="367.5" ></text>
</g>
<g >
<title>os_file_pwrite(IORequest&amp;, int, unsigned char const*, unsigned long, unsigned long, dberr_t*, file::Block const*) (2 samples, 1.37%)</title><rect x="1149.6" y="453" width="16.2" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="1152.59" y="463.5" ></text>
</g>
<g >
<title>copy_user_generic_string (1 samples, 0.68%)</title><rect x="1133.4" y="725" width="8.1" height="15.0" fill="rgb(87,87,197)" rx="2" ry="2" />
<text  x="1136.42" y="735.5" ></text>
</g>
<g >
<title>ext4_buffered_write_iter (1 samples, 0.68%)</title><rect x="1157.7" y="325" width="8.1" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="1160.67" y="335.5" ></text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (5 samples, 3.42%)</title><rect x="737.4" y="453" width="40.4" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="740.40" y="463.5" >trx..</text>
</g>
<g >
<title>vfs_write (3 samples, 2.05%)</title><rect x="10.0" y="741" width="24.2" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="13.00" y="751.5" >v..</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt; &gt;::_M_run() (1 samples, 0.68%)</title><rect x="1125.3" y="757" width="8.1" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="1128.34" y="767.5" ></text>
</g>
<g >
<title>rec_offs_validate(unsigned char const*, dict_index_t const*, unsigned long const*) (1 samples, 0.68%)</title><rect x="430.3" y="453" width="8.1" height="15.0" fill="rgb(96,96,204)" rx="2" ry="2" />
<text  x="433.27" y="463.5" ></text>
</g>
<g >
<title>crc32_z (1 samples, 0.68%)</title><rect x="907.1" y="469" width="8.1" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="910.12" y="479.5" ></text>
</g>
<g >
<title>unlikely(bool) (3 samples, 2.05%)</title><rect x="794.0" y="357" width="24.2" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="796.97" y="367.5" >u..</text>
</g>
<g >
<title>page_align(void const*) (1 samples, 0.68%)</title><rect x="511.1" y="421" width="8.1" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="514.10" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::find(buf_io_fix const&amp;) const (1 samples, 0.68%)</title><rect x="1101.1" y="357" width="8.1" height="15.0" fill="rgb(99,99,208)" rx="2" ry="2" />
<text  x="1104.10" y="367.5" ></text>
</g>
<g >
<title>buf_page_t::Latching_rules_helpers::assert_latches_let_distinguish(buf_page_t const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) (2 samples, 1.37%)</title><rect x="470.7" y="405" width="16.1" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="473.68" y="415.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.68%)</title><rect x="422.2" y="405" width="8.1" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="425.19" y="415.5" ></text>
</g>
<g >
<title>void Detached_thread::operator()&lt;void (*)(log_t*), log_t*&gt;(void (*&amp;&amp;)(log_t*), log_t*&amp;&amp;) (3 samples, 2.05%)</title><rect x="1141.5" y="677" width="24.3" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="1144.51" y="687.5" >v..</text>
</g>
<g >
<title>auto locksys::latch_peeked_shard_and_do&lt;locksys::try_relatch_trx_and_shard_and_do&lt;locksys::try_release_all_locks(trx_t*)::{lambda()#1}&gt;(ib_lock_t const*, locksys::try_release_all_locks(trx_t*)::{lambda()#1}&amp;&amp;)::{lambda()#1}&gt;(ib_lock_t const*, locksys::try_release_all_locks(trx_t*)::{lambda()#1}&amp;&amp;) (1 samples, 0.68%)</title><rect x="672.7" y="421" width="8.1" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="675.74" y="431.5" ></text>
</g>
<g >
<title>rw_lock_remove_debug_info(rw_lock_t*, unsigned long, unsigned long) (2 samples, 1.37%)</title><rect x="680.8" y="261" width="16.2" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="683.82" y="271.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void (*(log_t*))(log_t*)&gt;::__call&lt;void, , 0ul&gt;(std::tuple&lt;&gt;&amp;&amp;, std::_Index_tuple&lt;0ul&gt;) (1 samples, 0.68%)</title><rect x="1117.3" y="645" width="8.0" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="1120.26" y="655.5" ></text>
</g>
<g >
<title>trx_undo_report_row_operation(unsigned long, unsigned long, que_thr_t*, dict_index_t*, dtuple_t const*, upd_t const*, unsigned long, unsigned char const*, unsigned long const*, unsigned long*) (23 samples, 15.75%)</title><rect x="179.7" y="469" width="185.9" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="182.73" y="479.5" >trx_undo_report_row_oper..</text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (2 samples, 1.37%)</title><rect x="931.4" y="501" width="16.1" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="934.37" y="511.5" ></text>
</g>
<g >
<title>trx_prepare_low(trx_t*, trx_undo_ptr_t*, bool) (23 samples, 15.75%)</title><rect x="923.3" y="597" width="185.9" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="926.29" y="607.5" >trx_prepare_low(trx_t*, ..</text>
</g>
<g >
<title>Iterate&lt;Release_all&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (2 samples, 1.37%)</title><rect x="680.8" y="389" width="16.2" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="683.82" y="399.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (2 samples, 1.37%)</title><rect x="381.8" y="437" width="16.1" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="384.78" y="447.5" ></text>
</g>
<g >
<title>inline_mysql_file_write(char const*, unsigned int, int, unsigned char const*, unsigned long, int) (1 samples, 0.68%)</title><rect x="616.2" y="565" width="8.0" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="619.16" y="575.5" ></text>
</g>
<g >
<title>row_ins_sec_index_entry_low(unsigned int, unsigned long, dict_index_t*, mem_block_info_t*, mem_block_info_t*, dtuple_t*, unsigned long, que_thr_t*, bool) (16 samples, 10.96%)</title><rect x="397.9" y="517" width="129.4" height="15.0" fill="rgb(110,110,217)" rx="2" ry="2" />
<text  x="400.95" y="527.5" >row_ins_sec_inde..</text>
</g>
<g >
<title>__local_bh_enable_ip (3 samples, 2.05%)</title><rect x="10.0" y="565" width="24.2" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="13.00" y="575.5" >_..</text>
</g>
<g >
<title>std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_M_erase(std::_Rb_tree_node&lt;buf_io_fix&gt;*) (1 samples, 0.68%)</title><rect x="195.9" y="277" width="8.1" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="198.89" y="287.5" ></text>
</g>
<g >
<title>buf_page_t::is_io_fix_write() const (1 samples, 0.68%)</title><rect x="1068.8" y="453" width="8.0" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="1071.77" y="463.5" ></text>
</g>
<g >
<title>MDL_context::release_lock(enum_mdl_duration, MDL_ticket*) (1 samples, 0.68%)</title><rect x="600.0" y="661" width="8.1" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="603.00" y="671.5" ></text>
</g>
<g >
<title>ib_log_files_g (1 samples, 0.68%)</title><rect x="1117.3" y="837" width="8.0" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="1120.26" y="847.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;dd::cache::Local_multi_map&lt;dd::Event&gt;, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Event&gt; &gt; &gt;::_M_ptr() const (1 samples, 0.68%)</title><rect x="575.8" y="581" width="8.0" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="578.75" y="591.5" ></text>
</g>
<g >
<title>rw_lock_x_unlock(rw_lock_t*) (1 samples, 0.68%)</title><rect x="1004.1" y="437" width="8.1" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="1007.11" y="447.5" ></text>
</g>
<g >
<title>net_read_uncompressed_packet(NET*, unsigned long&amp;) (1 samples, 0.68%)</title><rect x="58.5" y="709" width="8.1" height="15.0" fill="rgb(85,85,195)" rx="2" ry="2" />
<text  x="61.49" y="719.5" ></text>
</g>
<g >
<title>Iterate&lt;Find_page&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (3 samples, 2.05%)</title><rect x="260.5" y="341" width="24.3" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="263.55" y="351.5" >I..</text>
</g>
<g >
<title>__tcp_push_pending_frames (3 samples, 2.05%)</title><rect x="10.0" y="645" width="24.2" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >_..</text>
</g>
<g >
<title>poll_select_finish (1 samples, 0.68%)</title><rect x="58.5" y="549" width="8.1" height="15.0" fill="rgb(111,111,219)" rx="2" ry="2" />
<text  x="61.49" y="559.5" ></text>
</g>
<g >
<title>connection (137 samples, 93.84%)</title><rect x="10.0" y="837" width="1107.3" height="15.0" fill="rgb(120,120,226)" rx="2" ry="2" />
<text  x="13.00" y="847.5" >connection</text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.68%)</title><rect x="511.1" y="389" width="8.1" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="514.10" y="399.5" ></text>
</g>
<g >
<title>rw_lock_s_unlock(rw_lock_t*) (1 samples, 0.68%)</title><rect x="996.0" y="437" width="8.1" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="999.03" y="447.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (3 samples, 2.05%)</title><rect x="1084.9" y="549" width="24.3" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="1087.93" y="559.5" >b..</text>
</g>
<g >
<title>_db_keyword_(CODE_STATE*, char const*, int) (1 samples, 0.68%)</title><rect x="640.4" y="405" width="8.1" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="643.41" y="415.5" ></text>
</g>
<g >
<title>void Detached_thread::operator()&lt;void (*)(log_t*), log_t*&gt;(void (*&amp;&amp;)(log_t*), log_t*&amp;&amp;) (1 samples, 0.68%)</title><rect x="1117.3" y="677" width="8.0" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="1120.26" y="687.5" ></text>
</g>
<g >
<title>rw_lock_x_lock_gen(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.68%)</title><rect x="228.2" y="325" width="8.1" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="231.22" y="335.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void (*(log_t*))(log_t*)&gt;::operator()&lt;, void&gt;() (1 samples, 0.68%)</title><rect x="1117.3" y="661" width="8.0" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="1120.26" y="671.5" ></text>
</g>
<g >
<title>_db_return_(unsigned int, _db_stack_frame_*) (1 samples, 0.68%)</title><rect x="397.9" y="485" width="8.1" height="15.0" fill="rgb(131,131,237)" rx="2" ry="2" />
<text  x="400.95" y="495.5" ></text>
</g>
<g >
<title>trx_undo_set_state_at_prepare(trx_t*, trx_undo_t*, bool, mtr_t*) (3 samples, 2.05%)</title><rect x="1084.9" y="581" width="24.3" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="1087.93" y="591.5" >t..</text>
</g>
<g >
<title>MYSQL_BIN_LOG::process_commit_stage_queue(THD*, THD*) (35 samples, 23.97%)</title><rect x="624.2" y="645" width="282.9" height="15.0" fill="rgb(110,110,217)" rx="2" ry="2" />
<text  x="627.25" y="655.5" >MYSQL_BIN_LOG::process_commit_stage_q..</text>
</g>
<g >
<title>void std::_Bind&lt;void (*(log_t*))(log_t*)&gt;::operator()&lt;, void&gt;() (1 samples, 0.68%)</title><rect x="1125.3" y="661" width="8.1" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="1128.34" y="671.5" ></text>
</g>
<g >
<title>lex_one_token(Lexer_yystype*, THD*) (1 samples, 0.68%)</title><rect x="1109.2" y="661" width="8.1" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="1112.18" y="671.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (3 samples, 2.05%)</title><rect x="10.0" y="453" width="24.2" height="15.0" fill="rgb(112,112,220)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >i..</text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::is_owned() const (1 samples, 0.68%)</title><rect x="1117.3" y="485" width="8.0" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="1120.26" y="495.5" ></text>
</g>
<g >
<title>hash_calc_cell_id(unsigned long, hash_table_t*) (1 samples, 0.68%)</title><rect x="729.3" y="277" width="8.1" height="15.0" fill="rgb(134,134,240)" rx="2" ry="2" />
<text  x="732.32" y="287.5" ></text>
</g>
<g >
<title>process_backlog (3 samples, 2.05%)</title><rect x="10.0" y="485" width="24.2" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >p..</text>
</g>
<g >
<title>btr_root_block_get(dict_index_t const*, unsigned long, mtr_t*) (2 samples, 1.37%)</title><rect x="381.8" y="485" width="16.1" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="384.78" y="495.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.68%)</title><rect x="1125.3" y="821" width="8.1" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="1128.34" y="831.5" ></text>
</g>
<g >
<title>Log_file_handle::write(unsigned long, unsigned long, unsigned char const*) (3 samples, 2.05%)</title><rect x="1141.5" y="517" width="24.3" height="15.0" fill="rgb(111,111,219)" rx="2" ry="2" />
<text  x="1144.51" y="527.5" >L..</text>
</g>
<g >
<title>new_sync_write (1 samples, 0.68%)</title><rect x="1157.7" y="341" width="8.1" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="1160.67" y="351.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.68%)</title><rect x="1165.8" y="709" width="8.0" height="15.0" fill="rgb(87,87,197)" rx="2" ry="2" />
<text  x="1168.75" y="719.5" ></text>
</g>
<g >
<title>ut::hash_uint64(unsigned long) (1 samples, 0.68%)</title><rect x="705.1" y="293" width="8.1" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="708.07" y="303.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt; &gt;::~_State_impl() (1 samples, 0.68%)</title><rect x="1117.3" y="805" width="8.0" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="1120.26" y="815.5" ></text>
</g>
<g >
<title>__ext4_journal_stop (1 samples, 0.68%)</title><rect x="616.2" y="389" width="8.0" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="619.16" y="399.5" ></text>
</g>
<g >
<title>buf_page_make_young_if_needed(buf_page_t*) (1 samples, 0.68%)</title><rect x="842.5" y="405" width="8.0" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="845.47" y="415.5" ></text>
</g>
<g >
<title>fil_space_get_page_size(unsigned int, bool*) (2 samples, 1.37%)</title><rect x="381.8" y="421" width="16.1" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="384.78" y="431.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;buf_io_fix&gt; &gt; &gt;::destroy&lt;buf_io_fix&gt;(std::allocator&lt;std::_Rb_tree_node&lt;buf_io_fix&gt; &gt;&amp;, buf_io_fix*) (1 samples, 0.68%)</title><rect x="195.9" y="229" width="8.1" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="198.89" y="239.5" ></text>
</g>
<g >
<title>Session_consistency_gtids_ctx::notify_after_transaction_commit(THD const*) (1 samples, 0.68%)</title><rect x="567.7" y="693" width="8.1" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="570.67" y="703.5" ></text>
</g>
<g >
<title>rw_lock_x_unlock_gen(rw_lock_t*, unsigned long) (2 samples, 1.37%)</title><rect x="680.8" y="309" width="16.2" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="683.82" y="319.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::is_owned() const (1 samples, 0.68%)</title><rect x="228.2" y="197" width="8.1" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="231.22" y="207.5" ></text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.68%)</title><rect x="357.5" y="293" width="8.1" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="360.53" y="303.5" ></text>
</g>
<g >
<title>rw_lock_x_unlock_func(unsigned long, rw_lock_t*) (2 samples, 1.37%)</title><rect x="680.8" y="277" width="16.2" height="15.0" fill="rgb(114,114,222)" rx="2" ry="2" />
<text  x="683.82" y="287.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_other&gt;::single_page() (4 samples, 2.74%)</title><rect x="462.6" y="469" width="32.3" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="465.60" y="479.5" >Bu..</text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (4 samples, 2.74%)</title><rect x="1020.3" y="533" width="32.3" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="1023.27" y="543.5" >mt..</text>
</g>
<g >
<title>Fil_shard::mutex_release() const (1 samples, 0.68%)</title><rect x="381.8" y="389" width="8.1" height="15.0" fill="rgb(131,131,236)" rx="2" ry="2" />
<text  x="384.78" y="399.5" ></text>
</g>
<g >
<title>sock_write_iter (3 samples, 2.05%)</title><rect x="10.0" y="709" width="24.2" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="13.00" y="719.5" >s..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.68%)</title><rect x="1157.7" y="405" width="8.1" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="1160.67" y="415.5" ></text>
</g>
<g >
<title>log_data_blocks_write(Log_file_handle&amp;, unsigned long, unsigned long, unsigned char const*) (3 samples, 2.05%)</title><rect x="1141.5" y="533" width="24.3" height="15.0" fill="rgb(137,137,243)" rx="2" ry="2" />
<text  x="1144.51" y="543.5" >l..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, dd::cache::Local_multi_map&lt;dd::Event&gt;*, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Event&gt; &gt; &gt;::_M_head(std::_Tuple_impl&lt;0ul, dd::cache::Local_multi_map&lt;dd::Event&gt;*, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Event&gt; &gt; &gt; const&amp;) (1 samples, 0.68%)</title><rect x="575.8" y="533" width="8.0" height="15.0" fill="rgb(134,134,240)" rx="2" ry="2" />
<text  x="578.75" y="543.5" ></text>
</g>
<g >
<title>Find_page::operator()(mtr_memo_slot_t*) (3 samples, 2.05%)</title><rect x="794.0" y="373" width="24.2" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="796.97" y="383.5" >F..</text>
</g>
<g >
<title>write_record(THD*, TABLE*, COPY_INFO*, COPY_INFO*) (53 samples, 36.30%)</title><rect x="98.9" y="677" width="428.4" height="15.0" fill="rgb(85,85,195)" rx="2" ry="2" />
<text  x="101.90" y="687.5" >write_record(THD*, TABLE*, COPY_INFO*, COPY_INFO*)</text>
</g>
<g >
<title>rec_offs_validate(unsigned char const*, dict_index_t const*, unsigned long const*) (1 samples, 0.68%)</title><rect x="422.2" y="421" width="8.1" height="15.0" fill="rgb(96,96,204)" rx="2" ry="2" />
<text  x="425.19" y="431.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (3 samples, 2.05%)</title><rect x="179.7" y="453" width="24.3" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="182.73" y="463.5" >b..</text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (1 samples, 0.68%)</title><rect x="923.3" y="549" width="8.1" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="926.29" y="559.5" ></text>
</g>
<g >
<title>Double_write::prepare(buf_page_t const*, void**, unsigned int*) (1 samples, 0.68%)</title><rect x="1181.9" y="405" width="8.1" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="1184.92" y="415.5" ></text>
</g>
<g >
<title>assert_invalid_dict_is_locked(TABLE const*) (1 samples, 0.68%)</title><rect x="543.4" y="661" width="8.1" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="546.42" y="671.5" ></text>
</g>
<g >
<title>ppoll (1 samples, 0.68%)</title><rect x="58.5" y="613" width="8.1" height="15.0" fill="rgb(138,138,244)" rx="2" ry="2" />
<text  x="61.49" y="623.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.68%)</title><rect x="1125.3" y="789" width="8.1" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="1128.34" y="799.5" ></text>
</g>
<g >
<title>buf_page_t::Latching_rules_helpers::get_owned_latches(buf_page_t const&amp;) (1 samples, 0.68%)</title><rect x="1084.9" y="437" width="8.1" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="1087.93" y="447.5" ></text>
</g>
<g >
<title>rw_lock_x_lock_gen(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.68%)</title><rect x="834.4" y="373" width="8.1" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="837.38" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;buf_io_fix&gt; &gt; &gt;::deallocate(std::allocator&lt;std::_Rb_tree_node&lt;buf_io_fix&gt; &gt;&amp;, std::_Rb_tree_node&lt;buf_io_fix&gt;*, unsigned long) (1 samples, 0.68%)</title><rect x="486.8" y="325" width="8.1" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="489.85" y="335.5" ></text>
</g>
<g >
<title>trx_rsegf_get_nth_undo(unsigned char*, unsigned long, mtr_t*) (6 samples, 4.11%)</title><rect x="947.5" y="549" width="48.5" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="950.53" y="559.5" >trx_..</text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (6 samples, 4.11%)</title><rect x="236.3" y="389" width="48.5" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="239.30" y="399.5" >mtr_..</text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (1 samples, 0.68%)</title><rect x="357.5" y="341" width="8.1" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="360.53" y="351.5" ></text>
</g>
<g >
<title>ext4_buffered_write_iter (1 samples, 0.68%)</title><rect x="616.2" y="453" width="8.0" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="619.16" y="463.5" ></text>
</g>
<g >
<title>_db_return_(unsigned int, _db_stack_frame_*) (1 samples, 0.68%)</title><rect x="147.4" y="485" width="8.1" height="15.0" fill="rgb(131,131,237)" rx="2" ry="2" />
<text  x="150.40" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;mtr_t const*, mtr_t const*, ut::allocator&lt;mtr_t const*, ut::detail::allocator_base_pfs&lt;mtr_t const*&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;mtr_t const*&gt;, std::hash&lt;mtr_t const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node(unsigned long, mtr_t const* const&amp;, unsigned long) const (1 samples, 0.68%)</title><rect x="697.0" y="357" width="8.1" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="699.99" y="367.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (2 samples, 1.37%)</title><rect x="1173.8" y="773" width="16.2" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="1176.84" y="783.5" ></text>
</g>
<g >
<title>mtr_t::memo_contains_page_flagged(unsigned char const*, unsigned long) const (4 samples, 2.74%)</title><rect x="252.5" y="373" width="32.3" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="255.47" y="383.5" >mt..</text>
</g>
<g >
<title>std::atomic&lt;bool&gt;::load(std::memory_order) const (1 samples, 0.68%)</title><rect x="939.5" y="421" width="8.0" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="942.45" y="431.5" ></text>
</g>
<g >
<title>log_files_logical_size_and_checkpoint_age(log_t const&amp;) (1 samples, 0.68%)</title><rect x="1117.3" y="533" width="8.0" height="15.0" fill="rgb(84,84,193)" rx="2" ry="2" />
<text  x="1120.26" y="543.5" ></text>
</g>
<g >
<title>close_open_tables(THD*) (1 samples, 0.68%)</title><rect x="543.4" y="693" width="8.1" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="546.42" y="703.5" ></text>
</g>
<g >
<title>rw_lock_x_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.68%)</title><rect x="834.4" y="341" width="8.1" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="837.38" y="351.5" ></text>
</g>
<g >
<title>ib_log_wr_notif (2 samples, 1.37%)</title><rect x="1125.3" y="837" width="16.2" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="1128.34" y="847.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::exit() (1 samples, 0.68%)</title><rect x="939.5" y="453" width="8.0" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="942.45" y="463.5" ></text>
</g>
<g >
<title>unlikely(bool) (2 samples, 1.37%)</title><rect x="979.9" y="517" width="16.1" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="982.86" y="527.5" ></text>
</g>
<g >
<title>trx_commit_for_mysql(trx_t*) (32 samples, 21.92%)</title><rect x="640.4" y="549" width="258.6" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="643.41" y="559.5" >trx_commit_for_mysql(trx_t*)</text>
</g>
<g >
<title>AutoDebugTrace::AutoDebugTrace(char const*, char const*, int) (1 samples, 0.68%)</title><rect x="559.6" y="677" width="8.1" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="562.59" y="687.5" ></text>
</g>
<g >
<title>mach_read_ulint(unsigned char const*, mlog_id_t) (2 samples, 1.37%)</title><rect x="236.3" y="373" width="16.2" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="239.30" y="383.5" ></text>
</g>
<g >
<title>buf_page_t::Latching_rules_helpers::assert_latches_let_distinguish(buf_page_t const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) (1 samples, 0.68%)</title><rect x="195.9" y="373" width="8.1" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="198.89" y="383.5" ></text>
</g>
<g >
<title>net_read_packet_header(NET*) (1 samples, 0.68%)</title><rect x="58.5" y="677" width="8.1" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="61.49" y="687.5" ></text>
</g>
<g >
<title>trx_commit_in_memory(trx_t*, mtr_t const*, bool) (14 samples, 9.59%)</title><rect x="664.7" y="501" width="113.1" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="667.66" y="511.5" >trx_commit_in..</text>
</g>
<g >
<title>close_thread_table(THD*, TABLE**) (1 samples, 0.68%)</title><rect x="543.4" y="677" width="8.1" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="546.42" y="687.5" ></text>
</g>
<g >
<title>Rpl_transaction_write_set_ctx::reset_state() (1 samples, 0.68%)</title><rect x="624.2" y="565" width="8.1" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="627.25" y="575.5" ></text>
</g>
<g >
<title>rec_offs_data_size(unsigned long const*) (1 samples, 0.68%)</title><rect x="414.1" y="421" width="8.1" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="417.11" y="431.5" ></text>
</g>
<g >
<title>crc_word (1 samples, 0.68%)</title><rect x="907.1" y="453" width="8.1" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="910.12" y="463.5" ></text>
</g>
<g >
<title>mtr_t::Command::release_all() (2 samples, 1.37%)</title><rect x="680.8" y="421" width="16.2" height="15.0" fill="rgb(134,134,240)" rx="2" ry="2" />
<text  x="683.82" y="431.5" ></text>
</g>
<g >
<title>rw_lock_x_lock_low(rw_lock_t*, unsigned long, char const*, unsigned long) (1 samples, 0.68%)</title><rect x="462.6" y="389" width="8.1" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="465.60" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::unique_ptr&lt;cs::util::ColumnFilter, std::default_delete&lt;cs::util::ColumnFilter&gt; &gt;*, std::vector&lt;std::unique_ptr&lt;cs::util::ColumnFilter, std::default_delete&lt;cs::util::ColumnFilter&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;cs::util::ColumnFilter, std::default_delete&lt;cs::util::ColumnFilter&gt; &gt; &gt; &gt; &gt;::operator++() (1 samples, 0.68%)</title><rect x="107.0" y="405" width="8.1" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="109.99" y="415.5" ></text>
</g>
<g >
<title>trx_rseg_t::latch() (7 samples, 4.79%)</title><rect x="680.8" y="469" width="56.6" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="683.82" y="479.5" >trx_r..</text>
</g>
<g >
<title>row_ins_clust_index_entry_low(unsigned int, unsigned long, dict_index_t*, unsigned long, dtuple_t*, que_thr_t*, bool) (29 samples, 19.86%)</title><rect x="163.6" y="517" width="234.3" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="166.56" y="527.5" >row_ins_clust_index_entry_low(u..</text>
</g>
<g >
<title>AutoDebugTrace::AutoDebugTrace(char const*, char const*, int) (1 samples, 0.68%)</title><rect x="551.5" y="693" width="8.1" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="554.51" y="703.5" ></text>
</g>
<g >
<title>Iterate&lt;Find_page&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (3 samples, 2.05%)</title><rect x="866.7" y="389" width="24.3" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="869.71" y="399.5" >I..</text>
</g>
<g >
<title>__pthread_getspecific@GLIBC_2.2.5 (1 samples, 0.68%)</title><rect x="42.3" y="821" width="8.1" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="45.33" y="831.5" ></text>
</g>
<g >
<title>AutoDebugTrace::~AutoDebugTrace() (1 samples, 0.68%)</title><rect x="527.3" y="645" width="8.0" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="530.26" y="655.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 2.05%)</title><rect x="1141.5" y="821" width="24.3" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="1144.51" y="831.5" >[..</text>
</g>
<g >
<title>Release_all::operator()(mtr_memo_slot_t*) const (1 samples, 0.68%)</title><rect x="204.0" y="341" width="8.1" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="206.97" y="351.5" ></text>
</g>
<g >
<title>bool srv_shutdown_state_matches&lt;log_buffer_reserve(log_t&amp;, unsigned long)::{lambda(auto:1)#1}&gt;(log_buffer_reserve(log_t&amp;, unsigned long)::{lambda(auto:1)#1}&amp;&amp;) (1 samples, 0.68%)</title><rect x="648.5" y="453" width="8.1" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="651.49" y="463.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::mtr_add_page(buf_block_t*) (1 samples, 0.68%)</title><rect x="446.4" y="453" width="8.1" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="449.44" y="463.5" ></text>
</g>
<g >
<title>innobase_xa_prepare(handlerton*, THD*, bool) (24 samples, 16.44%)</title><rect x="915.2" y="645" width="194.0" height="15.0" fill="rgb(113,113,221)" rx="2" ry="2" />
<text  x="918.21" y="655.5" >innobase_xa_prepare(handl..</text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (2 samples, 1.37%)</title><rect x="349.5" y="389" width="16.1" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="352.45" y="399.5" ></text>
</g>
<g >
<title>void log_sync_point&lt;39ul&gt;(char const (&amp;) [39ul]) (1 samples, 0.68%)</title><rect x="656.6" y="453" width="8.1" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="659.58" y="463.5" ></text>
</g>
<g >
<title>THD::set_query(char const*, unsigned long) (1 samples, 0.68%)</title><rect x="66.6" y="741" width="8.1" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="69.58" y="751.5" ></text>
</g>
<g >
<title>std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::insert(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, buf_io_fix const&amp;) (1 samples, 0.68%)</title><rect x="478.8" y="229" width="8.0" height="15.0" fill="rgb(86,86,196)" rx="2" ry="2" />
<text  x="481.77" y="239.5" ></text>
</g>
<g >
<title>__futex_abstimed_wait_common (1 samples, 0.68%)</title><rect x="1133.4" y="821" width="8.1" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="1136.42" y="831.5" ></text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::assert_latches_let_distinguish(std::bitset&lt;3ul&gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.68%)</title><rect x="195.9" y="357" width="8.1" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="198.89" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;buf_io_fix&gt;* std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_M_create_node&lt;buf_io_fix const&amp;&gt;(buf_io_fix const&amp;) (1 samples, 0.68%)</title><rect x="478.8" y="149" width="8.0" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="481.77" y="159.5" ></text>
</g>
<g >
<title>bool (*&amp;&amp;std::forward&lt;bool (*)(Field const*)&gt;(std::remove_reference&lt;bool (*)(Field const*)&gt;::type&amp;))(Field const*) (1 samples, 0.68%)</title><rect x="139.3" y="549" width="8.1" height="15.0" fill="rgb(93,93,201)" rx="2" ry="2" />
<text  x="142.32" y="559.5" ></text>
</g>
<g >
<title>my_ok(THD*, unsigned long long, unsigned long long, char const*) (1 samples, 0.68%)</title><rect x="559.6" y="709" width="8.1" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="562.59" y="719.5" ></text>
</g>
<g >
<title>mtr_t::memo_contains_page_flagged(unsigned char const*, unsigned long) const (4 samples, 2.74%)</title><rect x="317.1" y="373" width="32.4" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="320.12" y="383.5" >mt..</text>
</g>
<g >
<title>buf_flush_page_and_try_neighbors(buf_page_t*, buf_flush_t, unsigned long, unsigned long*) (2 samples, 1.37%)</title><rect x="1173.8" y="517" width="16.2" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="1176.84" y="527.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned int&gt;::operator unsigned int() const (1 samples, 0.68%)</title><rect x="187.8" y="389" width="8.1" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="190.81" y="399.5" ></text>
</g>
<g >
<title>(anonymous namespace)::Row_data_memory::Row_data_memory(TABLE*, unsigned char const*) (1 samples, 0.68%)</title><rect x="98.9" y="597" width="8.1" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="101.90" y="607.5" ></text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (10 samples, 6.85%)</title><rect x="284.8" y="421" width="80.8" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="287.79" y="431.5" >trx_rseg_..</text>
</g>
<g >
<title>std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; std::__copy_move_a&lt;false, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; &gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;) (1 samples, 0.68%)</title><rect x="826.3" y="245" width="8.1" height="15.0" fill="rgb(97,97,205)" rx="2" ry="2" />
<text  x="829.30" y="255.5" ></text>
</g>
<g >
<title>__napi_poll (3 samples, 2.05%)</title><rect x="10.0" y="501" width="24.2" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >_..</text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;buf_io_fix&gt; std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_M_insert_unique_&lt;buf_io_fix const&amp;, std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_Alloc_node&gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, buf_io_fix const&amp;, std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_Alloc_node&amp;) (1 samples, 0.68%)</title><rect x="478.8" y="197" width="8.0" height="15.0" fill="rgb(95,95,204)" rx="2" ry="2" />
<text  x="481.77" y="207.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 2.05%)</title><rect x="1141.5" y="789" width="24.3" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="1144.51" y="799.5" >[..</text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::lookup() (1 samples, 0.68%)</title><rect x="357.5" y="325" width="8.1" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="360.53" y="335.5" ></text>
</g>
<g >
<title>mtr_t::commit() (3 samples, 2.05%)</title><rect x="680.8" y="437" width="24.3" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="683.82" y="447.5" >m..</text>
</g>
<g >
<title>std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; std::set_difference&lt;std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; &gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;) (1 samples, 0.68%)</title><rect x="470.7" y="325" width="8.1" height="15.0" fill="rgb(114,114,222)" rx="2" ry="2" />
<text  x="473.68" y="335.5" ></text>
</g>
<g >
<title>rw_lock_s_lock_gen(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.68%)</title><rect x="503.0" y="469" width="8.1" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="506.01" y="479.5" ></text>
</g>
<g >
<title>buf_pool_validate_instance(buf_pool_t*) (3 samples, 2.05%)</title><rect x="1084.9" y="485" width="24.3" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="1087.93" y="495.5" >b..</text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Find_page&gt; &gt;(Iterate&lt;Find_page&gt;&amp;) const (1 samples, 0.68%)</title><rect x="1044.5" y="501" width="8.1" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="1047.52" y="511.5" ></text>
</g>
<g >
<title>conditional_sync_point(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (1 samples, 0.68%)</title><rect x="656.6" y="437" width="8.1" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="659.58" y="447.5" ></text>
</g>
<g >
<title>auto ut::Guarded&lt;Trx_by_id_with_min, (latch_id_t)77&gt;::latch_and_execute&lt;trx_release_impl_and_expl_locks(trx_t*, bool)::{lambda(Trx_by_id_with_min&amp;)#2}&gt;(trx_release_impl_and_expl_locks(trx_t*, bool)::{lambda(Trx_by_id_with_min&amp;)#2}&amp;&amp;, ut::Location const&amp;) (1 samples, 0.68%)</title><rect x="664.7" y="469" width="8.0" height="15.0" fill="rgb(86,86,196)" rx="2" ry="2" />
<text  x="667.66" y="479.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, Detached_thread, void (*)(log_t*), log_t*&gt;(std::__invoke_other, Detached_thread&amp;&amp;, void (*&amp;&amp;)(log_t*), log_t*&amp;&amp;) (1 samples, 0.68%)</title><rect x="1117.3" y="693" width="8.0" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="1120.26" y="703.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::locked(TTASEventMutex&lt;GenericPolicy&gt; const*, char const*, unsigned long) (1 samples, 0.68%)</title><rect x="462.6" y="309" width="8.1" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="465.60" y="319.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::mtr_add_page(buf_block_t*) (1 samples, 0.68%)</title><rect x="179.7" y="421" width="8.1" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="182.73" y="431.5" ></text>
</g>
<g >
<title>Lex_input_stream::add_digest_token(unsigned int, Lexer_yystype*) (1 samples, 0.68%)</title><rect x="1109.2" y="629" width="8.1" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="1112.18" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;mtr_t const*&gt;::_M_v() const (1 samples, 0.68%)</title><rect x="697.0" y="325" width="8.1" height="15.0" fill="rgb(83,83,192)" rx="2" ry="2" />
<text  x="699.99" y="335.5" ></text>
</g>
<g >
<title>innobase_commit(handlerton*, THD*, bool) (33 samples, 22.60%)</title><rect x="632.3" y="581" width="266.7" height="15.0" fill="rgb(83,83,192)" rx="2" ry="2" />
<text  x="635.33" y="591.5" >innobase_commit(handlerton*, THD*, ..</text>
</g>
<g >
<title>__futex_abstimed_wait_common (1 samples, 0.68%)</title><rect x="1165.8" y="821" width="8.0" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="1168.75" y="831.5" ></text>
</g>
<g >
<title>btr_cur_pessimistic_insert(unsigned int, btr_cur_t*, unsigned long**, mem_block_info_t**, dtuple_t*, unsigned char**, big_rec_t**, que_thr_t*, mtr_t*) (2 samples, 1.37%)</title><rect x="414.1" y="501" width="16.2" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="417.11" y="511.5" ></text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (1 samples, 0.68%)</title><rect x="1012.2" y="549" width="8.1" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="1015.19" y="559.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_enter() (1 samples, 0.68%)</title><rect x="228.2" y="261" width="8.1" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="231.22" y="271.5" ></text>
</g>
<g >
<title>trx_undo_insert_cleanup(trx_undo_ptr_t*, bool) (12 samples, 8.22%)</title><rect x="680.8" y="485" width="97.0" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="683.82" y="495.5" >trx_undo_in..</text>
</g>
<g >
<title>trx_rseg_t::unlatch() (7 samples, 4.79%)</title><rect x="834.4" y="485" width="56.6" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="837.38" y="495.5" >trx_r..</text>
</g>
<g >
<title>void std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_M_construct_node&lt;buf_io_fix const&amp;&gt;(std::_Rb_tree_node&lt;buf_io_fix&gt;*, buf_io_fix const&amp;) (1 samples, 0.68%)</title><rect x="478.8" y="133" width="8.0" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="481.77" y="143.5" ></text>
</g>
<g >
<title>THD::binlog_write_table_map(TABLE*, bool, bool) (4 samples, 2.74%)</title><rect x="123.2" y="613" width="32.3" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="126.15" y="623.5" >TH..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;buf_io_fix&gt; &gt;::deallocate(std::_Rb_tree_node&lt;buf_io_fix&gt;*, unsigned long) (1 samples, 0.68%)</title><rect x="486.8" y="309" width="8.1" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="489.85" y="319.5" ></text>
</g>
<g >
<title>ext4_fill_raw_inode (1 samples, 0.68%)</title><rect x="1157.7" y="197" width="8.1" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="1160.67" y="207.5" ></text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(TTASEventMutex&lt;GenericPolicy&gt; const&amp;, char const*, unsigned long) (1 samples, 0.68%)</title><rect x="688.9" y="213" width="8.1" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="691.90" y="223.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(TTASEventMutex&lt;GenericPolicy&gt; const*, char const*, unsigned long) (1 samples, 0.68%)</title><rect x="228.2" y="213" width="8.1" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="231.22" y="223.5" ></text>
</g>
<g >
<title>hash_get_nth_cell(hash_table_t*, unsigned long) (1 samples, 0.68%)</title><rect x="373.7" y="405" width="8.1" height="15.0" fill="rgb(109,109,216)" rx="2" ry="2" />
<text  x="376.70" y="415.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (3 samples, 2.05%)</title><rect x="10.0" y="421" width="24.2" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >t..</text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (1 samples, 0.68%)</title><rect x="769.7" y="421" width="8.1" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="772.73" y="431.5" ></text>
</g>
<g >
<title>rec_get_offsets(unsigned char const*, dict_index_t const*, unsigned long*, unsigned long, ut::Location, mem_block_info_t**) (1 samples, 0.68%)</title><rect x="519.2" y="469" width="8.1" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="522.18" y="479.5" ></text>
</g>
<g >
<title>Iterate&lt;Release_all&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (1 samples, 0.68%)</title><rect x="204.0" y="357" width="8.1" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="206.97" y="367.5" ></text>
</g>
<g >
<title>Table_map_log_event::Table_map_log_event(THD*, TABLE*, Table_id const&amp;, bool) (4 samples, 2.74%)</title><rect x="123.2" y="597" width="32.3" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="126.15" y="607.5" >Ta..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (1 samples, 0.68%)</title><rect x="115.1" y="629" width="8.1" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="118.07" y="639.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt; &gt;::_M_run() (3 samples, 2.05%)</title><rect x="1141.5" y="757" width="24.3" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="1144.51" y="767.5" >s..</text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (11 samples, 7.53%)</title><rect x="996.0" y="565" width="88.9" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="999.03" y="575.5" >trx_rseg_t..</text>
</g>
<g >
<title>Commit_stage_manager::append_to(Commit_stage_manager::StageID, THD*) (1 samples, 0.68%)</title><rect x="608.1" y="613" width="8.1" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="611.08" y="623.5" ></text>
</g>
<g >
<title>log_writer(log_t*) (3 samples, 2.05%)</title><rect x="1141.5" y="597" width="24.3" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="1144.51" y="607.5" >l..</text>
</g>
<g >
<title>MYSQLlex(YYSTYPE*, YYLTYPE*, THD*) (1 samples, 0.68%)</title><rect x="1109.2" y="677" width="8.1" height="15.0" fill="rgb(88,88,198)" rx="2" ry="2" />
<text  x="1112.18" y="687.5" ></text>
</g>
<g >
<title>cs::util::ReplicatedColumnsView::ReplicatedColumnsView(TABLE const*, THD const*)::{lambda(TABLE const*, unsigned long)#1}::operator()(TABLE const*, unsigned long) const (1 samples, 0.68%)</title><rect x="107.0" y="437" width="8.1" height="15.0" fill="rgb(96,96,204)" rx="2" ry="2" />
<text  x="109.99" y="447.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void (*(log_t*))(log_t*)&gt;::__call&lt;void, , 0ul&gt;(std::tuple&lt;&gt;&amp;&amp;, std::_Index_tuple&lt;0ul&gt;) (3 samples, 2.05%)</title><rect x="1141.5" y="645" width="24.3" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="1144.51" y="655.5" >v..</text>
</g>
<g >
<title>dispatch_command(THD*, COM_DATA const*, enum_server_command) (130 samples, 89.04%)</title><rect x="66.6" y="757" width="1050.7" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="69.58" y="767.5" >dispatch_command(THD*, COM_DATA const*, enum_server_command)</text>
</g>
<g >
<title>free (1 samples, 0.68%)</title><rect x="50.4" y="821" width="8.1" height="15.0" fill="rgb(89,89,199)" rx="2" ry="2" />
<text  x="53.41" y="831.5" ></text>
</g>
<g >
<title>_db_enter_(char const*, int, char const*, unsigned int, _db_stack_frame_*) (1 samples, 0.68%)</title><rect x="567.7" y="661" width="8.1" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="570.67" y="671.5" ></text>
</g>
<g >
<title>trx_rseg_t::latch() (9 samples, 6.16%)</title><rect x="923.3" y="581" width="72.7" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="926.29" y="591.5" >trx_rseg..</text>
</g>
<g >
<title>bitmap_init(MY_BITMAP*, unsigned int*, unsigned int) (1 samples, 0.68%)</title><rect x="98.9" y="533" width="8.1" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="101.90" y="543.5" ></text>
</g>
<g >
<title>rw_lock_remove_debug_info(rw_lock_t*, unsigned long, unsigned long) (1 samples, 0.68%)</title><rect x="204.0" y="245" width="8.1" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="206.97" y="255.5" ></text>
</g>
<g >
<title>os_file_io(IORequest const&amp;, int, void*, unsigned long, unsigned long, dberr_t*, file::Block const*) (1 samples, 0.68%)</title><rect x="1157.7" y="437" width="8.1" height="15.0" fill="rgb(136,136,241)" rx="2" ry="2" />
<text  x="1160.67" y="447.5" ></text>
</g>
<g >
<title>btr_cur_ins_lock_and_undo(unsigned long, btr_cur_t*, dtuple_t*, que_thr_t*, mtr_t*, bool*) (23 samples, 15.75%)</title><rect x="179.7" y="485" width="185.9" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="182.73" y="495.5" >btr_cur_ins_lock_and_und..</text>
</g>
<g >
<title>find_keyword(Lex_input_stream*, unsigned int, bool) (1 samples, 0.68%)</title><rect x="1109.2" y="645" width="8.1" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="1112.18" y="655.5" ></text>
</g>
<g >
<title>cs::util::ReplicatedColumnsView::add_filter_if_needed(THD const&amp;, TABLE*, table_def const*, cs::util::ColumnFilterFactory::ColumnFilterType) (1 samples, 0.68%)</title><rect x="107.0" y="533" width="8.1" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="109.99" y="543.5" ></text>
</g>
<g >
<title>row_ins_step(que_thr_t*) (45 samples, 30.82%)</title><rect x="163.6" y="597" width="363.7" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="166.56" y="607.5" >row_ins_step(que_thr_t*)</text>
</g>
<g >
<title>mtr_t::memo_contains_page_flagged(unsigned char const*, unsigned long) const (1 samples, 0.68%)</title><rect x="220.1" y="389" width="8.1" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="223.14" y="399.5" ></text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (5 samples, 3.42%)</title><rect x="850.5" y="437" width="40.5" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="853.55" y="447.5" >mtr..</text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::trylock(char const*, unsigned int) (1 samples, 0.68%)</title><rect x="438.4" y="437" width="8.0" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="441.36" y="447.5" ></text>
</g>
<g >
<title>unsigned long (&amp;std::forward&lt;unsigned long (&amp;) [3]&gt;(std::remove_reference&lt;unsigned long (&amp;) [3]&gt;::type&amp;)) [3] (1 samples, 0.68%)</title><rect x="1173.8" y="357" width="8.1" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="1176.84" y="367.5" ></text>
</g>
<g >
<title>std::bitset&lt;3ul&gt;::reference::~reference() (1 samples, 0.68%)</title><rect x="1093.0" y="437" width="8.1" height="15.0" fill="rgb(110,110,217)" rx="2" ry="2" />
<text  x="1096.01" y="447.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(TTASEventMutex&lt;GenericPolicy&gt; const*, char const*, unsigned long) (1 samples, 0.68%)</title><rect x="688.9" y="197" width="8.1" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="691.90" y="207.5" ></text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(TTASEventMutex&lt;GenericPolicy&gt; const&amp;, char const*, unsigned long) (1 samples, 0.68%)</title><rect x="680.8" y="229" width="8.1" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="683.82" y="239.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_exit() (1 samples, 0.68%)</title><rect x="204.0" y="229" width="8.1" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="206.97" y="239.5" ></text>
</g>
<g >
<title>unlock_stack(CODE_STATE*) (1 samples, 0.68%)</title><rect x="527.3" y="613" width="8.0" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="530.26" y="623.5" ></text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (1 samples, 0.68%)</title><rect x="705.1" y="373" width="8.1" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="708.07" y="383.5" ></text>
</g>
<g >
<title>std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; std::__copy_move_a2&lt;false, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; &gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;) (1 samples, 0.68%)</title><rect x="478.8" y="277" width="8.0" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="481.77" y="287.5" ></text>
</g>
<g >
<title>Transaction_ctx::cleanup() (1 samples, 0.68%)</title><rect x="624.2" y="581" width="8.1" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="627.25" y="591.5" ></text>
</g>
<g >
<title>Iterate&lt;Find_page&gt;::Iterate(Find_page&amp;) (2 samples, 1.37%)</title><rect x="1028.4" y="501" width="16.1" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="1031.36" y="511.5" ></text>
</g>
<g >
<title>std::operator==(std::thread::id, std::thread::id) (1 samples, 0.68%)</title><rect x="228.2" y="181" width="8.1" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="231.22" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;mtr_t const*, mtr_t const*, ut::allocator&lt;mtr_t const*, ut::detail::allocator_base_pfs&lt;mtr_t const*&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;mtr_t const*&gt;, std::hash&lt;mtr_t const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::find(mtr_t const* const&amp;) (1 samples, 0.68%)</title><rect x="697.0" y="389" width="8.1" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="699.99" y="399.5" ></text>
</g>
<g >
<title>std::thread::id::id(unsigned long) (1 samples, 0.68%)</title><rect x="1117.3" y="437" width="8.0" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="1120.26" y="447.5" ></text>
</g>
<g >
<title>dblwr::write(buf_flush_t, buf_page_t*, bool) (1 samples, 0.68%)</title><rect x="1181.9" y="453" width="8.1" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="1184.92" y="463.5" ></text>
</g>
<g >
<title>std::function&lt;bool (TABLE const*, unsigned long)&gt;::operator()(TABLE const*, unsigned long) const (1 samples, 0.68%)</title><rect x="107.0" y="501" width="8.1" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="109.99" y="511.5" ></text>
</g>
<g >
<title>tcp_event_data_recv (1 samples, 0.68%)</title><rect x="26.2" y="357" width="8.0" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="29.16" y="367.5" ></text>
</g>
<g >
<title>mtr_t::commit() (2 samples, 1.37%)</title><rect x="996.0" y="549" width="16.2" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="999.03" y="559.5" ></text>
</g>
<g >
<title>buf_page_hash_get_low(buf_pool_t*, page_id_t const&amp;) (1 samples, 0.68%)</title><rect x="357.5" y="309" width="8.1" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="360.53" y="319.5" ></text>
</g>
<g >
<title>buf_validate() (3 samples, 2.05%)</title><rect x="470.7" y="453" width="24.2" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="473.68" y="463.5" >b..</text>
</g>
<g >
<title>fill_record_n_invoke_before_triggers(THD*, COPY_INFO*, mem_root_deque&lt;Item*&gt; const&amp;, mem_root_deque&lt;Item*&gt; const&amp;, TABLE*, enum_trigger_event_type, int, bool, bool*) (1 samples, 0.68%)</title><rect x="90.8" y="677" width="8.1" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="93.82" y="687.5" ></text>
</g>
<g >
<title>mtr_t::Command::execute() (3 samples, 2.05%)</title><rect x="640.4" y="485" width="24.3" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="643.41" y="495.5" >m..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.68%)</title><rect x="1133.4" y="805" width="8.1" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="1136.42" y="815.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.68%)</title><rect x="826.3" y="37" width="8.1" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="829.30" y="47.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::exit() (1 samples, 0.68%)</title><rect x="381.8" y="373" width="8.1" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="384.78" y="383.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Release_all&gt; &gt;(Iterate&lt;Release_all&gt;&amp;) const (2 samples, 1.37%)</title><rect x="680.8" y="405" width="16.2" height="15.0" fill="rgb(114,114,222)" rx="2" ry="2" />
<text  x="683.82" y="415.5" ></text>
</g>
<g >
<title>cs::util::ReplicatedColumnsView::add_filter(cs::util::ColumnFilterFactory::ColumnFilterType) (1 samples, 0.68%)</title><rect x="98.9" y="565" width="8.1" height="15.0" fill="rgb(108,108,215)" rx="2" ry="2" />
<text  x="101.90" y="575.5" ></text>
</g>
<g >
<title>rw_lock_own_flagged(rw_lock_t const*, unsigned long) (1 samples, 0.68%)</title><rect x="365.6" y="453" width="8.1" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="368.62" y="463.5" ></text>
</g>
<g >
<title>Protocol_classic::read_packet() (1 samples, 0.68%)</title><rect x="58.5" y="741" width="8.1" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="61.49" y="751.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (1 samples, 0.68%)</title><rect x="1165.8" y="677" width="8.0" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="1168.75" y="687.5" ></text>
</g>
<g >
<title>mtr_t::Command::release_all() (1 samples, 0.68%)</title><rect x="204.0" y="389" width="8.1" height="15.0" fill="rgb(134,134,240)" rx="2" ry="2" />
<text  x="206.97" y="399.5" ></text>
</g>
<g >
<title>dispatch_sql_command(THD*, Parser_state*) (128 samples, 87.67%)</title><rect x="82.7" y="741" width="1034.6" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="85.74" y="751.5" >dispatch_sql_command(THD*, Parser_state*)</text>
</g>
<g >
<title>MYSQLparse(THD*, Parse_tree_root**) (1 samples, 0.68%)</title><rect x="1109.2" y="693" width="8.1" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="1112.18" y="703.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (3 samples, 2.05%)</title><rect x="1141.5" y="773" width="24.3" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="1144.51" y="783.5" >e..</text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::locked(TTASEventMutex&lt;GenericPolicy&gt; const&amp;, char const*, unsigned long) (1 samples, 0.68%)</title><rect x="438.4" y="421" width="8.0" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="441.36" y="431.5" ></text>
</g>
<g >
<title>os_file_write_func(IORequest&amp;, char const*, int, void const*, unsigned long, unsigned long) (2 samples, 1.37%)</title><rect x="1149.6" y="485" width="16.2" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="1152.59" y="495.5" ></text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt;::_M_invoke&lt;0ul, 1ul, 2ul&gt;(std::_Index_tuple&lt;0ul, 1ul, 2ul&gt;) (3 samples, 2.05%)</title><rect x="1141.5" y="725" width="24.3" height="15.0" fill="rgb(131,131,236)" rx="2" ry="2" />
<text  x="1144.51" y="735.5" >v..</text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Find_page&gt; &gt;(Iterate&lt;Find_page&gt;&amp;) const (1 samples, 0.68%)</title><rect x="923.3" y="517" width="8.1" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="926.29" y="527.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (2 samples, 1.37%)</title><rect x="446.4" y="469" width="16.2" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="449.44" y="479.5" ></text>
</g>
<g >
<title>__write (3 samples, 2.05%)</title><rect x="10.0" y="805" width="24.2" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="13.00" y="815.5" >_..</text>
</g>
<g >
<title>std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;::operator=(buf_io_fix const&amp;) (1 samples, 0.68%)</title><rect x="478.8" y="245" width="8.0" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="481.77" y="255.5" ></text>
</g>
<g >
<title>void ut_list_remove&lt;ut_list_base&lt;rw_lock_debug_t, ut_list_base_explicit_getter&lt;rw_lock_debug_t, &amp;rw_lock_debug_t::list&gt; &gt; &gt;(ut_list_base&lt;rw_lock_debug_t, ut_list_base_explicit_getter&lt;rw_lock_debug_t, &amp;rw_lock_debug_t::list&gt; &gt;&amp;, ut_list_base&lt;rw_lock_debug_t, ut_list_base_explicit_getter&lt;rw_lock_debug_t, &amp;rw_lock_debug_t::list&gt; &gt;::elem_type*) (1 samples, 0.68%)</title><rect x="1004.1" y="357" width="8.1" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="1007.11" y="367.5" ></text>
</g>
<g >
<title>conditional_sync_point_for_timestamp(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (1 samples, 0.68%)</title><rect x="608.1" y="581" width="8.1" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="611.08" y="591.5" ></text>
</g>
<g >
<title>mtr_t::Command::release_all() (2 samples, 1.37%)</title><rect x="996.0" y="533" width="16.2" height="15.0" fill="rgb(134,134,240)" rx="2" ry="2" />
<text  x="999.03" y="543.5" ></text>
</g>
<g >
<title>Fil_system::shard_by_id(unsigned int) const (1 samples, 0.68%)</title><rect x="389.9" y="389" width="8.0" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="392.86" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::~_Rb_tree() (1 samples, 0.68%)</title><rect x="195.9" y="293" width="8.1" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="198.89" y="303.5" ></text>
</g>
<g >
<title>rec_offs_n_fields(unsigned long const*) (1 samples, 0.68%)</title><rect x="430.3" y="437" width="8.1" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="433.27" y="447.5" ></text>
</g>
<g >
<title>pc_flush_slot() (2 samples, 1.37%)</title><rect x="1173.8" y="581" width="16.2" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="1176.84" y="591.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::write_cache(THD*, binlog_cache_data*, Binlog_event_writer*) (1 samples, 0.68%)</title><rect x="907.1" y="565" width="8.1" height="15.0" fill="rgb(107,107,215)" rx="2" ry="2" />
<text  x="910.12" y="575.5" ></text>
</g>
<g >
<title>write_locked_table_maps(THD*) (4 samples, 2.74%)</title><rect x="123.2" y="629" width="32.3" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="126.15" y="639.5" >wr..</text>
</g>
<g >
<title>copy_user_generic_string (1 samples, 0.68%)</title><rect x="1133.4" y="709" width="8.1" height="15.0" fill="rgb(87,87,197)" rx="2" ry="2" />
<text  x="1136.42" y="719.5" ></text>
</g>
<g >
<title>AutoDebugTrace::AutoDebugTrace(char const*, char const*, int) (1 samples, 0.68%)</title><rect x="567.7" y="677" width="8.1" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="570.67" y="687.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.68%)</title><rect x="1157.7" y="389" width="8.1" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="1160.67" y="399.5" ></text>
</g>
<g >
<title>ut_align_offset(void const*, unsigned long) (1 samples, 0.68%)</title><rect x="1181.9" y="341" width="8.1" height="15.0" fill="rgb(84,84,193)" rx="2" ry="2" />
<text  x="1184.92" y="351.5" ></text>
</g>
<g >
<title>std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; std::__set_difference&lt;std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_less_iter&gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_less_iter) (1 samples, 0.68%)</title><rect x="470.7" y="309" width="8.1" height="15.0" fill="rgb(110,110,218)" rx="2" ry="2" />
<text  x="473.68" y="319.5" ></text>
</g>
<g >
<title>trx_coordinator::commit_in_engines(THD*, bool, bool) (35 samples, 23.97%)</title><rect x="624.2" y="613" width="282.9" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="627.25" y="623.5" >trx_coordinator::commit_in_engines(TH..</text>
</g>
<g >
<title>mtr_t::is_block_dirtied(buf_block_t const*) (1 samples, 0.68%)</title><rect x="179.7" y="389" width="8.1" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="182.73" y="399.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::flush_thread_caches(THD*) (1 samples, 0.68%)</title><rect x="907.1" y="629" width="8.1" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="910.12" y="639.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void (*&amp;)(log_t*), log_t*&amp;&gt;::type std::__invoke&lt;void (*&amp;)(log_t*), log_t*&amp;&gt;(void (*&amp;)(log_t*), log_t*&amp;) (1 samples, 0.68%)</title><rect x="1117.3" y="629" width="8.0" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="1120.26" y="639.5" ></text>
</g>
<g >
<title>buf_validate() (1 samples, 0.68%)</title><rect x="826.3" y="389" width="8.1" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="829.30" y="399.5" ></text>
</g>
<g >
<title>trx_commit_low(trx_t*, mtr_t*) (31 samples, 21.23%)</title><rect x="640.4" y="517" width="250.6" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="643.41" y="527.5" >trx_commit_low(trx_t*, mtr_t*)</text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;buf_io_fix&gt; std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_M_insert_&lt;buf_io_fix const&amp;, std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_Alloc_node&gt;(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, buf_io_fix const&amp;, std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_Alloc_node&amp;) (1 samples, 0.68%)</title><rect x="478.8" y="181" width="8.0" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="481.77" y="191.5" ></text>
</g>
<g >
<title>Find_page::get_slot() const (1 samples, 0.68%)</title><rect x="745.5" y="373" width="8.1" height="15.0" fill="rgb(96,96,204)" rx="2" ry="2" />
<text  x="748.48" y="383.5" ></text>
</g>
<g >
<title>bool stream_copy&lt;IO_CACHE_binlog_cache_storage, Basic_ostream&gt;(IO_CACHE_binlog_cache_storage*, Basic_ostream*, bool*) (1 samples, 0.68%)</title><rect x="907.1" y="517" width="8.1" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="910.12" y="527.5" ></text>
</g>
<g >
<title>hardware::crc32_using_pclmul(unsigned char const*, unsigned long) (1 samples, 0.68%)</title><rect x="1173.8" y="421" width="8.1" height="15.0" fill="rgb(108,108,215)" rx="2" ry="2" />
<text  x="1176.84" y="431.5" ></text>
</g>
<g >
<title>lock_tables(THD*, Table_ref*, unsigned int, unsigned int) (1 samples, 0.68%)</title><rect x="527.3" y="693" width="8.0" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="530.26" y="703.5" ></text>
</g>
<g >
<title>Rows_log_event::Rows_log_event(THD*, TABLE*, Table_id const&amp;, MY_BITMAP const*, bool, binary_log::Log_event_type, unsigned char const*) (1 samples, 0.68%)</title><rect x="107.0" y="565" width="8.1" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="109.99" y="575.5" ></text>
</g>
<g >
<title>rw_lock_add_debug_info(rw_lock_t*, unsigned long, unsigned long, ut::Location) (1 samples, 0.68%)</title><rect x="462.6" y="373" width="8.1" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="465.60" y="383.5" ></text>
</g>
<g >
<title>operator%(unsigned long, ut::fast_modulo_t const&amp;) (1 samples, 0.68%)</title><rect x="729.3" y="261" width="8.1" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="732.32" y="271.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.68%)</title><rect x="349.5" y="309" width="8.0" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="352.45" y="319.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::ordered_commit(THD*, bool, bool) (38 samples, 26.03%)</title><rect x="608.1" y="661" width="307.1" height="15.0" fill="rgb(81,81,191)" rx="2" ry="2" />
<text  x="611.08" y="671.5" >MYSQL_BIN_LOG::ordered_commit(THD*, bool,..</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt; &gt;::~_State_impl() (2 samples, 1.37%)</title><rect x="1173.8" y="805" width="16.2" height="15.0" fill="rgb(81,81,190)" rx="2" ry="2" />
<text  x="1176.84" y="815.5" ></text>
</g>
<g >
<title>__netif_receive_skb_one_core (3 samples, 2.05%)</title><rect x="10.0" y="469" width="24.2" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >_..</text>
</g>
<g >
<title>cs::util::ReplicatedColumnsView::ReplicatedColumnsView(TABLE const*, THD const*) (1 samples, 0.68%)</title><rect x="147.4" y="565" width="8.1" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="150.40" y="575.5" ></text>
</g>
<g >
<title>locksys::try_release_all_locks(trx_t*)::{lambda()#1}::operator()() const (1 samples, 0.68%)</title><rect x="672.7" y="389" width="8.1" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="675.74" y="399.5" ></text>
</g>
<g >
<title>trx_rsegf_get(unsigned int, unsigned int, page_size_t const&amp;, mtr_t*) (2 samples, 1.37%)</title><rect x="931.4" y="549" width="16.1" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="934.37" y="559.5" ></text>
</g>
<g >
<title>mtr_t::memo_contains_page_flagged(unsigned char const*, unsigned long) const (3 samples, 2.05%)</title><rect x="955.6" y="517" width="24.3" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="958.62" y="527.5" >m..</text>
</g>
<g >
<title>std::_MakeUniq&lt;cs::util::ReplicatedColumnsView&gt;::__single_object std::make_unique&lt;cs::util::ReplicatedColumnsView, TABLE*&amp;&gt;(TABLE*&amp;) (1 samples, 0.68%)</title><rect x="147.4" y="581" width="8.1" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="150.40" y="591.5" ></text>
</g>
<g >
<title>__pwrite64 (1 samples, 0.68%)</title><rect x="1157.7" y="421" width="8.1" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="1160.67" y="431.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block&lt;mtr_write_log_t&gt;(mtr_write_log_t&amp;) const (1 samples, 0.68%)</title><rect x="640.4" y="469" width="8.1" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="643.41" y="479.5" ></text>
</g>
<g >
<title>THD::binlog_write_row(TABLE*, bool, unsigned char const*, unsigned char const*) (2 samples, 1.37%)</title><rect x="98.9" y="613" width="16.2" height="15.0" fill="rgb(87,87,197)" rx="2" ry="2" />
<text  x="101.90" y="623.5" ></text>
</g>
<g >
<title>Iterate&lt;Find_page&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (4 samples, 2.74%)</title><rect x="785.9" y="389" width="32.3" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="788.89" y="399.5" >It..</text>
</g>
<g >
<title>Find_page::operator()(mtr_memo_slot_t*) (1 samples, 0.68%)</title><rect x="260.5" y="325" width="8.1" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="263.55" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::~_Rb_tree() (1 samples, 0.68%)</title><rect x="486.8" y="389" width="8.1" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="489.85" y="399.5" ></text>
</g>
<g >
<title>tcp_sendmsg (3 samples, 2.05%)</title><rect x="10.0" y="677" width="24.2" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="13.00" y="687.5" >t..</text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.68%)</title><rect x="745.5" y="357" width="8.1" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="748.48" y="367.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(TTASEventMutex&lt;GenericPolicy&gt; const*, char const*, unsigned long) (1 samples, 0.68%)</title><rect x="503.0" y="373" width="8.1" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="506.01" y="383.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.68%)</title><rect x="777.8" y="405" width="8.1" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="780.81" y="415.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (1 samples, 0.68%)</title><rect x="1125.3" y="773" width="8.1" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="1128.34" y="783.5" ></text>
</g>
<g >
<title>rw_lock_s_lock(rw_lock_t*, ut::Location) (1 samples, 0.68%)</title><rect x="931.4" y="453" width="8.1" height="15.0" fill="rgb(118,118,224)" rx="2" ry="2" />
<text  x="934.37" y="463.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::trylock(char const*, unsigned int) (1 samples, 0.68%)</title><rect x="228.2" y="245" width="8.1" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="231.22" y="255.5" ></text>
</g>
<g >
<title>btr_cur_ins_lock_and_undo(unsigned long, btr_cur_t*, dtuple_t*, que_thr_t*, mtr_t*, bool*) (1 samples, 0.68%)</title><rect x="406.0" y="485" width="8.1" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="409.03" y="495.5" ></text>
</g>
<g >
<title>ha_search_and_update_if_found_func(hash_table_t*, unsigned long, unsigned char const*, buf_block_t*, unsigned char const*) (1 samples, 0.68%)</title><rect x="373.7" y="453" width="8.1" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="376.70" y="463.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Release_all&gt; &gt;(Iterate&lt;Release_all&gt;&amp;) const (2 samples, 1.37%)</title><rect x="996.0" y="517" width="16.2" height="15.0" fill="rgb(114,114,222)" rx="2" ry="2" />
<text  x="999.03" y="527.5" ></text>
</g>
<g >
<title>check_trx_exists(THD*) (1 samples, 0.68%)</title><rect x="632.3" y="565" width="8.1" height="15.0" fill="rgb(131,131,237)" rx="2" ry="2" />
<text  x="635.33" y="575.5" ></text>
</g>
<g >
<title>trx_commit(trx_t*) (31 samples, 21.23%)</title><rect x="640.4" y="533" width="250.6" height="15.0" fill="rgb(107,107,215)" rx="2" ry="2" />
<text  x="643.41" y="543.5" >trx_commit(trx_t*)</text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.68%)</title><rect x="834.4" y="325" width="8.1" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="837.38" y="335.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.68%)</title><rect x="826.3" y="421" width="8.1" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="829.30" y="431.5" ></text>
</g>
<g >
<title>std::function&lt;bool (Field const*)&gt;::function&lt;bool (*)(Field const*), void&gt;(bool (*&amp;&amp;)(Field const*)) (1 samples, 0.68%)</title><rect x="139.3" y="565" width="8.1" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="142.32" y="575.5" ></text>
</g>
<g >
<title>MDL_map::find_or_insert(LF_PINS*, MDL_key const*, bool*) (1 samples, 0.68%)</title><rect x="591.9" y="645" width="8.1" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="594.92" y="655.5" ></text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::can_leave(std::bitset&lt;3ul&gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.68%)</title><rect x="1101.1" y="405" width="8.1" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="1104.10" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;buf_io_fix&gt; std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_M_insert_unique_&lt;buf_io_fix const&amp;&gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, buf_io_fix const&amp;) (1 samples, 0.68%)</title><rect x="826.3" y="149" width="8.1" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="829.30" y="159.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (1 samples, 0.68%)</title><rect x="616.2" y="405" width="8.0" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="619.16" y="415.5" ></text>
</g>
<g >
<title>thd_sql_command (1 samples, 0.68%)</title><rect x="915.2" y="629" width="8.1" height="15.0" fill="rgb(134,134,240)" rx="2" ry="2" />
<text  x="918.21" y="639.5" ></text>
</g>
<g >
<title>ext4_do_update_inode.isra.0 (1 samples, 0.68%)</title><rect x="1157.7" y="213" width="8.1" height="15.0" fill="rgb(81,81,191)" rx="2" ry="2" />
<text  x="1160.67" y="223.5" ></text>
</g>
<g >
<title>btr_cur_optimistic_insert(unsigned long, btr_cur_t*, unsigned long**, mem_block_info_t**, dtuple_t*, unsigned char**, big_rec_t**, que_thr_t*, mtr_t*) (1 samples, 0.68%)</title><rect x="406.0" y="501" width="8.1" height="15.0" fill="rgb(81,81,190)" rx="2" ry="2" />
<text  x="409.03" y="511.5" ></text>
</g>
<g >
<title>log_write_notifier(log_t*)::{lambda(bool)#1}::operator()(bool) const (1 samples, 0.68%)</title><rect x="1125.3" y="549" width="8.1" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="1128.34" y="559.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt;::operator()() (3 samples, 2.05%)</title><rect x="1141.5" y="741" width="24.3" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="1144.51" y="751.5" >s..</text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::trylock(char const*, unsigned int) (1 samples, 0.68%)</title><rect x="462.6" y="341" width="8.1" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="465.60" y="351.5" ></text>
</g>
<g >
<title>log_write_buffer(log_t&amp;, unsigned char*, unsigned long, unsigned long) (3 samples, 2.05%)</title><rect x="1141.5" y="565" width="24.3" height="15.0" fill="rgb(83,83,192)" rx="2" ry="2" />
<text  x="1144.51" y="575.5" >l..</text>
</g>
<g >
<title>tcp_sendmsg_locked (3 samples, 2.05%)</title><rect x="10.0" y="661" width="24.2" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="13.00" y="671.5" >t..</text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::locked(TTASEventMutex&lt;GenericPolicy&gt; const&amp;, char const*, unsigned long) (1 samples, 0.68%)</title><rect x="462.6" y="325" width="8.1" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="465.60" y="335.5" ></text>
</g>
<g >
<title>void* my_internal_malloc&lt;&amp;(redirecting_allocator(unsigned long, int))&gt;(unsigned int, unsigned long, int) (1 samples, 0.68%)</title><rect x="98.9" y="501" width="8.1" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="101.90" y="511.5" ></text>
</g>
<g >
<title>page_cur_get_rec(page_cur_t*) (1 samples, 0.68%)</title><rect x="171.6" y="485" width="8.1" height="15.0" fill="rgb(81,81,191)" rx="2" ry="2" />
<text  x="174.64" y="495.5" ></text>
</g>
<g >
<title>log_files_update_capacity_limits(log_t&amp;) (1 samples, 0.68%)</title><rect x="1117.3" y="549" width="8.0" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="1120.26" y="559.5" ></text>
</g>
<g >
<title>page_rec_get_next_const(unsigned char const*) (1 samples, 0.68%)</title><rect x="511.1" y="469" width="8.1" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="514.10" y="479.5" ></text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::can_leave(std::bitset&lt;3ul&gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.68%)</title><rect x="470.7" y="357" width="8.1" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="473.68" y="367.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::exit() (1 samples, 0.68%)</title><rect x="204.0" y="213" width="8.1" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="206.97" y="223.5" ></text>
</g>
<g >
<title>vfs_write (1 samples, 0.68%)</title><rect x="1157.7" y="357" width="8.1" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="1160.67" y="367.5" ></text>
</g>
<g >
<title>Find_page::operator()(mtr_memo_slot_t*) (1 samples, 0.68%)</title><rect x="761.6" y="357" width="8.1" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="764.64" y="367.5" ></text>
</g>
<g >
<title>ut_align_down(void const*, unsigned long) (1 samples, 0.68%)</title><rect x="511.1" y="405" width="8.1" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="514.10" y="415.5" ></text>
</g>
<g >
<title>log_writer_write_buffer(log_t&amp;, unsigned long) (3 samples, 2.05%)</title><rect x="1141.5" y="581" width="24.3" height="15.0" fill="rgb(107,107,215)" rx="2" ry="2" />
<text  x="1144.51" y="591.5" >l..</text>
</g>
<g >
<title>InList(link*, char const*) (1 samples, 0.68%)</title><rect x="567.7" y="629" width="8.1" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="570.67" y="639.5" ></text>
</g>
<g >
<title>rw_lock_s_unlock_gen(rw_lock_t*, unsigned long) (1 samples, 0.68%)</title><rect x="204.0" y="277" width="8.1" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="206.97" y="287.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_enter() (1 samples, 0.68%)</title><rect x="438.4" y="453" width="8.0" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="441.36" y="463.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (2 samples, 1.37%)</title><rect x="931.4" y="517" width="16.1" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="934.37" y="527.5" ></text>
</g>
<g >
<title>Diagnostics_area::set_ok_status(unsigned long long, unsigned long long, char const*) (1 samples, 0.68%)</title><rect x="559.6" y="693" width="8.1" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="562.59" y="703.5" ></text>
</g>
<g >
<title>mtr_t::memo_contains_page_flagged(unsigned char const*, unsigned long) const (1 samples, 0.68%)</title><rect x="721.2" y="405" width="8.1" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="724.23" y="415.5" ></text>
</g>
<g >
<title>rec_offs_n_fields(unsigned long const*) (1 samples, 0.68%)</title><rect x="414.1" y="405" width="8.1" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="417.11" y="415.5" ></text>
</g>
<g >
<title>bool srv_shutdown_state_matches&lt;check_trx_exists(THD*)::{lambda(auto:1)#1}&gt;(check_trx_exists(THD*)::{lambda(auto:1)#1}&amp;&amp;) (1 samples, 0.68%)</title><rect x="632.3" y="549" width="8.1" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="635.33" y="559.5" ></text>
</g>
<g >
<title>rec_offs_extra_size(unsigned long const*) (1 samples, 0.68%)</title><rect x="422.2" y="437" width="8.1" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="425.19" y="447.5" ></text>
</g>
<g >
<title>locksys::try_relatch_trx_and_shard_and_do&lt;locksys::try_release_all_locks(trx_t*)::{lambda()#1}&gt;(ib_lock_t const*, locksys::try_release_all_locks(trx_t*)::{lambda()#1}&amp;&amp;)::{lambda()#1}::operator()() const (1 samples, 0.68%)</title><rect x="672.7" y="405" width="8.1" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="675.74" y="415.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.68%)</title><rect x="244.4" y="341" width="8.1" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="247.38" y="351.5" ></text>
</g>
<g >
<title>Iterate&lt;Release_all&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (2 samples, 1.37%)</title><rect x="996.0" y="501" width="16.2" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="999.03" y="511.5" ></text>
</g>
<g >
<title>std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::~set() (1 samples, 0.68%)</title><rect x="195.9" y="309" width="8.1" height="15.0" fill="rgb(109,109,216)" rx="2" ry="2" />
<text  x="198.89" y="319.5" ></text>
</g>
<g >
<title>buf_calc_page_crc32(unsigned char const*, bool) (1 samples, 0.68%)</title><rect x="1173.8" y="437" width="8.1" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="1176.84" y="447.5" ></text>
</g>
<g >
<title>row_ins_index_entry_step(ins_node_t*, que_thr_t*) (45 samples, 30.82%)</title><rect x="163.6" y="565" width="363.7" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="166.56" y="575.5" >row_ins_index_entry_step(ins_node_t*, que_thr_t*)</text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.68%)</title><rect x="769.7" y="373" width="8.1" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="772.73" y="383.5" ></text>
</g>
<g >
<title>dd::cache::Local_multi_map&lt;dd::Event&gt;* const&amp; std::__get_helper&lt;0ul, dd::cache::Local_multi_map&lt;dd::Event&gt;*, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Event&gt; &gt; &gt;(std::_Tuple_impl&lt;0ul, dd::cache::Local_multi_map&lt;dd::Event&gt;*, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Event&gt; &gt; &gt; const&amp;) (1 samples, 0.68%)</title><rect x="575.8" y="549" width="8.0" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="578.75" y="559.5" ></text>
</g>
<g >
<title>btr_block_get_func(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, dict_index_t const*, mtr_t*) (2 samples, 1.37%)</title><rect x="381.8" y="453" width="16.1" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="384.78" y="463.5" ></text>
</g>
<g >
<title>row_ins_index_entry(dict_index_t*, dtuple_t*, unsigned int&amp;, que_thr_t*) (45 samples, 30.82%)</title><rect x="163.6" y="549" width="363.7" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="166.56" y="559.5" >row_ins_index_entry(dict_index_t*, dtuple_t*, uns..</text>
</g>
<g >
<title>row_ins(ins_node_t*, que_thr_t*) (45 samples, 30.82%)</title><rect x="163.6" y="581" width="363.7" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="166.56" y="591.5" >row_ins(ins_node_t*, que_thr_t*)</text>
</g>
<g >
<title>Iterate&lt;Find_page&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (3 samples, 2.05%)</title><rect x="955.6" y="485" width="24.3" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="958.62" y="495.5" >I..</text>
</g>
<g >
<title>buf_pool_validate_instance(buf_pool_t*) (1 samples, 0.68%)</title><rect x="195.9" y="405" width="8.1" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="198.89" y="415.5" ></text>
</g>
<g >
<title>Fil_system::shard_by_id(unsigned int) const (1 samples, 0.68%)</title><rect x="494.9" y="437" width="8.1" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="497.93" y="447.5" ></text>
</g>
<g >
<title>page_rec_check(unsigned char const*) (1 samples, 0.68%)</title><rect x="511.1" y="437" width="8.1" height="15.0" fill="rgb(123,123,230)" rx="2" ry="2" />
<text  x="514.10" y="447.5" ></text>
</g>
<g >
<title>DoTrace(CODE_STATE*) (1 samples, 0.68%)</title><rect x="567.7" y="645" width="8.1" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="570.67" y="655.5" ></text>
</g>
<g >
<title>crc32c_pcl_intel_update (1 samples, 0.68%)</title><rect x="1157.7" y="133" width="8.1" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="1160.67" y="143.5" ></text>
</g>
<g >
<title>Protocol_classic::get_command(COM_DATA*, enum_server_command*) (1 samples, 0.68%)</title><rect x="58.5" y="757" width="8.1" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="61.49" y="767.5" ></text>
</g>
<g >
<title>buf_flush_try_neighbors(page_id_t const&amp;, buf_flush_t, unsigned long, unsigned long) (2 samples, 1.37%)</title><rect x="1173.8" y="501" width="16.2" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="1176.84" y="511.5" ></text>
</g>
<g >
<title>Iterate&lt;Find_page&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (1 samples, 0.68%)</title><rect x="1044.5" y="485" width="8.1" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="1047.52" y="495.5" ></text>
</g>
<g >
<title>buf_do_flush_list_batch(buf_pool_t*, unsigned long, unsigned long) (2 samples, 1.37%)</title><rect x="1173.8" y="533" width="16.2" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="1176.84" y="543.5" ></text>
</g>
<g >
<title>Query_tables_list::set_stmt_accessed_table(Query_tables_list::enum_stmt_accessed_table) (1 samples, 0.68%)</title><rect x="527.3" y="661" width="8.0" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="530.26" y="671.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.68%)</title><rect x="834.4" y="405" width="8.1" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="837.38" y="415.5" ></text>
</g>
<g >
<title>poll_select_finish (1 samples, 0.68%)</title><rect x="58.5" y="533" width="8.1" height="15.0" fill="rgb(111,111,219)" rx="2" ry="2" />
<text  x="61.49" y="543.5" ></text>
</g>
<g >
<title>ext4_mark_iloc_dirty (1 samples, 0.68%)</title><rect x="1157.7" y="229" width="8.1" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="1160.67" y="239.5" ></text>
</g>
<g >
<title>buf_page_t::Latching_rules_helpers::assert_latches_let_distinguish(buf_page_t const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) (3 samples, 2.05%)</title><rect x="1084.9" y="453" width="24.3" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="1087.93" y="463.5" >b..</text>
</g>
<g >
<title>void Detached_thread::operator()&lt;void (*)(log_t*), log_t*&gt;(void (*&amp;&amp;)(log_t*), log_t*&amp;&amp;) (1 samples, 0.68%)</title><rect x="1125.3" y="677" width="8.1" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="1128.34" y="687.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void (*&amp;)(log_t*), log_t*&amp;&gt;::type std::__invoke&lt;void (*&amp;)(log_t*), log_t*&amp;&gt;(void (*&amp;)(log_t*), log_t*&amp;) (1 samples, 0.68%)</title><rect x="1125.3" y="629" width="8.1" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="1128.34" y="639.5" ></text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (5 samples, 3.42%)</title><rect x="777.8" y="437" width="40.4" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="780.81" y="447.5" >mtr..</text>
</g>
<g >
<title>std::__invoke_result&lt;void (*&amp;)(log_t*), log_t*&amp;&gt;::type std::__invoke&lt;void (*&amp;)(log_t*), log_t*&amp;&gt;(void (*&amp;)(log_t*), log_t*&amp;) (3 samples, 2.05%)</title><rect x="1141.5" y="629" width="24.3" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="1144.51" y="639.5" >s..</text>
</g>
<g >
<title>pfs_os_file_write_func(IORequest&amp;, char const*, pfs_os_file_t, void const*, unsigned long, unsigned long, ut::Location) (2 samples, 1.37%)</title><rect x="1149.6" y="501" width="16.2" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="1152.59" y="511.5" ></text>
</g>
<g >
<title>digest_add_token(sql_digest_state*, unsigned int, Lexer_yystype*) (1 samples, 0.68%)</title><rect x="1109.2" y="613" width="8.1" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="1112.18" y="623.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::locked(TTASEventMutex&lt;GenericPolicy&gt; const*, char const*, unsigned long) (1 samples, 0.68%)</title><rect x="438.4" y="405" width="8.0" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="441.36" y="415.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Release_all&gt; &gt;(Iterate&lt;Release_all&gt;&amp;) const (1 samples, 0.68%)</title><rect x="204.0" y="373" width="8.1" height="15.0" fill="rgb(114,114,222)" rx="2" ry="2" />
<text  x="206.97" y="383.5" ></text>
</g>
<g >
<title>innobase_commit_low(trx_t*) (32 samples, 21.92%)</title><rect x="640.4" y="565" width="258.6" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="643.41" y="575.5" >innobase_commit_low(trx_t*)</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.68%)</title><rect x="1133.4" y="789" width="8.1" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="1136.42" y="799.5" ></text>
</g>
<g >
<title>__x64_sys_pwrite64 (1 samples, 0.68%)</title><rect x="1157.7" y="373" width="8.1" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="1160.67" y="383.5" ></text>
</g>
<g >
<title>void hardware::consume_chunks&lt;5440ul, 3ul, hardware::use_pclmul&gt;(unsigned int&amp;, unsigned char const*&amp;, unsigned long&amp;) (1 samples, 0.68%)</title><rect x="1173.8" y="389" width="8.1" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="1176.84" y="399.5" ></text>
</g>
<g >
<title>Wait_stats Log_thread_waiting::wait&lt;log_write_notifier(log_t*)::{lambda(bool)#1}&gt;(log_write_notifier(log_t*)::{lambda(bool)#1}) (1 samples, 0.68%)</title><rect x="1125.3" y="581" width="8.1" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="1128.34" y="591.5" ></text>
</g>
<g >
<title>trx_rsegf_get(unsigned int, unsigned int, page_size_t const&amp;, mtr_t*) (2 samples, 1.37%)</title><rect x="834.4" y="453" width="16.1" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="837.38" y="463.5" ></text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt;::_M_invoke&lt;0ul, 1ul, 2ul&gt;(std::_Index_tuple&lt;0ul, 1ul, 2ul&gt;) (1 samples, 0.68%)</title><rect x="1125.3" y="725" width="8.1" height="15.0" fill="rgb(131,131,236)" rx="2" ry="2" />
<text  x="1128.34" y="735.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.68%)</title><rect x="438.4" y="389" width="8.0" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="441.36" y="399.5" ></text>
</g>
<g >
<title>ext4_inode_csum (1 samples, 0.68%)</title><rect x="1157.7" y="165" width="8.1" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="1160.67" y="175.5" ></text>
</g>
<g >
<title>Log_files_write_impl::write_blocks(log_t&amp;, unsigned char*, unsigned long, unsigned long) (3 samples, 2.05%)</title><rect x="1141.5" y="549" width="24.3" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="1144.51" y="559.5" >L..</text>
</g>
<g >
<title>std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::insert(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, buf_io_fix const&amp;) (1 samples, 0.68%)</title><rect x="826.3" y="165" width="8.1" height="15.0" fill="rgb(86,86,196)" rx="2" ry="2" />
<text  x="829.30" y="175.5" ></text>
</g>
<g >
<title>THD::issue_unsafe_warnings() (1 samples, 0.68%)</title><rect x="82.7" y="661" width="8.1" height="15.0" fill="rgb(83,83,192)" rx="2" ry="2" />
<text  x="85.74" y="671.5" ></text>
</g>
<g >
<title>std::map&lt;unsigned int, unsigned int, std::less&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, unsigned int&gt; &gt; &gt;::~map() (1 samples, 0.68%)</title><rect x="131.2" y="549" width="8.1" height="15.0" fill="rgb(109,109,216)" rx="2" ry="2" />
<text  x="134.23" y="559.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::Binlog_ofile::flush() (1 samples, 0.68%)</title><rect x="616.2" y="629" width="8.0" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="619.16" y="639.5" ></text>
</g>
<g >
<title>do_futex (1 samples, 0.68%)</title><rect x="1165.8" y="757" width="8.0" height="15.0" fill="rgb(135,135,241)" rx="2" ry="2" />
<text  x="1168.75" y="767.5" ></text>
</g>
<g >
<title>fsp_is_undo_tablespace(unsigned int) (1 samples, 0.68%)</title><rect x="494.9" y="421" width="8.1" height="15.0" fill="rgb(100,100,209)" rx="2" ry="2" />
<text  x="497.93" y="431.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_enter() (1 samples, 0.68%)</title><rect x="462.6" y="357" width="8.1" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="465.60" y="367.5" ></text>
</g>
<g >
<title>bitmap_free(MY_BITMAP*) (1 samples, 0.68%)</title><rect x="147.4" y="517" width="8.1" height="15.0" fill="rgb(109,109,216)" rx="2" ry="2" />
<text  x="150.40" y="527.5" ></text>
</g>
<g >
<title>std::this_thread::get_id() (1 samples, 0.68%)</title><rect x="1117.3" y="453" width="8.0" height="15.0" fill="rgb(85,85,195)" rx="2" ry="2" />
<text  x="1120.26" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_M_drop_node(std::_Rb_tree_node&lt;buf_io_fix&gt;*) (1 samples, 0.68%)</title><rect x="195.9" y="261" width="8.1" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="198.89" y="271.5" ></text>
</g>
<g >
<title>void dd::cache::Dictionary_client::remove_uncommitted_objects&lt;dd::Event&gt;(bool) (1 samples, 0.68%)</title><rect x="575.8" y="677" width="8.0" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="578.75" y="687.5" ></text>
</g>
<g >
<title>unsigned int hardware::crc32&lt;hardware::use_pclmul&gt;(unsigned int, unsigned char const*, unsigned long) (1 samples, 0.68%)</title><rect x="1173.8" y="405" width="8.1" height="15.0" fill="rgb(110,110,217)" rx="2" ry="2" />
<text  x="1176.84" y="415.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::do_write_cache(Binlog_cache_storage*, Binlog_event_writer*) (1 samples, 0.68%)</title><rect x="907.1" y="549" width="8.1" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="910.12" y="559.5" ></text>
</g>
<g >
<title>_db_enter_(char const*, int, char const*, unsigned int, _db_stack_frame_*) (1 samples, 0.68%)</title><rect x="551.5" y="677" width="8.1" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="554.51" y="687.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt; &gt;::~_State_impl() (3 samples, 2.05%)</title><rect x="1141.5" y="805" width="24.3" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="1144.51" y="815.5" >s..</text>
</g>
<g >
<title>Sql_cmd_dml::execute(THD*) (57 samples, 39.04%)</title><rect x="82.7" y="709" width="460.7" height="15.0" fill="rgb(94,94,202)" rx="2" ry="2" />
<text  x="85.74" y="719.5" >Sql_cmd_dml::execute(THD*)</text>
</g>
<g >
<title>memo_slot_release(mtr_memo_slot_t*) (2 samples, 1.37%)</title><rect x="680.8" y="357" width="16.2" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="683.82" y="367.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::trylock(char const*, unsigned int) (1 samples, 0.68%)</title><rect x="688.9" y="229" width="8.1" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="691.90" y="239.5" ></text>
</g>
<g >
<title>log_files_oldest_needed_lsn(log_t const&amp;) (1 samples, 0.68%)</title><rect x="1117.3" y="517" width="8.0" height="15.0" fill="rgb(138,138,244)" rx="2" ry="2" />
<text  x="1120.26" y="527.5" ></text>
</g>
<g >
<title>std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; std::__copy_move_a1&lt;false, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; &gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;) (1 samples, 0.68%)</title><rect x="478.8" y="293" width="8.0" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="481.77" y="303.5" ></text>
</g>
<g >
<title>mtr_t::commit() (1 samples, 0.68%)</title><rect x="204.0" y="405" width="8.1" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="206.97" y="415.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.68%)</title><rect x="826.3" y="405" width="8.1" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="829.30" y="415.5" ></text>
</g>
<g >
<title>trx_undo_page_get(page_id_t const&amp;, page_size_t const&amp;, mtr_t*) (1 samples, 0.68%)</title><rect x="769.7" y="437" width="8.1" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="772.73" y="447.5" ></text>
</g>
<g >
<title>ibuf_inside(mtr_t const*) (1 samples, 0.68%)</title><rect x="1076.8" y="517" width="8.1" height="15.0" fill="rgb(136,136,241)" rx="2" ry="2" />
<text  x="1079.85" y="527.5" ></text>
</g>
<g >
<title>Write_rows_log_event::Write_rows_log_event(THD*, TABLE*, Table_id const&amp;, bool, unsigned char const*) (1 samples, 0.68%)</title><rect x="107.0" y="581" width="8.1" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="109.99" y="591.5" ></text>
</g>
<g >
<title>trx_write_serialisation_history(trx_t*, mtr_t*) (14 samples, 9.59%)</title><rect x="777.8" y="501" width="113.2" height="15.0" fill="rgb(107,107,214)" rx="2" ry="2" />
<text  x="780.81" y="511.5" >trx_write_ser..</text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::complement(std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.68%)</title><rect x="826.3" y="309" width="8.1" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="829.30" y="319.5" ></text>
</g>
<g >
<title>std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; std::__set_difference&lt;std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_less_iter&gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_less_iter) (1 samples, 0.68%)</title><rect x="478.8" y="341" width="8.0" height="15.0" fill="rgb(110,110,218)" rx="2" ry="2" />
<text  x="481.77" y="351.5" ></text>
</g>
<g >
<title>std::array&lt;unsigned long, 8ul&gt;::operator[](unsigned long) (1 samples, 0.68%)</title><rect x="705.1" y="277" width="8.1" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="708.07" y="287.5" ></text>
</g>
<g >
<title>__ip_queue_xmit (3 samples, 2.05%)</title><rect x="10.0" y="597" width="24.2" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="13.00" y="607.5" >_..</text>
</g>
<g >
<title>new_sync_write (3 samples, 2.05%)</title><rect x="10.0" y="725" width="24.2" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="13.00" y="735.5" >n..</text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void (*&amp;)()&gt;(std::__invoke_other, void (*&amp;)()) (2 samples, 1.37%)</title><rect x="1173.8" y="613" width="16.2" height="15.0" fill="rgb(131,131,236)" rx="2" ry="2" />
<text  x="1176.84" y="623.5" ></text>
</g>
<g >
<title>btr_get_search_table(dict_index_t const*) (1 samples, 0.68%)</title><rect x="365.6" y="469" width="8.1" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="368.62" y="479.5" ></text>
</g>
<g >
<title>MDL_map::find(LF_PINS*, MDL_key const*, bool*) (1 samples, 0.68%)</title><rect x="591.9" y="629" width="8.1" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="594.92" y="639.5" ></text>
</g>
<g >
<title>mtr_write_log_t::operator()(dyn_buf_t&lt;512ul&gt;::block_t const*) (1 samples, 0.68%)</title><rect x="640.4" y="453" width="8.1" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="643.41" y="463.5" ></text>
</g>
<g >
<title>rw_lock_x_unlock(rw_lock_t*) (2 samples, 1.37%)</title><rect x="680.8" y="325" width="16.2" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="683.82" y="335.5" ></text>
</g>
<g >
<title>rw_lock_s_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.68%)</title><rect x="931.4" y="437" width="8.1" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="934.37" y="447.5" ></text>
</g>
<g >
<title>mtr_t::memo_contains_page_flagged(unsigned char const*, unsigned long) const (1 samples, 0.68%)</title><rect x="923.3" y="533" width="8.1" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="926.29" y="543.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (1 samples, 0.68%)</title><rect x="826.3" y="437" width="8.1" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="829.30" y="447.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 1.37%)</title><rect x="1173.8" y="821" width="16.2" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="1176.84" y="831.5" ></text>
</g>
<g >
<title>hash_assert_can_search(hash_table_t*, unsigned long) (1 samples, 0.68%)</title><rect x="729.3" y="325" width="8.1" height="15.0" fill="rgb(96,96,204)" rx="2" ry="2" />
<text  x="732.32" y="335.5" ></text>
</g>
<g >
<title>std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::~set() (1 samples, 0.68%)</title><rect x="486.8" y="405" width="8.1" height="15.0" fill="rgb(109,109,216)" rx="2" ry="2" />
<text  x="489.85" y="415.5" ></text>
</g>
<g >
<title>rw_lock_s_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.68%)</title><rect x="446.4" y="421" width="8.1" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="449.44" y="431.5" ></text>
</g>
<g >
<title>sock_def_readable (2 samples, 1.37%)</title><rect x="10.0" y="373" width="16.2" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>buf_page_t::io_responsibility_t::current_thread_is_responsible() const (1 samples, 0.68%)</title><rect x="1084.9" y="421" width="8.1" height="15.0" fill="rgb(105,105,212)" rx="2" ry="2" />
<text  x="1087.93" y="431.5" ></text>
</g>
<g >
<title>trx_prepare(trx_t*) (23 samples, 15.75%)</title><rect x="923.3" y="613" width="185.9" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="926.29" y="623.5" >trx_prepare(trx_t*)</text>
</g>
<g >
<title>btr_height_get(dict_index_t*, mtr_t*) (2 samples, 1.37%)</title><rect x="381.8" y="501" width="16.1" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="384.78" y="511.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void (*&amp;)(log_t*), log_t*&amp;&gt;(std::__invoke_other, void (*&amp;)(log_t*), log_t*&amp;) (1 samples, 0.68%)</title><rect x="1125.3" y="613" width="8.1" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="1128.34" y="623.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (2 samples, 1.37%)</title><rect x="834.4" y="421" width="16.1" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="837.38" y="431.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void (*(log_t*))(log_t*)&gt;::__call&lt;void, , 0ul&gt;(std::tuple&lt;&gt;&amp;&amp;, std::_Index_tuple&lt;0ul&gt;) (1 samples, 0.68%)</title><rect x="1125.3" y="645" width="8.1" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="1128.34" y="655.5" ></text>
</g>
<g >
<title>bool std::atomic_compare_exchange_strong&lt;long long&gt;(std::atomic&lt;long long&gt;*, std::__type_identity&lt;long long&gt;::type*, std::__type_identity&lt;long long&gt;::type) (1 samples, 0.68%)</title><rect x="600.0" y="645" width="8.1" height="15.0" fill="rgb(136,136,242)" rx="2" ry="2" />
<text  x="603.00" y="655.5" ></text>
</g>
<g >
<title>rw_lock_remove_debug_info(rw_lock_t*, unsigned long, unsigned long) (1 samples, 0.68%)</title><rect x="1004.1" y="373" width="8.1" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="1007.11" y="383.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (3 samples, 2.05%)</title><rect x="10.0" y="405" width="24.2" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >t..</text>
</g>
<g >
<title>buf_page_t::is_io_fix_write() const (3 samples, 2.05%)</title><rect x="1084.9" y="469" width="24.3" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="1087.93" y="479.5" >b..</text>
</g>
<g >
<title>rw_lock_x_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.68%)</title><rect x="462.6" y="405" width="8.1" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="465.60" y="415.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::locked(TTASEventMutex&lt;GenericPolicy&gt; const*, char const*, unsigned long) (1 samples, 0.68%)</title><rect x="446.4" y="341" width="8.1" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="449.44" y="351.5" ></text>
</g>
<g >
<title>ut_list_base&lt;rw_lock_debug_t, ut_list_base_explicit_getter&lt;rw_lock_debug_t, &amp;rw_lock_debug_t::list&gt; &gt;::base_iterator&lt;rw_lock_debug_t const&gt;::base_iterator(rw_lock_debug_t const*) (1 samples, 0.68%)</title><rect x="834.4" y="309" width="8.1" height="15.0" fill="rgb(117,117,223)" rx="2" ry="2" />
<text  x="837.38" y="319.5" ></text>
</g>
<g >
<title>__x64_sys_futex (1 samples, 0.68%)</title><rect x="1165.8" y="773" width="8.0" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="1168.75" y="783.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::flush_cache_to_file(unsigned long long*) (1 samples, 0.68%)</title><rect x="616.2" y="645" width="8.0" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="619.16" y="655.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.68%)</title><rect x="899.0" y="581" width="8.1" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="902.04" y="591.5" ></text>
</g>
<g >
<title>IO_CACHE_ostream::flush() (1 samples, 0.68%)</title><rect x="616.2" y="613" width="8.0" height="15.0" fill="rgb(109,109,216)" rx="2" ry="2" />
<text  x="619.16" y="623.5" ></text>
</g>
<g >
<title>buf_flush_write_block_low(buf_page_t*, buf_flush_t, bool) (2 samples, 1.37%)</title><rect x="1173.8" y="469" width="16.2" height="15.0" fill="rgb(135,135,241)" rx="2" ry="2" />
<text  x="1176.84" y="479.5" ></text>
</g>
<g >
<title>Iterate&lt;Find_page&gt;::operator()(dyn_buf_t&lt;512ul&gt;::block_t*) (1 samples, 0.68%)</title><rect x="721.2" y="373" width="8.1" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="724.23" y="383.5" ></text>
</g>
<g >
<title>ib_log_writer (4 samples, 2.74%)</title><rect x="1141.5" y="837" width="32.3" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="1144.51" y="847.5" >ib..</text>
</g>
<g >
<title>trx_prepare_for_mysql(trx_t*) (23 samples, 15.75%)</title><rect x="923.3" y="629" width="185.9" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="926.29" y="639.5" >trx_prepare_for_mysql(tr..</text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.68%)</title><rect x="729.3" y="405" width="8.1" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="732.32" y="415.5" ></text>
</g>
<g >
<title>mach_read_ulint(unsigned char const*, mlog_id_t) (1 samples, 0.68%)</title><rect x="777.8" y="421" width="8.1" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="780.81" y="431.5" ></text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.68%)</title><rect x="503.0" y="437" width="8.1" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="506.01" y="447.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;bool, cs::util::ReplicatedColumnsView::ReplicatedColumnsView(TABLE const*, THD const*)::{lambda(TABLE const*, unsigned long)#1}&amp;, TABLE const*, unsigned long&gt;, bool&gt;::type std::__invoke_r&lt;bool, cs::util::ReplicatedColumnsView::ReplicatedColumnsView(TABLE const*, THD const*)::{lambda(TABLE const*, unsigned long)#1}&amp;, TABLE const*, unsigned long&gt;(cs::util::ReplicatedColumnsView::ReplicatedColumnsView(TABLE const*, THD const*)::{lambda(TABLE const*, unsigned long)#1}&amp;, TABLE const*&amp;&amp;, unsigned long&amp;&amp;) (1 samples, 0.68%)</title><rect x="107.0" y="469" width="8.1" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="109.99" y="479.5" ></text>
</g>
<g >
<title>rw_lock_s_unlock(rw_lock_t*) (1 samples, 0.68%)</title><rect x="204.0" y="293" width="8.1" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="206.97" y="303.5" ></text>
</g>
<g >
<title>log_files_governor_iteration_low(log_t&amp;, bool) (1 samples, 0.68%)</title><rect x="1117.3" y="565" width="8.0" height="15.0" fill="rgb(135,135,241)" rx="2" ry="2" />
<text  x="1120.26" y="575.5" ></text>
</g>
<g >
<title>(anonymous namespace)::finish_transaction_in_engines(THD*, bool, bool) (35 samples, 23.97%)</title><rect x="624.2" y="629" width="282.9" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="627.25" y="639.5" >(anonymous namespace)::finish_transac..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.68%)</title><rect x="656.6" y="421" width="8.1" height="15.0" fill="rgb(107,107,215)" rx="2" ry="2" />
<text  x="659.58" y="431.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (3 samples, 2.05%)</title><rect x="10.0" y="533" width="24.2" height="15.0" fill="rgb(123,123,229)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >_..</text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (3 samples, 2.05%)</title><rect x="1084.9" y="533" width="24.3" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="1087.93" y="543.5" >b..</text>
</g>
<g >
<title>log_buffer_reserve(log_t&amp;, unsigned long) (2 samples, 1.37%)</title><rect x="648.5" y="469" width="16.2" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="651.49" y="479.5" ></text>
</g>
<g >
<title>net_rx_action (3 samples, 2.05%)</title><rect x="10.0" y="517" width="24.2" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >n..</text>
</g>
<g >
<title>mtr_t::memo_contains_page_flagged(unsigned char const*, unsigned long) const (4 samples, 2.74%)</title><rect x="858.6" y="421" width="32.4" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="861.63" y="431.5" >mt..</text>
</g>
<g >
<title>btr_node_ptr_get_child_page_no(unsigned char const*, unsigned long const*) (1 samples, 0.68%)</title><rect x="430.3" y="485" width="8.1" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="433.27" y="495.5" ></text>
</g>
<g >
<title>trx_rsegf_get(unsigned int, unsigned int, page_size_t const&amp;, mtr_t*) (1 samples, 0.68%)</title><rect x="228.2" y="405" width="8.1" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="231.22" y="415.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_exit() (1 samples, 0.68%)</title><rect x="939.5" y="469" width="8.0" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="942.45" y="479.5" ></text>
</g>
<g >
<title>mtr_t::s_lock(rw_lock_t*, ut::Location) (1 samples, 0.68%)</title><rect x="503.0" y="485" width="8.1" height="15.0" fill="rgb(88,88,198)" rx="2" ry="2" />
<text  x="506.01" y="495.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (2 samples, 1.37%)</title><rect x="834.4" y="437" width="16.1" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="837.38" y="447.5" ></text>
</g>
<g >
<title>__strchr_avx2 (1 samples, 0.68%)</title><rect x="82.7" y="645" width="8.1" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="85.74" y="655.5" ></text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::locked(TTASEventMutex&lt;GenericPolicy&gt; const&amp;, char const*, unsigned long) (1 samples, 0.68%)</title><rect x="446.4" y="357" width="8.1" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="449.44" y="367.5" ></text>
</g>
<g >
<title>unlock_stack(CODE_STATE*) (1 samples, 0.68%)</title><rect x="147.4" y="469" width="8.1" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="150.40" y="479.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void (*())()&gt;::__call&lt;void&gt;(std::tuple&lt;&gt;&amp;&amp;, std::_Index_tuple&lt;&gt;) (2 samples, 1.37%)</title><rect x="1173.8" y="645" width="16.2" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="1176.84" y="655.5" ></text>
</g>
<g >
<title>Rpl_transaction_write_set_ctx::clear_write_set() (1 samples, 0.68%)</title><rect x="624.2" y="549" width="8.1" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="627.25" y="559.5" ></text>
</g>
<g >
<title>DoTrace(CODE_STATE*) (1 samples, 0.68%)</title><rect x="397.9" y="469" width="8.1" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="400.95" y="479.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (1 samples, 0.68%)</title><rect x="1157.7" y="261" width="8.1" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="1160.67" y="271.5" ></text>
</g>
<g >
<title>MDL_context::acquire_lock(MDL_request*, unsigned long) (2 samples, 1.37%)</title><rect x="583.8" y="677" width="16.2" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="586.84" y="687.5" ></text>
</g>
<g >
<title>mtr_t::memo_push(void*, mtr_memo_type_t) (1 samples, 0.68%)</title><rect x="179.7" y="405" width="8.1" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="182.73" y="415.5" ></text>
</g>
<g >
<title>lock_table_dequeue(ib_lock_t*) (1 samples, 0.68%)</title><rect x="672.7" y="373" width="8.1" height="15.0" fill="rgb(84,84,193)" rx="2" ry="2" />
<text  x="675.74" y="383.5" ></text>
</g>
<g >
<title>buf_page_t::Latching_rules_helpers::assert_latches_let_distinguish(buf_page_t const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) (1 samples, 0.68%)</title><rect x="1068.8" y="437" width="8.0" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="1071.77" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, std::pair&lt;unsigned int const, unsigned int&gt;, std::_Select1st&lt;std::pair&lt;unsigned int const, unsigned int&gt; &gt;, std::less&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, unsigned int&gt; &gt; &gt;::_M_mbegin() const (1 samples, 0.68%)</title><rect x="131.2" y="517" width="8.1" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="134.23" y="527.5" ></text>
</g>
<g >
<title>buf_page_t::is_io_fix_write() const (1 samples, 0.68%)</title><rect x="195.9" y="389" width="8.1" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="198.89" y="399.5" ></text>
</g>
<g >
<title>LatchDebug::instance() (1 samples, 0.68%)</title><rect x="446.4" y="325" width="8.1" height="15.0" fill="rgb(81,81,191)" rx="2" ry="2" />
<text  x="449.44" y="335.5" ></text>
</g>
<g >
<title>std::atomic&lt;buf_io_fix&gt;::load(std::memory_order) const (1 samples, 0.68%)</title><rect x="454.5" y="405" width="8.1" height="15.0" fill="rgb(108,108,215)" rx="2" ry="2" />
<text  x="457.52" y="415.5" ></text>
</g>
<g >
<title>rw_lock_s_unlock_func(unsigned long, rw_lock_t*) (1 samples, 0.68%)</title><rect x="996.0" y="405" width="8.1" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="999.03" y="415.5" ></text>
</g>
<g >
<title>bool locksys::try_relatch_trx_and_shard_and_do&lt;locksys::try_release_all_locks(trx_t*)::{lambda()#1}&gt;(ib_lock_t const*, locksys::try_release_all_locks(trx_t*)::{lambda()#1}&amp;&amp;) (1 samples, 0.68%)</title><rect x="672.7" y="437" width="8.1" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="675.74" y="447.5" ></text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::is_transition_possible(std::bitset&lt;3ul&gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.68%)</title><rect x="1101.1" y="389" width="8.1" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="1104.10" y="399.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.68%)</title><rect x="729.3" y="389" width="8.1" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="732.32" y="399.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 2.05%)</title><rect x="10.0" y="821" width="24.2" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="13.00" y="831.5" >[..</text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.68%)</title><rect x="341.4" y="293" width="8.1" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="344.37" y="303.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Find_page&gt; &gt;(Iterate&lt;Find_page&gt;&amp;) const (1 samples, 0.68%)</title><rect x="721.2" y="389" width="8.1" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="724.23" y="399.5" ></text>
</g>
<g >
<title>trx_undo_page_get(page_id_t const&amp;, page_size_t const&amp;, mtr_t*) (1 samples, 0.68%)</title><rect x="826.3" y="453" width="8.1" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="829.30" y="463.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, Detached_thread, void (*)(log_t*), log_t*&gt;(std::__invoke_other, Detached_thread&amp;&amp;, void (*&amp;&amp;)(log_t*), log_t*&amp;&amp;) (3 samples, 2.05%)</title><rect x="1141.5" y="693" width="24.3" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="1144.51" y="703.5" >v..</text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (7 samples, 4.79%)</title><rect x="777.8" y="469" width="56.6" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="780.81" y="479.5" >trx_r..</text>
</g>
<g >
<title>row_insert_for_mysql_using_ins_graph(unsigned char const*, row_prebuilt_t*) (45 samples, 30.82%)</title><rect x="163.6" y="613" width="363.7" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="166.56" y="623.5" >row_insert_for_mysql_using_ins_graph(unsigned cha..</text>
</g>
<g >
<title>trx_undo_gtid_add_update_undo(trx_t*, bool, bool) (1 samples, 0.68%)</title><rect x="891.0" y="533" width="8.0" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="893.96" y="543.5" ></text>
</g>
<g >
<title>DoTrace(CODE_STATE*) (1 samples, 0.68%)</title><rect x="155.5" y="581" width="8.1" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="158.48" y="591.5" ></text>
</g>
<g >
<title>std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;::operator=(buf_io_fix const&amp;) (1 samples, 0.68%)</title><rect x="826.3" y="181" width="8.1" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="829.30" y="191.5" ></text>
</g>
<g >
<title>page_rec_validate(unsigned char const*, unsigned long const*) (1 samples, 0.68%)</title><rect x="414.1" y="453" width="8.1" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="417.11" y="463.5" ></text>
</g>
<g >
<title>trx_rseg_t::unlatch() (5 samples, 3.42%)</title><rect x="737.4" y="469" width="40.4" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="740.40" y="479.5" >trx..</text>
</g>
<g >
<title>file_update_time (1 samples, 0.68%)</title><rect x="1157.7" y="309" width="8.1" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="1160.67" y="319.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_enter() (2 samples, 1.37%)</title><rect x="680.8" y="245" width="16.2" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="683.82" y="255.5" ></text>
</g>
<g >
<title>log_write_notifier(log_t*) (1 samples, 0.68%)</title><rect x="1125.3" y="597" width="8.1" height="15.0" fill="rgb(136,136,241)" rx="2" ry="2" />
<text  x="1128.34" y="607.5" ></text>
</g>
<g >
<title>unsigned int hardware::consume_chunk&lt;5440ul, 3ul, hardware::use_pclmul&gt;(unsigned int, unsigned char const*) (1 samples, 0.68%)</title><rect x="1173.8" y="373" width="8.1" height="15.0" fill="rgb(134,134,240)" rx="2" ry="2" />
<text  x="1176.84" y="383.5" ></text>
</g>
<g >
<title>buf_page_t::get_oldest_lsn() const (1 samples, 0.68%)</title><rect x="1060.7" y="437" width="8.1" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="1063.68" y="447.5" ></text>
</g>
<g >
<title>buf_page_t::get_io_fix_snapshot() const (1 samples, 0.68%)</title><rect x="454.5" y="421" width="8.1" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="457.52" y="431.5" ></text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.68%)</title><rect x="438.4" y="469" width="8.0" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="441.36" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, char const*) (1 samples, 0.68%)</title><rect x="1125.3" y="533" width="8.1" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="1128.34" y="543.5" ></text>
</g>
<g >
<title>hash_get_lock(hash_table_t*, unsigned long) (1 samples, 0.68%)</title><rect x="729.3" y="309" width="8.1" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="732.32" y="319.5" ></text>
</g>
<g >
<title>ut_list_base&lt;rw_lock_debug_t, ut_list_base_explicit_getter&lt;rw_lock_debug_t, &amp;rw_lock_debug_t::list&gt; &gt;::get_node(rw_lock_debug_t&amp;) (1 samples, 0.68%)</title><rect x="1004.1" y="341" width="8.1" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="1007.11" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_M_erase(std::_Rb_tree_node&lt;buf_io_fix&gt;*) (1 samples, 0.68%)</title><rect x="486.8" y="373" width="8.1" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="489.85" y="383.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::lookup() (1 samples, 0.68%)</title><rect x="931.4" y="469" width="8.1" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="934.37" y="479.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Find_page&gt; &gt;(Iterate&lt;Find_page&gt;&amp;) const (2 samples, 1.37%)</title><rect x="753.6" y="389" width="16.1" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="756.56" y="399.5" ></text>
</g>
<g >
<title>Rows_log_event* THD::binlog_prepare_pending_rows_event&lt;Write_rows_log_event&gt;(TABLE*, unsigned int, unsigned long, bool, unsigned char const*, unsigned int) (1 samples, 0.68%)</title><rect x="107.0" y="597" width="8.1" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="109.99" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::clear() (1 samples, 0.68%)</title><rect x="624.2" y="533" width="8.1" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="627.25" y="543.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.68%)</title><rect x="705.1" y="389" width="8.1" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="708.07" y="399.5" ></text>
</g>
<g >
<title>do_command(THD*) (131 samples, 89.73%)</title><rect x="58.5" y="773" width="1058.8" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="61.49" y="783.5" >do_command(THD*)</text>
</g>
<g >
<title>Table_columns_view&lt;std::function&lt;bool (TABLE const*, unsigned long)&gt; &gt;::init_fields_bitmaps() (1 samples, 0.68%)</title><rect x="107.0" y="517" width="8.1" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="109.99" y="527.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_other&gt;::mtr_add_page(buf_block_t*) (1 samples, 0.68%)</title><rect x="462.6" y="453" width="8.1" height="15.0" fill="rgb(110,110,217)" rx="2" ry="2" />
<text  x="465.60" y="463.5" ></text>
</g>
<g >
<title>do_syscall_64 (3 samples, 2.05%)</title><rect x="10.0" y="773" width="24.2" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="13.00" y="783.5" >d..</text>
</g>
<g >
<title>Table_columns_view&lt;std::function&lt;bool (TABLE const*, unsigned long)&gt; &gt;::set_table(TABLE const*) (1 samples, 0.68%)</title><rect x="147.4" y="549" width="8.1" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="150.40" y="559.5" ></text>
</g>
<g >
<title>_db_enabled_() (1 samples, 0.68%)</title><rect x="535.3" y="661" width="8.1" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="538.34" y="671.5" ></text>
</g>
<g >
<title>buf_wait_for_read(buf_block_t*) (1 samples, 0.68%)</title><rect x="454.5" y="453" width="8.1" height="15.0" fill="rgb(110,110,217)" rx="2" ry="2" />
<text  x="457.52" y="463.5" ></text>
</g>
<g >
<title>binlog_cache_data::flush(THD*, unsigned long long*, bool*) (1 samples, 0.68%)</title><rect x="907.1" y="597" width="8.1" height="15.0" fill="rgb(123,123,230)" rx="2" ry="2" />
<text  x="910.12" y="607.5" ></text>
</g>
<g >
<title>row_ins_clust_index_entry(dict_index_t*, dtuple_t*, que_thr_t*, bool) (29 samples, 19.86%)</title><rect x="163.6" y="533" width="234.3" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="166.56" y="543.5" >row_ins_clust_index_entry(dict_..</text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (7 samples, 4.79%)</title><rect x="834.4" y="469" width="56.6" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="837.38" y="479.5" >trx_r..</text>
</g>
<g >
<title>AutoDebugTrace::~AutoDebugTrace() (1 samples, 0.68%)</title><rect x="147.4" y="501" width="8.1" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="150.40" y="511.5" ></text>
</g>
<g >
<title>Sql_cmd_insert_values::execute_inner(THD*) (55 samples, 37.67%)</title><rect x="82.7" y="693" width="444.6" height="15.0" fill="rgb(123,123,229)" rx="2" ry="2" />
<text  x="85.74" y="703.5" >Sql_cmd_insert_values::execute_inner(THD*)</text>
</g>
<g >
<title>Find_page::operator()(mtr_memo_slot_t*) (2 samples, 1.37%)</title><rect x="963.7" y="469" width="16.2" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="966.70" y="479.5" ></text>
</g>
<g >
<title>rw_lock_s_unlock_func(unsigned long, rw_lock_t*) (1 samples, 0.68%)</title><rect x="204.0" y="261" width="8.1" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="206.97" y="271.5" ></text>
</g>
<g >
<title>buf_page_t::Latching_rules_helpers::assert_latches_let_distinguish(buf_page_t const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) (1 samples, 0.68%)</title><rect x="826.3" y="341" width="8.1" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="829.30" y="351.5" ></text>
</g>
<g >
<title>mach_read_ulint(unsigned char const*, mlog_id_t) (1 samples, 0.68%)</title><rect x="309.0" y="373" width="8.1" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="312.04" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;buf_io_fix&gt;* std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_Alloc_node::operator()&lt;buf_io_fix const&amp;&gt;(buf_io_fix const&amp;) const (1 samples, 0.68%)</title><rect x="478.8" y="165" width="8.0" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="481.77" y="175.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::mtr_add_page(buf_block_t*) (1 samples, 0.68%)</title><rect x="834.4" y="389" width="8.1" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="837.38" y="399.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::Context::locked(TTASEventMutex&lt;GenericPolicy&gt; const*, char const*, unsigned long) (1 samples, 0.68%)</title><rect x="688.9" y="181" width="8.1" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="691.90" y="191.5" ></text>
</g>
<g >
<title>futex_wait_queue (1 samples, 0.68%)</title><rect x="1165.8" y="725" width="8.0" height="15.0" fill="rgb(111,111,219)" rx="2" ry="2" />
<text  x="1168.75" y="735.5" ></text>
</g>
<g >
<title>std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::count(buf_io_fix const&amp;) const (1 samples, 0.68%)</title><rect x="1101.1" y="373" width="8.1" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="1104.10" y="383.5" ></text>
</g>
<g >
<title>Find_page::operator()(mtr_memo_slot_t*) (1 samples, 0.68%)</title><rect x="721.2" y="357" width="8.1" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="724.23" y="367.5" ></text>
</g>
<g >
<title>mtr_t::commit() (3 samples, 2.05%)</title><rect x="640.4" y="501" width="24.3" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="643.41" y="511.5" >m..</text>
</g>
<g >
<title>std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_M_get_node() (1 samples, 0.68%)</title><rect x="826.3" y="69" width="8.1" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="829.30" y="79.5" ></text>
</g>
<g >
<title>_copy_from_user (1 samples, 0.68%)</title><rect x="1133.4" y="741" width="8.1" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="1136.42" y="751.5" ></text>
</g>
<g >
<title>mtr_t::remove_from_debug_list() const (1 samples, 0.68%)</title><rect x="697.0" y="421" width="8.1" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="699.99" y="431.5" ></text>
</g>
<g >
<title>mtr_t::memo_contains_page_flagged(unsigned char const*, unsigned long) const (4 samples, 2.74%)</title><rect x="785.9" y="421" width="32.3" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="788.89" y="431.5" >mt..</text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.68%)</title><rect x="228.2" y="357" width="8.1" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="231.22" y="367.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.68%)</title><rect x="971.8" y="453" width="8.1" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="974.78" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;buf_io_fix&gt;* std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_Alloc_node::operator()&lt;buf_io_fix const&amp;&gt;(buf_io_fix const&amp;) const (1 samples, 0.68%)</title><rect x="826.3" y="101" width="8.1" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="829.30" y="111.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2 samples, 1.37%)</title><rect x="10.0" y="341" width="16.2" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::exit() (1 samples, 0.68%)</title><rect x="357.5" y="245" width="8.1" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="360.53" y="255.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.68%)</title><rect x="1165.8" y="805" width="8.0" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="1168.75" y="815.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.68%)</title><rect x="818.2" y="437" width="8.1" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="821.22" y="447.5" ></text>
</g>
<g >
<title>lock_table_remove_low(ib_lock_t*) (1 samples, 0.68%)</title><rect x="672.7" y="357" width="8.1" height="15.0" fill="rgb(111,111,219)" rx="2" ry="2" />
<text  x="675.74" y="367.5" ></text>
</g>
<g >
<title>trx_rseg_t::unlatch() (11 samples, 7.53%)</title><rect x="996.0" y="581" width="88.9" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="999.03" y="591.5" >trx_rseg_t..</text>
</g>
<g >
<title>rec_offs_comp(unsigned long const*) (1 samples, 0.68%)</title><rect x="430.3" y="469" width="8.1" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="433.27" y="479.5" ></text>
</g>
<g >
<title>btr_cur_search_to_nth_level(dict_index_t*, unsigned long, dtuple_t const*, page_cur_mode_t, unsigned long, btr_cur_t*, unsigned long, char const*, unsigned long, mtr_t*) (12 samples, 8.22%)</title><rect x="430.3" y="501" width="97.0" height="15.0" fill="rgb(123,123,230)" rx="2" ry="2" />
<text  x="433.27" y="511.5" >btr_cur_sea..</text>
</g>
<g >
<title>std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_M_put_node(std::_Rb_tree_node&lt;buf_io_fix&gt;*) (1 samples, 0.68%)</title><rect x="486.8" y="341" width="8.1" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="489.85" y="351.5" ></text>
</g>
<g >
<title>std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; std::__copy_move&lt;false, false, std::bidirectional_iterator_tag&gt;::__copy_m&lt;std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; &gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;) (1 samples, 0.68%)</title><rect x="826.3" y="197" width="8.1" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="829.30" y="207.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;Detached_thread, void (*)(log_t*), log_t*&gt;::type std::__invoke&lt;Detached_thread, void (*)(log_t*), log_t*&gt;(Detached_thread&amp;&amp;, void (*&amp;&amp;)(log_t*), log_t*&amp;&amp;) (3 samples, 2.05%)</title><rect x="1141.5" y="709" width="24.3" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="1144.51" y="719.5" >s..</text>
</g>
<g >
<title>rw_lock_x_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.68%)</title><rect x="228.2" y="293" width="8.1" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="231.22" y="303.5" ></text>
</g>
<g >
<title>vio_socket_io_wait(Vio*, enum_vio_io_event) (1 samples, 0.68%)</title><rect x="58.5" y="629" width="8.1" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="61.49" y="639.5" ></text>
</g>
<g >
<title>trx_rsegf_get_nth_undo(unsigned char*, unsigned long, mtr_t*) (5 samples, 3.42%)</title><rect x="1020.3" y="549" width="40.4" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="1023.27" y="559.5" >trx..</text>
</g>
<g >
<title>std::unordered_set&lt;mtr_t const*, std::hash&lt;mtr_t const*&gt;, std::equal_to&lt;mtr_t const*&gt;, ut::allocator&lt;mtr_t const*, ut::detail::allocator_base_pfs&lt;mtr_t const*&gt; &gt; &gt;::find(mtr_t const* const&amp;) (1 samples, 0.68%)</title><rect x="697.0" y="405" width="8.1" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="699.99" y="415.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.68%)</title><rect x="1044.5" y="469" width="8.1" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="1047.52" y="479.5" ></text>
</g>
<g >
<title>ib_pg_flush_co (2 samples, 1.37%)</title><rect x="1173.8" y="837" width="16.2" height="15.0" fill="rgb(120,120,226)" rx="2" ry="2" />
<text  x="1176.84" y="847.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_enter() (1 samples, 0.68%)</title><rect x="446.4" y="389" width="8.1" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="449.44" y="399.5" ></text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::assert_latches_let_distinguish(std::bitset&lt;3ul&gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (1 samples, 0.68%)</title><rect x="1068.8" y="405" width="8.0" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="1071.77" y="415.5" ></text>
</g>
<g >
<title>buf_io_fix const&amp; std::forward&lt;buf_io_fix const&amp;&gt;(std::remove_reference&lt;buf_io_fix const&amp;&gt;::type&amp;) (1 samples, 0.68%)</title><rect x="478.8" y="117" width="8.0" height="15.0" fill="rgb(106,106,213)" rx="2" ry="2" />
<text  x="481.77" y="127.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (2 samples, 1.37%)</title><rect x="349.5" y="373" width="16.1" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="352.45" y="383.5" ></text>
</g>
<g >
<title>pfs_rw_lock_x_unlock_func(unsigned long, rw_lock_t*) (2 samples, 1.37%)</title><rect x="680.8" y="293" width="16.2" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="683.82" y="303.5" ></text>
</g>
<g >
<title>Table_map_log_event::init_metadata_fields() (2 samples, 1.37%)</title><rect x="131.2" y="581" width="16.2" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="134.23" y="591.5" ></text>
</g>
<g >
<title>buf_page_hash_lock_s_confirm(rw_lock_t*, buf_pool_t const*, page_id_t) (1 samples, 0.68%)</title><rect x="705.1" y="341" width="8.1" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="708.07" y="351.5" ></text>
</g>
<g >
<title>memo_slot_release(mtr_memo_slot_t*) (2 samples, 1.37%)</title><rect x="996.0" y="469" width="16.2" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="999.03" y="479.5" ></text>
</g>
<g >
<title>dd::cache::Local_multi_map&lt;dd::Event&gt;* dd::cache::Object_registry::create_map_if_needed&lt;dd::cache::Local_multi_map&lt;dd::Event&gt; &gt;(std::unique_ptr&lt;dd::cache::Local_multi_map&lt;dd::Event&gt;, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Event&gt; &gt; &gt;*) (1 samples, 0.68%)</title><rect x="575.8" y="613" width="8.0" height="15.0" fill="rgb(136,136,241)" rx="2" ry="2" />
<text  x="578.75" y="623.5" ></text>
</g>
<g >
<title>start_thread (131 samples, 89.73%)</title><rect x="58.5" y="821" width="1058.8" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="61.49" y="831.5" >start_thread</text>
</g>
<g >
<title>mtr_t::read_ulint(unsigned char const*, mlog_id_t) const (2 samples, 1.37%)</title><rect x="713.2" y="421" width="16.1" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="716.15" y="431.5" ></text>
</g>
<g >
<title>MDL_context::release_lock(MDL_ticket*) (1 samples, 0.68%)</title><rect x="600.0" y="677" width="8.1" height="15.0" fill="rgb(89,89,199)" rx="2" ry="2" />
<text  x="603.00" y="687.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (3 samples, 2.05%)</title><rect x="10.0" y="613" width="24.2" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="13.00" y="623.5" >_..</text>
</g>
<g >
<title>__x64_sys_ppoll (1 samples, 0.68%)</title><rect x="58.5" y="565" width="8.1" height="15.0" fill="rgb(108,108,215)" rx="2" ry="2" />
<text  x="61.49" y="575.5" ></text>
</g>
<g >
<title>run_before_dml_hook(THD*) (1 samples, 0.68%)</title><rect x="535.3" y="693" width="8.1" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="538.34" y="703.5" ></text>
</g>
<g >
<title>ext4_inode_csum_set (1 samples, 0.68%)</title><rect x="1157.7" y="181" width="8.1" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="1160.67" y="191.5" ></text>
</g>
<g >
<title>memo_slot_release(mtr_memo_slot_t*) (1 samples, 0.68%)</title><rect x="204.0" y="325" width="8.1" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="206.97" y="335.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_exit() (1 samples, 0.68%)</title><rect x="357.5" y="277" width="8.1" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="360.53" y="287.5" ></text>
</g>
<g >
<title>binlog_cache_mngr::flush(THD*, unsigned long long*, bool*) (1 samples, 0.68%)</title><rect x="907.1" y="613" width="8.1" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="910.12" y="623.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.68%)</title><rect x="220.1" y="341" width="8.1" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="223.14" y="351.5" ></text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt;::_M_invoke&lt;0ul, 1ul, 2ul&gt;(std::_Index_tuple&lt;0ul, 1ul, 2ul&gt;) (1 samples, 0.68%)</title><rect x="1117.3" y="725" width="8.0" height="15.0" fill="rgb(131,131,236)" rx="2" ry="2" />
<text  x="1120.26" y="735.5" ></text>
</g>
<g >
<title>os_file_write_page(IORequest&amp;, char const*, int, unsigned char const*, unsigned long, unsigned long, file::Block const*) (2 samples, 1.37%)</title><rect x="1149.6" y="469" width="16.2" height="15.0" fill="rgb(95,95,204)" rx="2" ry="2" />
<text  x="1152.59" y="479.5" ></text>
</g>
<g >
<title>page_size_t::logical() const (1 samples, 0.68%)</title><rect x="761.6" y="341" width="8.1" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="764.64" y="351.5" ></text>
</g>
<g >
<title>buf_page_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, mtr_t*) (3 samples, 2.05%)</title><rect x="1060.7" y="533" width="24.2" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="1063.68" y="543.5" >b..</text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.68%)</title><rect x="1052.6" y="533" width="8.1" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="1055.60" y="543.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (2 samples, 1.37%)</title><rect x="349.5" y="357" width="16.1" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="352.45" y="367.5" ></text>
</g>
<g >
<title>rec_get_start(unsigned char const*, unsigned long const*) (1 samples, 0.68%)</title><rect x="422.2" y="453" width="8.1" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="425.19" y="463.5" ></text>
</g>
<g >
<title>buf_pool_validate_instance(buf_pool_t*) (3 samples, 2.05%)</title><rect x="470.7" y="437" width="24.2" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="473.68" y="447.5" >b..</text>
</g>
<g >
<title>trx_rsegf_get_nth_undo(unsigned char*, unsigned long, mtr_t*) (2 samples, 1.37%)</title><rect x="713.2" y="437" width="16.1" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="716.15" y="447.5" ></text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (10 samples, 6.85%)</title><rect x="204.0" y="421" width="80.8" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="206.97" y="431.5" >trx_rseg_..</text>
</g>
<g >
<title>locksys::try_release_all_locks(trx_t*) (1 samples, 0.68%)</title><rect x="672.7" y="453" width="8.1" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="675.74" y="463.5" ></text>
</g>
<g >
<title>find_memory_class(unsigned int) (1 samples, 0.68%)</title><rect x="98.9" y="469" width="8.1" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="101.90" y="479.5" ></text>
</g>
<g >
<title>void Detached_thread::operator()&lt;void (*)()&gt;(void (*&amp;&amp;)()) (2 samples, 1.37%)</title><rect x="1173.8" y="677" width="16.2" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="1176.84" y="687.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, Detached_thread, void (*)(log_t*), log_t*&gt;(std::__invoke_other, Detached_thread&amp;&amp;, void (*&amp;&amp;)(log_t*), log_t*&amp;&amp;) (1 samples, 0.68%)</title><rect x="1125.3" y="693" width="8.1" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="1128.34" y="703.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.68%)</title><rect x="58.5" y="581" width="8.1" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="61.49" y="591.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.68%)</title><rect x="769.7" y="405" width="8.1" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="772.73" y="415.5" ></text>
</g>
<g >
<title>buf_page_t::was_io_fix_read() const (1 samples, 0.68%)</title><rect x="454.5" y="437" width="8.1" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="457.52" y="447.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.68%)</title><rect x="769.7" y="389" width="8.1" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="772.73" y="399.5" ></text>
</g>
<g >
<title>page_simple_validate_new(unsigned char const*) (1 samples, 0.68%)</title><rect x="1181.9" y="373" width="8.1" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="1184.92" y="383.5" ></text>
</g>
<g >
<title>net_read_packet(NET*, unsigned long*) (1 samples, 0.68%)</title><rect x="58.5" y="693" width="8.1" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="61.49" y="703.5" ></text>
</g>
<g >
<title>MDL_context::try_acquire_lock_impl(MDL_request*, MDL_ticket**) (2 samples, 1.37%)</title><rect x="583.8" y="661" width="16.2" height="15.0" fill="rgb(88,88,198)" rx="2" ry="2" />
<text  x="586.84" y="671.5" ></text>
</g>
<g >
<title>Delegate::is_empty() (1 samples, 0.68%)</title><rect x="535.3" y="677" width="8.1" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="538.34" y="687.5" ></text>
</g>
<g >
<title>buf_flush_page_coordinator_thread() (2 samples, 1.37%)</title><rect x="1173.8" y="597" width="16.2" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="1176.84" y="607.5" ></text>
</g>
<g >
<title>Find_page::get_block() const (1 samples, 0.68%)</title><rect x="745.5" y="389" width="8.1" height="15.0" fill="rgb(130,130,235)" rx="2" ry="2" />
<text  x="748.48" y="399.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;Detached_thread, void (*)()&gt;::type std::__invoke&lt;Detached_thread, void (*)()&gt;(Detached_thread&amp;&amp;, void (*&amp;&amp;)()) (2 samples, 1.37%)</title><rect x="1173.8" y="709" width="16.2" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="1176.84" y="719.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (2 samples, 1.37%)</title><rect x="1060.7" y="517" width="16.1" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="1063.68" y="527.5" ></text>
</g>
<g >
<title>handler::update_auto_increment() (1 samples, 0.68%)</title><rect x="155.5" y="629" width="8.1" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="158.48" y="639.5" ></text>
</g>
<g >
<title>sock_sendmsg (3 samples, 2.05%)</title><rect x="10.0" y="693" width="24.2" height="15.0" fill="rgb(135,135,241)" rx="2" ry="2" />
<text  x="13.00" y="703.5" >s..</text>
</g>
<g >
<title>dd::cache::Multi_map_base&lt;dd::Event&gt;::Iterator dd::cache::Object_registry::begin&lt;dd::Event&gt;() (1 samples, 0.68%)</title><rect x="575.8" y="661" width="8.0" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="578.75" y="671.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.68%)</title><rect x="276.7" y="325" width="8.1" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="279.71" y="335.5" ></text>
</g>
<g >
<title>trx_rsegf_get(unsigned int, unsigned int, page_size_t const&amp;, mtr_t*) (1 samples, 0.68%)</title><rect x="705.1" y="437" width="8.1" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="708.07" y="447.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;dd::cache::Local_multi_map&lt;dd::Event&gt;*, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Event&gt; &gt; &gt; &gt;::type const&amp; std::get&lt;0ul, dd::cache::Local_multi_map&lt;dd::Event&gt;*, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Event&gt; &gt; &gt;(std::tuple&lt;dd::cache::Local_multi_map&lt;dd::Event&gt;*, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Event&gt; &gt; &gt; const&amp;) (1 samples, 0.68%)</title><rect x="575.8" y="565" width="8.0" height="15.0" fill="rgb(120,120,226)" rx="2" ry="2" />
<text  x="578.75" y="575.5" ></text>
</g>
<g >
<title>page_cur_search_with_match_bytes(buf_block_t const*, dict_index_t const*, dtuple_t const*, page_cur_mode_t, unsigned long*, unsigned long*, unsigned long*, unsigned long*, page_cur_t*) (1 samples, 0.68%)</title><rect x="519.2" y="485" width="8.1" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="522.18" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;buf_io_fix&gt;* std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_M_create_node&lt;buf_io_fix const&amp;&gt;(buf_io_fix const&amp;) (1 samples, 0.68%)</title><rect x="826.3" y="85" width="8.1" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="829.30" y="95.5" ></text>
</g>
<g >
<title>buf_page_t::is_io_fix_write() const (1 samples, 0.68%)</title><rect x="826.3" y="357" width="8.1" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="829.30" y="367.5" ></text>
</g>
<g >
<title>pfs_rw_lock_x_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.68%)</title><rect x="462.6" y="421" width="8.1" height="15.0" fill="rgb(118,118,224)" rx="2" ry="2" />
<text  x="465.60" y="431.5" ></text>
</g>
<g >
<title>tcp_rcv_established (3 samples, 2.05%)</title><rect x="10.0" y="389" width="24.2" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >t..</text>
</g>
<g >
<title>rw_lock_get_debug_info(rw_lock_t const*, std::vector&lt;rw_lock_debug_t const*, std::allocator&lt;rw_lock_debug_t const*&gt; &gt;*) (1 samples, 0.68%)</title><rect x="365.6" y="437" width="8.1" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="368.62" y="447.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool (TABLE const*, unsigned long), cs::util::ReplicatedColumnsView::ReplicatedColumnsView(TABLE const*, THD const*)::{lambda(TABLE const*, unsigned long)#1}&gt;::_M_invoke(std::_Any_data const&amp;, TABLE const*&amp;&amp;, unsigned long&amp;&amp;) (1 samples, 0.68%)</title><rect x="107.0" y="485" width="8.1" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="109.99" y="495.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;int&gt;::operator int() const (1 samples, 0.68%)</title><rect x="996.0" y="373" width="8.1" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="999.03" y="383.5" ></text>
</g>
<g >
<title>buf_flush_do_batch(buf_pool_t*, buf_flush_t, unsigned long, unsigned long, unsigned long*) (2 samples, 1.37%)</title><rect x="1173.8" y="565" width="16.2" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="1176.84" y="575.5" ></text>
</g>
<g >
<title>mtr_t::memo_contains_page_flagged(unsigned char const*, unsigned long) const (3 samples, 2.05%)</title><rect x="745.5" y="405" width="24.2" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="748.48" y="415.5" >m..</text>
</g>
<g >
<title>rw_lock_x_unlock_gen(rw_lock_t*, unsigned long) (1 samples, 0.68%)</title><rect x="1004.1" y="421" width="8.1" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="1007.11" y="431.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::exit() (1 samples, 0.68%)</title><rect x="357.5" y="261" width="8.1" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="360.53" y="271.5" ></text>
</g>
<g >
<title>page_rec_get_next_low(unsigned char const*, unsigned long) (1 samples, 0.68%)</title><rect x="511.1" y="453" width="8.1" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="514.10" y="463.5" ></text>
</g>
<g >
<title>mysql_execute_command(THD*, bool) (127 samples, 86.99%)</title><rect x="82.7" y="725" width="1026.5" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="85.74" y="735.5" >mysql_execute_command(THD*, bool)</text>
</g>
<g >
<title>log_files_access_allowed_validate(log_t const&amp;) (1 samples, 0.68%)</title><rect x="1117.3" y="501" width="8.0" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="1120.26" y="511.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (1 samples, 0.68%)</title><rect x="1117.3" y="773" width="8.0" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="1120.26" y="783.5" ></text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (1 samples, 0.68%)</title><rect x="187.8" y="421" width="8.1" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="190.81" y="431.5" ></text>
</g>
<g >
<title>rw_lock_validate(rw_lock_t const*) (1 samples, 0.68%)</title><rect x="996.0" y="389" width="8.1" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="999.03" y="399.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, Detached_thread, void (*)()&gt;(std::__invoke_other, Detached_thread&amp;&amp;, void (*&amp;&amp;)()) (2 samples, 1.37%)</title><rect x="1173.8" y="693" width="16.2" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="1176.84" y="703.5" ></text>
</g>
<g >
<title>trx_mutex_own(trx_t const*) (1 samples, 0.68%)</title><rect x="664.7" y="437" width="8.0" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="667.66" y="447.5" ></text>
</g>
<g >
<title>Commit_stage_manager::wait_for_ticket_turn(THD*, bool) (1 samples, 0.68%)</title><rect x="608.1" y="597" width="8.1" height="15.0" fill="rgb(81,81,191)" rx="2" ry="2" />
<text  x="611.08" y="607.5" ></text>
</g>
<g >
<title>cs::util::ReplicatedColumnsView::execute_filtering(TABLE const*, unsigned long) (1 samples, 0.68%)</title><rect x="107.0" y="421" width="8.1" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="109.99" y="431.5" ></text>
</g>
<g >
<title>std::operator==(std::thread::id, std::thread::id) (1 samples, 0.68%)</title><rect x="1084.9" y="405" width="8.1" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="1087.93" y="415.5" ></text>
</g>
<g >
<title>buf_page_release_latch(buf_block_t*, unsigned long) (2 samples, 1.37%)</title><rect x="996.0" y="453" width="16.2" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="999.03" y="463.5" ></text>
</g>
<g >
<title>generic_update_time (1 samples, 0.68%)</title><rect x="616.2" y="421" width="8.0" height="15.0" fill="rgb(97,97,206)" rx="2" ry="2" />
<text  x="619.16" y="431.5" ></text>
</g>
<g >
<title>cs::util::ReplicatedColumnsViewFactory::get_columns_view_with_outbound_filters(THD*, TABLE*) (1 samples, 0.68%)</title><rect x="107.0" y="549" width="8.1" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="109.99" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;buf_io_fix, buf_io_fix, std::_Identity&lt;buf_io_fix&gt;, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt;::_M_drop_node(std::_Rb_tree_node&lt;buf_io_fix&gt;*) (1 samples, 0.68%)</title><rect x="486.8" y="357" width="8.1" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="489.85" y="367.5" ></text>
</g>
<g >
<title>std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; std::__set_difference&lt;std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_less_iter&gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_less_iter) (1 samples, 0.68%)</title><rect x="826.3" y="277" width="8.1" height="15.0" fill="rgb(110,110,218)" rx="2" ry="2" />
<text  x="829.30" y="287.5" ></text>
</g>
<g >
<title>net_read_raw_loop(NET*, unsigned long) (1 samples, 0.68%)</title><rect x="58.5" y="661" width="8.1" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="61.49" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, std::pair&lt;unsigned int const, unsigned int&gt;, std::_Select1st&lt;std::pair&lt;unsigned int const, unsigned int&gt; &gt;, std::less&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, unsigned int&gt; &gt; &gt;::~_Rb_tree() (1 samples, 0.68%)</title><rect x="131.2" y="533" width="8.1" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="134.23" y="543.5" ></text>
</g>
<g >
<title>pfs_memory_alloc_vc(unsigned int, unsigned long, PSI_thread**) (1 samples, 0.68%)</title><rect x="98.9" y="485" width="8.1" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="101.90" y="495.5" ></text>
</g>
<g >
<title>Table_map_log_event::init_charset_field(std::function&lt;bool (Field const*)&gt;, binary_log::Table_map_event::Optional_metadata_field_type, binary_log::Table_map_event::Optional_metadata_field_type) (1 samples, 0.68%)</title><rect x="131.2" y="565" width="8.1" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="134.23" y="575.5" ></text>
</g>
<g >
<title>THD::binlog_query(THD::enum_binlog_query_type, char const*, unsigned long, bool, bool, bool, int) (1 samples, 0.68%)</title><rect x="82.7" y="677" width="8.1" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="85.74" y="687.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void (*(log_t*))(log_t*)&gt;::operator()&lt;, void&gt;() (3 samples, 2.05%)</title><rect x="1141.5" y="661" width="24.3" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="1144.51" y="671.5" >v..</text>
</g>
<g >
<title>ut::Stateful_latching_rules&lt;buf_io_fix, 3ul&gt;::assert_latches_let_distinguish(std::bitset&lt;3ul&gt; const&amp;, std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; const&amp;) const (2 samples, 1.37%)</title><rect x="470.7" y="389" width="16.1" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="473.68" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;rw_lock_debug_t const*, std::allocator&lt;rw_lock_debug_t const*&gt; &gt;::push_back(rw_lock_debug_t const* const&amp;) (1 samples, 0.68%)</title><rect x="365.6" y="421" width="8.1" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="368.62" y="431.5" ></text>
</g>
<g >
<title>btr_block_get(page_id_t const&amp;, page_size_t const&amp;, unsigned long, ut::Location, dict_index_t const*, mtr_t*) (2 samples, 1.37%)</title><rect x="381.8" y="469" width="16.1" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="384.78" y="479.5" ></text>
</g>
<g >
<title>vio_ssl_read(Vio*, unsigned char*, unsigned long) (1 samples, 0.68%)</title><rect x="58.5" y="645" width="8.1" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="61.49" y="655.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.68%)</title><rect x="228.2" y="373" width="8.1" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="231.22" y="383.5" ></text>
</g>
<g >
<title>btr_cur_optimistic_insert(unsigned long, btr_cur_t*, unsigned long**, mem_block_info_t**, dtuple_t*, unsigned char**, big_rec_t**, que_thr_t*, mtr_t*) (25 samples, 17.12%)</title><rect x="179.7" y="501" width="202.1" height="15.0" fill="rgb(81,81,190)" rx="2" ry="2" />
<text  x="182.73" y="511.5" >btr_cur_optimistic_insert(..</text>
</g>
<g >
<title>new_sync_write (1 samples, 0.68%)</title><rect x="616.2" y="469" width="8.0" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="619.16" y="479.5" ></text>
</g>
<g >
<title>trx_undo_page_get(page_id_t const&amp;, page_size_t const&amp;, mtr_t*) (3 samples, 2.05%)</title><rect x="1060.7" y="549" width="24.2" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="1063.68" y="559.5" >t..</text>
</g>
<g >
<title>generic_update_time (1 samples, 0.68%)</title><rect x="1157.7" y="293" width="8.1" height="15.0" fill="rgb(97,97,206)" rx="2" ry="2" />
<text  x="1160.67" y="303.5" ></text>
</g>
<g >
<title>Find_page::operator()(mtr_memo_slot_t*) (2 samples, 1.37%)</title><rect x="333.3" y="325" width="16.2" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="336.29" y="335.5" ></text>
</g>
<g >
<title>page_validate(unsigned char const*, dict_index_t*) (2 samples, 1.37%)</title><rect x="414.1" y="469" width="16.2" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="417.11" y="479.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void (*())()&gt;::operator()&lt;, void&gt;() (2 samples, 1.37%)</title><rect x="1173.8" y="661" width="16.2" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="1176.84" y="671.5" ></text>
</g>
<g >
<title>IORequest::is_log() const (1 samples, 0.68%)</title><rect x="1141.5" y="485" width="8.1" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="1144.51" y="495.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::change_stage(THD*, Commit_stage_manager::StageID, THD*, mysql_mutex_t*, mysql_mutex_t*) (1 samples, 0.68%)</title><rect x="608.1" y="645" width="8.1" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="611.08" y="655.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::mtr_add_page(buf_block_t*) (1 samples, 0.68%)</title><rect x="228.2" y="341" width="8.1" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="231.22" y="351.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt; &gt;::_M_run() (1 samples, 0.68%)</title><rect x="1117.3" y="757" width="8.0" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="1120.26" y="767.5" ></text>
</g>
<g >
<title>trx_rseg_t::validate_curr_size(bool) (9 samples, 6.16%)</title><rect x="923.3" y="565" width="72.7" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="926.29" y="575.5" >trx_rseg..</text>
</g>
<g >
<title>__memset_avx2_unaligned (1 samples, 0.68%)</title><rect x="34.2" y="821" width="8.1" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="37.25" y="831.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Find_page&gt; &gt;(Iterate&lt;Find_page&gt;&amp;) const (4 samples, 2.74%)</title><rect x="858.6" y="405" width="32.4" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="861.63" y="415.5" >bo..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt;::operator()() (1 samples, 0.68%)</title><rect x="1117.3" y="741" width="8.0" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="1120.26" y="751.5" ></text>
</g>
<g >
<title>tcp_write_xmit (3 samples, 2.05%)</title><rect x="10.0" y="629" width="24.2" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="13.00" y="639.5" >t..</text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_get_Tp_allocator() (1 samples, 0.68%)</title><rect x="624.2" y="517" width="8.1" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="627.25" y="527.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::trylock(char const*, unsigned int) (1 samples, 0.68%)</title><rect x="446.4" y="373" width="8.1" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="449.44" y="383.5" ></text>
</g>
<g >
<title>bool dyn_buf_t&lt;512ul&gt;::for_each_block_in_reverse&lt;Iterate&lt;Find_page&gt; &gt;(Iterate&lt;Find_page&gt;&amp;) const (3 samples, 2.05%)</title><rect x="260.5" y="357" width="24.3" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="263.55" y="367.5" >b..</text>
</g>
<g >
<title>ip_protocol_deliver_rcu (3 samples, 2.05%)</title><rect x="10.0" y="437" width="24.2" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >i..</text>
</g>
<g >
<title>std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; std::__copy_move&lt;false, false, std::bidirectional_iterator_tag&gt;::__copy_m&lt;std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt; &gt;(std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::_Rb_tree_const_iterator&lt;buf_io_fix&gt;, std::insert_iterator&lt;std::set&lt;buf_io_fix, std::less&lt;buf_io_fix&gt;, std::allocator&lt;buf_io_fix&gt; &gt; &gt;) (1 samples, 0.68%)</title><rect x="478.8" y="261" width="8.0" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="481.77" y="271.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::is_owned() const (1 samples, 0.68%)</title><rect x="1117.3" y="469" width="8.0" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="1120.26" y="479.5" ></text>
</g>
</g>
</svg>
