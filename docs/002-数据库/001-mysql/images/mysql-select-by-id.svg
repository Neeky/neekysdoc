<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#e0e0ff" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="614.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >mysql-select-by-id</text>
<text id="details" x="10.00" y="597" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="597" > </text>
<g id="frames">
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(TTASEventMutex&lt;GenericPolicy&gt; const&amp;, char const*, unsigned long) (1 samples, 0.55%)</title><rect x="898.2" y="213" width="6.5" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="901.24" y="223.5" ></text>
</g>
<g >
<title>my_free(void*) (1 samples, 0.55%)</title><rect x="891.8" y="197" width="6.4" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="894.76" y="207.5" ></text>
</g>
<g >
<title>lock_external(THD*, TABLE**, unsigned int) (1 samples, 0.55%)</title><rect x="963.1" y="373" width="6.5" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="966.08" y="383.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.55%)</title><rect x="768.6" y="213" width="6.5" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="771.57" y="223.5" ></text>
</g>
<g >
<title>Item_field::result_type() const (1 samples, 0.55%)</title><rect x="775.1" y="181" width="6.4" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="778.05" y="191.5" ></text>
</g>
<g >
<title>__send (1 samples, 0.55%)</title><rect x="1138.1" y="277" width="6.5" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="1141.13" y="287.5" ></text>
</g>
<g >
<title>rw_lock_s_lock(rw_lock_t*, ut::Location) (1 samples, 0.55%)</title><rect x="924.2" y="213" width="6.5" height="15.0" fill="rgb(118,118,224)" rx="2" ry="2" />
<text  x="927.18" y="223.5" ></text>
</g>
<g >
<title>ha_innobase::update_thd(THD*) (5 samples, 2.75%)</title><rect x="911.2" y="261" width="32.4" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="914.21" y="271.5" >ha..</text>
</g>
<g >
<title>net_read_uncompressed_packet(NET*, unsigned long&amp;) (7 samples, 3.85%)</title><rect x="463.8" y="421" width="45.4" height="15.0" fill="rgb(85,85,195)" rx="2" ry="2" />
<text  x="466.85" y="431.5" >net_..</text>
</g>
<g >
<title>Query_block::optimize(THD*, bool) (34 samples, 18.68%)</title><rect x="638.9" y="373" width="220.4" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="641.90" y="383.5" >Query_block::optimize(THD*, b..</text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(TTASEventMutex&lt;GenericPolicy&gt; const*, char const*, unsigned long) (1 samples, 0.55%)</title><rect x="898.2" y="197" width="6.5" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="901.24" y="207.5" ></text>
</g>
<g >
<title>Field::send_to_protocol(Protocol*) const (1 samples, 0.55%)</title><rect x="625.9" y="293" width="6.5" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="628.93" y="303.5" ></text>
</g>
<g >
<title>code_state() (1 samples, 0.55%)</title><rect x="606.5" y="389" width="6.5" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="609.48" y="399.5" ></text>
</g>
<g >
<title>do_syscall_64 (4 samples, 2.20%)</title><rect x="476.8" y="293" width="25.9" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="479.81" y="303.5" >d..</text>
</g>
<g >
<title>net_write_packet(NET*, unsigned char const*, unsigned long) (1 samples, 0.55%)</title><rect x="548.1" y="389" width="6.5" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="551.13" y="399.5" ></text>
</g>
<g >
<title>void my_hash_sort_uca_900_tmpl&lt;Mb_wc_utf8mb4, 1&gt;(CHARSET_INFO const*, Mb_wc_utf8mb4, unsigned char const*, unsigned long, unsigned long*) (1 samples, 0.55%)</title><rect x="1079.8" y="277" width="6.5" height="15.0" fill="rgb(86,86,196)" rx="2" ry="2" />
<text  x="1082.78" y="287.5" ></text>
</g>
<g >
<title>auto find_or_nullptr&lt;collation_unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(collation_unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.55%)</title><rect x="1079.8" y="373" width="6.5" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="1082.78" y="383.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1 samples, 0.55%)</title><rect x="476.8" y="197" width="6.5" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="479.81" y="207.5" ></text>
</g>
<g >
<title>void my_internal_free&lt;&amp;(redirecting_deallocator(void*))&gt;(void*) (1 samples, 0.55%)</title><rect x="42.4" y="469" width="6.5" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="45.42" y="479.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.55%)</title><rect x="35.9" y="373" width="6.5" height="15.0" fill="rgb(123,123,229)" rx="2" ry="2" />
<text  x="38.93" y="383.5" ></text>
</g>
<g >
<title>Field::new_field(MEM_ROOT*, TABLE*) const (1 samples, 0.55%)</title><rect x="671.3" y="213" width="6.5" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="674.32" y="223.5" ></text>
</g>
<g >
<title>ha_innobase::info_low(unsigned int, bool) (2 samples, 1.10%)</title><rect x="788.0" y="277" width="13.0" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="791.02" y="287.5" ></text>
</g>
<g >
<title>net_rx_action (3 samples, 1.65%)</title><rect x="120.2" y="229" width="19.5" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="123.22" y="239.5" ></text>
</g>
<g >
<title>IB_mutex_guard::IB_mutex_guard(PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;*, ut::Location const&amp;) (1 samples, 0.55%)</title><rect x="1170.5" y="261" width="6.5" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="1173.55" y="271.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::~allocator() (1 samples, 0.55%)</title><rect x="1066.8" y="325" width="6.5" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="1069.81" y="335.5" ></text>
</g>
<g >
<title>Lex_input_stream::warn_on_deprecated_charset(CHARSET_INFO const*, char const*) const (1 samples, 0.55%)</title><rect x="1060.3" y="389" width="6.5" height="15.0" fill="rgb(110,110,218)" rx="2" ry="2" />
<text  x="1063.33" y="399.5" ></text>
</g>
<g >
<title>pfs_rw_lock_s_lock_low(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.55%)</title><rect x="703.7" y="101" width="6.5" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="706.74" y="111.5" ></text>
</g>
<g >
<title>aggregate_all_memory_with_reassign(bool, PFS_memory_safe_stat*, PFS_memory_shared_stat*, PFS_memory_shared_stat*) (1 samples, 0.55%)</title><rect x="1125.2" y="437" width="6.4" height="15.0" fill="rgb(120,120,226)" rx="2" ry="2" />
<text  x="1128.16" y="447.5" ></text>
</g>
<g >
<title>std::tuple&lt;dd::cache::Local_multi_map&lt;dd::Abstract_table&gt;*, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Abstract_table&gt; &gt; &gt;::tuple&lt;true, true&gt;() (1 samples, 0.55%)</title><rect x="1157.6" y="325" width="6.5" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="1160.58" y="335.5" ></text>
</g>
<g >
<title>and_conditions(Item**, Item*) (1 samples, 0.55%)</title><rect x="820.4" y="325" width="6.5" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="823.44" y="335.5" ></text>
</g>
<g >
<title>get_rec_insert_state(dict_index_t const*, unsigned char const*, bool) (1 samples, 0.55%)</title><rect x="723.2" y="37" width="6.5" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="726.19" y="47.5" ></text>
</g>
<g >
<title>AutoDebugTrace::AutoDebugTrace(char const*, char const*, int) (1 samples, 0.55%)</title><rect x="463.8" y="325" width="6.5" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="466.85" y="335.5" ></text>
</g>
<g >
<title>btr_search_check_guess(btr_cur_t*, bool, dtuple_t const*, unsigned long, mtr_t*) (4 samples, 2.20%)</title><rect x="723.2" y="149" width="25.9" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="726.19" y="159.5" >b..</text>
</g>
<g >
<title>bool dd::cache::Dictionary_client::acquire&lt;dd::Item_name_key, dd::Schema&gt;(dd::Item_name_key const&amp;, dd::Schema const**, bool*, bool*) (1 samples, 0.55%)</title><rect x="1151.1" y="389" width="6.5" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="1154.10" y="399.5" ></text>
</g>
<g >
<title>do_softirq (3 samples, 1.65%)</title><rect x="120.2" y="261" width="19.5" height="15.0" fill="rgb(110,110,217)" rx="2" ry="2" />
<text  x="123.22" y="271.5" ></text>
</g>
<g >
<title>safe_mutex_assert_owner(safe_mutex_t*) (1 samples, 0.55%)</title><rect x="995.5" y="293" width="6.5" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="998.49" y="303.5" ></text>
</g>
<g >
<title>TrxInInnoDB::is_forced_rollback(trx_t const*) (1 samples, 0.55%)</title><rect x="956.6" y="293" width="6.5" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="959.59" y="303.5" ></text>
</g>
<g >
<title>update_ref_and_keys(THD*, Mem_root_array&lt;Key_use&gt;*, JOIN_TAB*, unsigned int, Item*, unsigned long, Query_block*, SARGABLE_PARAM**) (1 samples, 0.55%)</title><rect x="807.5" y="325" width="6.5" height="15.0" fill="rgb(81,81,191)" rx="2" ry="2" />
<text  x="810.47" y="335.5" ></text>
</g>
<g >
<title>do_poll.constprop.0 (1 samples, 0.55%)</title><rect x="1183.5" y="389" width="6.5" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="1186.52" y="399.5" ></text>
</g>
<g >
<title>malloc_unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~malloc_unordered_set() (1 samples, 0.55%)</title><rect x="891.8" y="325" width="6.4" height="15.0" fill="rgb(86,86,196)" rx="2" ry="2" />
<text  x="894.76" y="335.5" ></text>
</g>
<g >
<title>sock_write_iter (4 samples, 2.20%)</title><rect x="113.7" y="421" width="26.0" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="116.74" y="431.5" >s..</text>
</g>
<g >
<title>handler::ha_external_lock(THD*, int) (1 samples, 0.55%)</title><rect x="839.9" y="293" width="6.5" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="842.89" y="303.5" ></text>
</g>
<g >
<title>mtr_t::Impl::Impl() (1 samples, 0.55%)</title><rect x="710.2" y="197" width="6.5" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="713.22" y="207.5" ></text>
</g>
<g >
<title>Session_sysvars_tracker::vars_list::search(unsigned char const*, unsigned long) (2 samples, 1.10%)</title><rect x="1079.8" y="389" width="12.9" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="1082.78" y="399.5" ></text>
</g>
<g >
<title>void dd::cache::Dictionary_client::remove_uncommitted_objects&lt;dd::Abstract_table&gt;(bool) (2 samples, 1.10%)</title><rect x="437.9" y="421" width="13.0" height="15.0" fill="rgb(97,97,205)" rx="2" ry="2" />
<text  x="440.91" y="431.5" ></text>
</g>
<g >
<title>JOIN::optimize(bool) (32 samples, 17.58%)</title><rect x="638.9" y="357" width="207.5" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="641.90" y="367.5" >JOIN::optimize(bool)</text>
</g>
<g >
<title>__netif_receive_skb_one_core (3 samples, 1.65%)</title><rect x="120.2" y="181" width="19.5" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="123.22" y="191.5" ></text>
</g>
<g >
<title>Query_expression::optimize(THD*, TABLE*, bool, bool) (34 samples, 18.68%)</title><rect x="638.9" y="389" width="220.4" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="641.90" y="399.5" >Query_expression::optimize(TH..</text>
</g>
<g >
<title>sock_sendmsg (4 samples, 2.20%)</title><rect x="113.7" y="405" width="26.0" height="15.0" fill="rgb(135,135,241)" rx="2" ry="2" />
<text  x="116.74" y="415.5" >s..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, dd::cache::Local_multi_map&lt;dd::Abstract_table&gt;*, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Abstract_table&gt; &gt; &gt;::_Tuple_impl() (1 samples, 0.55%)</title><rect x="1157.6" y="309" width="6.5" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="1160.58" y="319.5" ></text>
</g>
<g >
<title>Channel_info_tcpip_socket::create_thd() (1 samples, 0.55%)</title><rect x="1118.7" y="469" width="6.5" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="1121.68" y="479.5" ></text>
</g>
<g >
<title>PFS_host::carry_memory_stat_alloc_delta(PFS_memory_stat_alloc_delta*, unsigned int) (1 samples, 0.55%)</title><rect x="29.5" y="405" width="6.4" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="32.45" y="415.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::locked(TTASEventMutex&lt;GenericPolicy&gt; const*, char const*, unsigned long) (1 samples, 0.55%)</title><rect x="963.1" y="229" width="6.5" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="966.08" y="239.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, Detached_thread, void (*)(log_t*), log_t*&gt;(std::__invoke_other, Detached_thread&amp;&amp;, void (*&amp;&amp;)(log_t*), log_t*&amp;&amp;) (1 samples, 0.55%)</title><rect x="1170.5" y="405" width="6.5" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="1173.55" y="415.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt; &gt;::_M_run() (1 samples, 0.55%)</title><rect x="1170.5" y="469" width="6.5" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="1173.55" y="479.5" ></text>
</g>
<g >
<title>check_connection(THD*) (5 samples, 2.75%)</title><rect x="1131.6" y="453" width="32.5" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="1134.65" y="463.5" >ch..</text>
</g>
<g >
<title>close_open_tables(THD*) (5 samples, 2.75%)</title><rect x="976.0" y="405" width="32.5" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="979.04" y="415.5" >cl..</text>
</g>
<g >
<title>[unknown] (1 samples, 0.55%)</title><rect x="1170.5" y="501" width="6.5" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="1173.55" y="511.5" ></text>
</g>
<g >
<title>my_openssl_free(void*, char const*, int) (1 samples, 0.55%)</title><rect x="42.4" y="501" width="6.5" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="45.42" y="511.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned (1 samples, 0.55%)</title><rect x="334.2" y="533" width="6.5" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="337.18" y="543.5" ></text>
</g>
<g >
<title>internal_find (1 samples, 0.55%)</title><rect x="379.6" y="533" width="6.4" height="15.0" fill="rgb(126,126,233)" rx="2" ry="2" />
<text  x="382.56" y="543.5" ></text>
</g>
<g >
<title>rec_offs_validate(unsigned char const*, dict_index_t const*, unsigned long const*) (1 samples, 0.55%)</title><rect x="736.2" y="101" width="6.4" height="15.0" fill="rgb(96,96,204)" rx="2" ry="2" />
<text  x="739.15" y="111.5" ></text>
</g>
<g >
<title>ha_innobase::update_thd() (1 samples, 0.55%)</title><rect x="904.7" y="277" width="6.5" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="907.73" y="287.5" ></text>
</g>
<g >
<title>Opt_trace_start::~Opt_trace_start() (1 samples, 0.55%)</title><rect x="613.0" y="421" width="6.5" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="615.97" y="431.5" ></text>
</g>
<g >
<title>my_free(void*) (1 samples, 0.55%)</title><rect x="269.3" y="485" width="6.5" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="272.34" y="495.5" ></text>
</g>
<g >
<title>DoTrace(CODE_STATE*) (1 samples, 0.55%)</title><rect x="632.4" y="277" width="6.5" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="635.42" y="287.5" ></text>
</g>
<g >
<title>skb_try_coalesce (1 samples, 0.55%)</title><rect x="1138.1" y="53" width="6.5" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="1141.13" y="63.5" ></text>
</g>
<g >
<title>Query_block::add_table_to_list(THD*, Table_ident*, char const*, unsigned long, thr_lock_type, enum_mdl_type, List&lt;Index_hint&gt;*, List&lt;String&gt;*, MYSQL_LEX_STRING*, Parse_context*) (2 samples, 1.10%)</title><rect x="1027.9" y="309" width="13.0" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="1030.91" y="319.5" ></text>
</g>
<g >
<title>my_free(void*) (1 samples, 0.55%)</title><rect x="314.7" y="485" width="6.5" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="317.73" y="495.5" ></text>
</g>
<g >
<title>std::this_thread::get_id() (1 samples, 0.55%)</title><rect x="898.2" y="165" width="6.5" height="15.0" fill="rgb(85,85,195)" rx="2" ry="2" />
<text  x="901.24" y="175.5" ></text>
</g>
<g >
<title>rw_lock_s_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.55%)</title><rect x="924.2" y="197" width="6.5" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="927.18" y="207.5" ></text>
</g>
<g >
<title>std::operator&amp;(std::memory_order, std::__memory_order_modifier) (1 samples, 0.55%)</title><rect x="29.5" y="357" width="6.4" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="32.45" y="367.5" ></text>
</g>
<g >
<title>Session_sysvars_tracker::mark_as_changed(THD*, MYSQL_LEX_CSTRING) (2 samples, 1.10%)</title><rect x="1079.8" y="421" width="12.9" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="1082.78" y="431.5" ></text>
</g>
<g >
<title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;Session_sysvars_tracker::sysvar_node_st**, std::vector&lt;Session_sysvars_tracker::sysvar_node_st*, std::allocator&lt;Session_sysvars_tracker::sysvar_node_st*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;Session_sysvars_tracker::store(THD*, String&amp;)::{lambda(Session_sysvars_tracker::sysvar_node_st const*, Session_sysvars_tracker::sysvar_node_st const*)#1}&gt; &gt;(__gnu_cxx::__normal_iterator&lt;Session_sysvars_tracker::sysvar_node_st**, std::vector&lt;Session_sysvars_tracker::sysvar_node_st*, std::allocator&lt;Session_sysvars_tracker::sysvar_node_st*&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Session_sysvars_tracker::sysvar_node_st**, std::vector&lt;Session_sysvars_tracker::sysvar_node_st*, std::allocator&lt;Session_sysvars_tracker::sysvar_node_st*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;Session_sysvars_tracker::store(THD*, String&amp;)::{lambda(Session_sysvars_tracker::sysvar_node_st const*, Session_sysvars_tracker::sysvar_node_st const*)#1}&gt;) (1 samples, 0.55%)</title><rect x="561.1" y="357" width="6.5" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="564.10" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt;, Malloc_allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt; &gt;, std::__detail::_Select1st, Collation_key_equal, Collation_hasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) const (1 samples, 0.55%)</title><rect x="1079.8" y="341" width="6.5" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="1082.78" y="351.5" ></text>
</g>
<g >
<title>THD::enter_stage(PSI_stage_info_v1 const*, PSI_stage_info_v1*, char const*, char const*, unsigned int) (1 samples, 0.55%)</title><rect x="528.7" y="453" width="6.5" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="531.68" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt;, std::__detail::_Select1st, Collation_hasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) const (1 samples, 0.55%)</title><rect x="1079.8" y="325" width="6.5" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="1082.78" y="335.5" ></text>
</g>
<g >
<title>Protocol::store(String*) (1 samples, 0.55%)</title><rect x="625.9" y="277" width="6.5" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="628.93" y="287.5" ></text>
</g>
<g >
<title>handler::ha_extra(ha_extra_function) (1 samples, 0.55%)</title><rect x="898.2" y="341" width="6.5" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="901.24" y="351.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(unsigned int, unsigned int, char const*, unsigned int) (1 samples, 0.55%)</title><rect x="982.5" y="261" width="6.5" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="985.53" y="271.5" ></text>
</g>
<g >
<title>log_files_governor_iteration(log_t&amp;) (1 samples, 0.55%)</title><rect x="1170.5" y="293" width="6.5" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="1173.55" y="303.5" ></text>
</g>
<g >
<title>void ut_list_prepend&lt;ut_list_base&lt;rw_lock_debug_t, ut_list_base_explicit_getter&lt;rw_lock_debug_t, &amp;rw_lock_debug_t::list&gt; &gt; &gt;(ut_list_base&lt;rw_lock_debug_t, ut_list_base_explicit_getter&lt;rw_lock_debug_t, &amp;rw_lock_debug_t::list&gt; &gt;&amp;, ut_list_base&lt;rw_lock_debug_t, ut_list_base_explicit_getter&lt;rw_lock_debug_t, &amp;rw_lock_debug_t::list&gt; &gt;::elem_type*) (1 samples, 0.55%)</title><rect x="762.1" y="165" width="6.5" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="765.09" y="175.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.55%)</title><rect x="1183.5" y="453" width="6.5" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="1186.52" y="463.5" ></text>
</g>
<g >
<title>my_realloc(unsigned int, void*, unsigned long, int) (1 samples, 0.55%)</title><rect x="515.7" y="453" width="6.5" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="518.71" y="463.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::enter(unsigned int, unsigned int, char const*, unsigned int) (1 samples, 0.55%)</title><rect x="917.7" y="181" width="6.5" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="920.69" y="191.5" ></text>
</g>
<g >
<title>unlock_stack(CODE_STATE*) (1 samples, 0.55%)</title><rect x="463.8" y="293" width="6.5" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="466.85" y="303.5" ></text>
</g>
<g >
<title>Item_func_eq::val_int() (1 samples, 0.55%)</title><rect x="781.5" y="229" width="6.5" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="784.54" y="239.5" ></text>
</g>
<g >
<title>THD::unlock_query_plan() (1 samples, 0.55%)</title><rect x="852.9" y="357" width="6.4" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="855.86" y="367.5" ></text>
</g>
<g >
<title>ha_innobase::update_thd(THD*) (1 samples, 0.55%)</title><rect x="904.7" y="261" width="6.5" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="907.73" y="271.5" ></text>
</g>
<g >
<title>row_prebuilt_t::init_search_tuples_types() (1 samples, 0.55%)</title><rect x="684.3" y="229" width="6.5" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="687.29" y="239.5" ></text>
</g>
<g >
<title>do_name (1 samples, 0.55%)</title><rect x="249.9" y="517" width="6.5" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="252.89" y="527.5" ></text>
</g>
<g >
<title>TABLE_SHARE::version() const (1 samples, 0.55%)</title><rect x="1002.0" y="357" width="6.5" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="1004.98" y="367.5" ></text>
</g>
<g >
<title>__napi_poll (3 samples, 1.65%)</title><rect x="120.2" y="213" width="19.5" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="123.22" y="223.5" ></text>
</g>
<g >
<title>mysql_unlock_some_tables(THD*, TABLE**, unsigned int) (3 samples, 1.65%)</title><rect x="826.9" y="341" width="19.5" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="829.92" y="351.5" ></text>
</g>
<g >
<title>PT_query_specification::contextualize(Parse_context*) (2 samples, 1.10%)</title><rect x="1027.9" y="357" width="13.0" height="15.0" fill="rgb(81,81,191)" rx="2" ry="2" />
<text  x="1030.91" y="367.5" ></text>
</g>
<g >
<title>(anonymous namespace)::store_key_const_item::store_key_const_item(THD*, Field*, unsigned char*, unsigned char*, unsigned int, Item*) (1 samples, 0.55%)</title><rect x="671.3" y="261" width="6.5" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="674.32" y="271.5" ></text>
</g>
<g >
<title>void my_internal_free&lt;&amp;(redirecting_deallocator(void*))&gt;(void*) (1 samples, 0.55%)</title><rect x="891.8" y="181" width="6.4" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="894.76" y="191.5" ></text>
</g>
<g >
<title>__GI___libc_read (1 samples, 0.55%)</title><rect x="107.3" y="517" width="6.4" height="15.0" fill="rgb(123,123,229)" rx="2" ry="2" />
<text  x="110.25" y="527.5" ></text>
</g>
<g >
<title>plist_add (1 samples, 0.55%)</title><rect x="1177.0" y="405" width="6.5" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="1180.03" y="415.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(unsigned int, unsigned int, char const*, unsigned int) (1 samples, 0.55%)</title><rect x="904.7" y="197" width="6.5" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="907.73" y="207.5" ></text>
</g>
<g >
<title>server_mpvio_write_packet (1 samples, 0.55%)</title><rect x="1138.1" y="389" width="6.5" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="1141.13" y="399.5" ></text>
</g>
<g >
<title>pfs_end_statement_vc(PSI_statement_locker*, void*) (2 samples, 1.10%)</title><rect x="1099.2" y="437" width="13.0" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="1102.23" y="447.5" ></text>
</g>
<g >
<title>ha_innobase::extra(ha_extra_function) (1 samples, 0.55%)</title><rect x="943.6" y="309" width="6.5" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="946.63" y="319.5" ></text>
</g>
<g >
<title>security_socket_sendmsg (1 samples, 0.55%)</title><rect x="113.7" y="389" width="6.5" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="116.74" y="399.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void (*&amp;)(log_t*), log_t*&amp;&gt;(std::__invoke_other, void (*&amp;)(log_t*), log_t*&amp;) (1 samples, 0.55%)</title><rect x="1170.5" y="325" width="6.5" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="1173.55" y="335.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (1 samples, 0.55%)</title><rect x="483.3" y="165" width="6.5" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="486.30" y="175.5" ></text>
</g>
<g >
<title>THD::set_query_id(long) (1 samples, 0.55%)</title><rect x="567.6" y="453" width="6.5" height="15.0" fill="rgb(134,134,240)" rx="2" ry="2" />
<text  x="570.58" y="463.5" ></text>
</g>
<g >
<title>rw_lock_s_lock_nowait(rw_lock_t*, ut::Location) (1 samples, 0.55%)</title><rect x="703.7" y="117" width="6.5" height="15.0" fill="rgb(100,100,209)" rx="2" ry="2" />
<text  x="706.74" y="127.5" ></text>
</g>
<g >
<title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;Session_sysvars_tracker::sysvar_node_st**, std::vector&lt;Session_sysvars_tracker::sysvar_node_st*, std::allocator&lt;Session_sysvars_tracker::sysvar_node_st*&gt; &gt; &gt;, Session_sysvars_tracker::store(THD*, String&amp;)::{lambda(Session_sysvars_tracker::sysvar_node_st const*, Session_sysvars_tracker::sysvar_node_st const*)#1}&gt;(__gnu_cxx::__normal_iterator&lt;Session_sysvars_tracker::sysvar_node_st**, std::vector&lt;Session_sysvars_tracker::sysvar_node_st*, std::allocator&lt;Session_sysvars_tracker::sysvar_node_st*&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Session_sysvars_tracker::sysvar_node_st**, std::vector&lt;Session_sysvars_tracker::sysvar_node_st*, std::allocator&lt;Session_sysvars_tracker::sysvar_node_st*&gt; &gt; &gt;, Session_sysvars_tracker::store(THD*, String&amp;)::{lambda(Session_sysvars_tracker::sysvar_node_st const*, Session_sysvars_tracker::sysvar_node_st const*)#1}) (1 samples, 0.55%)</title><rect x="561.1" y="373" width="6.5" height="15.0" fill="rgb(131,131,237)" rx="2" ry="2" />
<text  x="564.10" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, User_level_lock*&gt;, Malloc_allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, User_level_lock*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::begin() (1 samples, 0.55%)</title><rect x="431.4" y="437" width="6.5" height="15.0" fill="rgb(109,109,216)" rx="2" ry="2" />
<text  x="434.43" y="447.5" ></text>
</g>
<g >
<title>ssl3_read_bytes (2 samples, 1.10%)</title><rect x="301.8" y="517" width="12.9" height="15.0" fill="rgb(136,136,242)" rx="2" ry="2" />
<text  x="304.76" y="527.5" ></text>
</g>
<g >
<title>TrxPoolManagerLock::enter() (1 samples, 0.55%)</title><rect x="930.7" y="149" width="6.4" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="933.66" y="159.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.55%)</title><rect x="989.0" y="293" width="6.5" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="992.01" y="303.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__is_null_pointer&lt;char const&gt;(char const*) (1 samples, 0.55%)</title><rect x="1118.7" y="325" width="6.5" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="1121.68" y="335.5" ></text>
</g>
<g >
<title>ha_innobase::extra(ha_extra_function) (1 samples, 0.55%)</title><rect x="898.2" y="325" width="6.5" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="901.24" y="335.5" ></text>
</g>
<g >
<title>Field_longlong::type() const (1 samples, 0.55%)</title><rect x="807.5" y="261" width="6.5" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="810.47" y="271.5" ></text>
</g>
<g >
<title>void* my_internal_malloc&lt;&amp;(redirecting_allocator(unsigned long, int))&gt;(unsigned int, unsigned long, int) (1 samples, 0.55%)</title><rect x="16.5" y="469" width="6.5" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="19.48" y="479.5" ></text>
</g>
<g >
<title>dyn_buf_t&lt;512ul&gt;::block_t::init() (1 samples, 0.55%)</title><rect x="710.2" y="149" width="6.5" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="713.22" y="159.5" ></text>
</g>
<g >
<title>Protocol_classic::send_eof(unsigned int, unsigned int) (1 samples, 0.55%)</title><rect x="548.1" y="437" width="6.5" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="551.13" y="447.5" ></text>
</g>
<g >
<title>rec_init_offsets(unsigned char const*, dict_index_t const*, unsigned long*) (1 samples, 0.55%)</title><rect x="723.2" y="101" width="6.5" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="726.19" y="111.5" ></text>
</g>
<g >
<title>ip_protocol_deliver_rcu (1 samples, 0.55%)</title><rect x="256.4" y="309" width="6.5" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="259.37" y="319.5" ></text>
</g>
<g >
<title>check_grant(THD*, unsigned long, Table_ref*, bool, unsigned int, bool) (1 samples, 0.55%)</title><rect x="969.6" y="405" width="6.4" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="972.56" y="415.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.55%)</title><rect x="327.7" y="517" width="6.5" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="330.69" y="527.5" ></text>
</g>
<g >
<title>_db_enter_(char const*, int, char const*, unsigned int, _db_stack_frame_*) (1 samples, 0.55%)</title><rect x="833.4" y="277" width="6.5" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="836.41" y="287.5" ></text>
</g>
<g >
<title>JOIN::join_free() (1 samples, 0.55%)</title><rect x="632.4" y="325" width="6.5" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="635.42" y="335.5" ></text>
</g>
<g >
<title>JOIN::replace_index_subquery() (1 samples, 0.55%)</title><rect x="814.0" y="341" width="6.4" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="816.96" y="351.5" ></text>
</g>
<g >
<title>Item_func_eq::~Item_func_eq() (1 samples, 0.55%)</title><rect x="580.5" y="373" width="6.5" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="583.55" y="383.5" ></text>
</g>
<g >
<title>PT_table_factor_table_ident::contextualize(Parse_context*) (2 samples, 1.10%)</title><rect x="1027.9" y="325" width="13.0" height="15.0" fill="rgb(131,131,237)" rx="2" ry="2" />
<text  x="1030.91" y="335.5" ></text>
</g>
<g >
<title>do_auth_once(THD*, MYSQL_LEX_CSTRING const&amp;, MPVIO_EXT*) (2 samples, 1.10%)</title><rect x="1131.6" y="421" width="13.0" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="1134.65" y="431.5" ></text>
</g>
<g >
<title>handler::ha_external_lock(THD*, int) (1 samples, 0.55%)</title><rect x="963.1" y="357" width="6.5" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="966.08" y="367.5" ></text>
</g>
<g >
<title>PFS_account::carry_memory_stat_alloc_delta(PFS_memory_stat_alloc_delta*, unsigned int) (1 samples, 0.55%)</title><rect x="29.5" y="421" width="6.4" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="32.45" y="431.5" ></text>
</g>
<g >
<title>trans_rollback(THD*) (3 samples, 1.65%)</title><rect x="437.9" y="453" width="19.5" height="15.0" fill="rgb(137,137,243)" rx="2" ry="2" />
<text  x="440.91" y="463.5" ></text>
</g>
<g >
<title>do_poll.constprop.0 (3 samples, 1.65%)</title><rect x="476.8" y="245" width="19.5" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="479.81" y="255.5" ></text>
</g>
<g >
<title>check_trx_exists(THD*) (2 samples, 1.10%)</title><rect x="924.2" y="245" width="12.9" height="15.0" fill="rgb(131,131,237)" rx="2" ry="2" />
<text  x="927.18" y="255.5" ></text>
</g>
<g >
<title>mysql_unlock_tables(THD*, MYSQL_LOCK*) (3 samples, 1.65%)</title><rect x="826.9" y="325" width="19.5" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="829.92" y="335.5" ></text>
</g>
<g >
<title>x25519_fe64_sqr (1 samples, 0.55%)</title><rect x="1164.1" y="533" width="6.4" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="1167.07" y="543.5" ></text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::locked(TTASEventMutex&lt;GenericPolicy&gt; const&amp;, char const*, unsigned long) (1 samples, 0.55%)</title><rect x="904.7" y="181" width="6.5" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="907.73" y="191.5" ></text>
</g>
<g >
<title>PoolManager&lt;Pool&lt;trx_t, TrxFactory, TrxPoolLock&gt;, TrxPoolManagerLock&gt;::get() (1 samples, 0.55%)</title><rect x="930.7" y="165" width="6.4" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="933.66" y="175.5" ></text>
</g>
<g >
<title>dbug_tmp_use_all_columns(TABLE*, MY_BITMAP*) (1 samples, 0.55%)</title><rect x="677.8" y="277" width="6.5" height="15.0" fill="rgb(131,131,237)" rx="2" ry="2" />
<text  x="680.80" y="287.5" ></text>
</g>
<g >
<title>add_key_field(THD*, Key_field**, unsigned int, Item_func*, Item_field*, bool, Item**, unsigned int, unsigned long, SARGABLE_PARAM**) (1 samples, 0.55%)</title><rect x="807.5" y="293" width="6.5" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="810.47" y="303.5" ></text>
</g>
<g >
<title>tcp_xmit_recovery (1 samples, 0.55%)</title><rect x="256.4" y="229" width="6.5" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="259.37" y="239.5" ></text>
</g>
<g >
<title>Item_func_eq::~Item_func_eq() (1 samples, 0.55%)</title><rect x="580.5" y="389" width="6.5" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="583.55" y="399.5" ></text>
</g>
<g >
<title>void my_internal_free&lt;&amp;(redirecting_deallocator(void*))&gt;(void*) (1 samples, 0.55%)</title><rect x="269.3" y="469" width="6.5" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="272.34" y="479.5" ></text>
</g>
<g >
<title>std::atomic&lt;std::thread::id&gt;::compare_exchange_strong(std::thread::id&amp;, std::thread::id, std::memory_order) (1 samples, 0.55%)</title><rect x="982.5" y="213" width="6.5" height="15.0" fill="rgb(89,89,199)" rx="2" ry="2" />
<text  x="985.53" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::unordered_multimap&lt;MDL_key const*, MDL_ticket_store::MDL_ticket_handle, MDL_ticket_store::Hash, MDL_ticket_store::Key_equal, std::allocator&lt;std::pair&lt;MDL_key const* const, MDL_ticket_store::MDL_ticket_handle&gt; &gt; &gt;, std::default_delete&lt;std::unordered_multimap&lt;MDL_key const*, MDL_ticket_store::MDL_ticket_handle, MDL_ticket_store::Hash, MDL_ticket_store::Key_equal, std::allocator&lt;std::pair&lt;MDL_key const* const, MDL_ticket_store::MDL_ticket_handle&gt; &gt; &gt; &gt; &gt;::get() const (1 samples, 0.55%)</title><rect x="950.1" y="229" width="6.5" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="953.11" y="239.5" ></text>
</g>
<g >
<title>warn_on_deprecated_charset(THD*, CHARSET_INFO const*, char const*, char const*) (1 samples, 0.55%)</title><rect x="1060.3" y="373" width="6.5" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="1063.33" y="383.5" ></text>
</g>
<g >
<title>std::function&lt;void ()&gt;::function&lt;MYSQL_BIN_LOG::commit(THD*, bool)::{lambda()#1}, void&gt;(MYSQL_BIN_LOG::commit(THD*, bool)::{lambda()#1}&amp;&amp;) (1 samples, 0.55%)</title><rect x="1021.4" y="389" width="6.5" height="15.0" fill="rgb(89,89,199)" rx="2" ry="2" />
<text  x="1024.43" y="399.5" ></text>
</g>
<g >
<title>open_tables(THD*, Table_ref**, unsigned int*, unsigned int, Prelocking_strategy*) (10 samples, 5.49%)</title><rect x="891.8" y="373" width="64.8" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="894.76" y="383.5" >open_ta..</text>
</g>
<g >
<title>std::allocator_traits&lt;Malloc_allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate(Malloc_allocator&lt;std::__detail::_Hash_node_base*&gt;&amp;, std::__detail::_Hash_node_base**, unsigned long) (1 samples, 0.55%)</title><rect x="891.8" y="229" width="6.4" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="894.76" y="239.5" ></text>
</g>
<g >
<title>Security_context::password_expired() const (1 samples, 0.55%)</title><rect x="509.2" y="469" width="6.5" height="15.0" fill="rgb(81,81,191)" rx="2" ry="2" />
<text  x="512.23" y="479.5" ></text>
</g>
<g >
<title>_db_enter_(char const*, int, char const*, unsigned int, _db_stack_frame_*) (1 samples, 0.55%)</title><rect x="632.4" y="293" width="6.5" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="635.42" y="303.5" ></text>
</g>
<g >
<title>Table_ref::fetch_number_of_rows(unsigned long long) (2 samples, 1.10%)</title><rect x="788.0" y="309" width="13.0" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="791.02" y="319.5" ></text>
</g>
<g >
<title>insert_fields(THD*, Query_block*, char const*, char const*, mem_root_deque&lt;Item*&gt;*, mem_root_deque&lt;Item*&gt;::Iterator&lt;Item*&gt;*, bool) (1 samples, 0.55%)</title><rect x="878.8" y="341" width="6.5" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="881.79" y="351.5" ></text>
</g>
<g >
<title>handler::worst_seek_times(double) (1 samples, 0.55%)</title><rect x="658.4" y="309" width="6.4" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="661.35" y="319.5" ></text>
</g>
<g >
<title>lock_table_names(THD*, Table_ref*, Table_ref*, unsigned long, unsigned int, Prealloced_array&lt;MDL_request*, 1ul&gt;*) (1 samples, 0.55%)</title><rect x="891.8" y="357" width="6.4" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="894.76" y="367.5" ></text>
</g>
<g >
<title>refill_obj_stock (1 samples, 0.55%)</title><rect x="327.7" y="405" width="6.5" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="330.69" y="415.5" ></text>
</g>
<g >
<title>mysql_socket_getfd(MYSQL_SOCKET) (1 samples, 0.55%)</title><rect x="1131.6" y="245" width="6.5" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="1134.65" y="255.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::commit(THD*, bool) (1 samples, 0.55%)</title><rect x="424.9" y="453" width="6.5" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="427.95" y="463.5" ></text>
</g>
<g >
<title>create_ref_for_key(JOIN*, JOIN_TAB*, Key_use*, unsigned long) (1 samples, 0.55%)</title><rect x="671.3" y="309" width="6.5" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="674.32" y="319.5" ></text>
</g>
<g >
<title>Table_cache::get_table(THD*, char const*, unsigned long, TABLE_SHARE**) (5 samples, 2.75%)</title><rect x="911.2" y="325" width="32.4" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="914.21" y="335.5" >Ta..</text>
</g>
<g >
<title>auto find_or_nullptr&lt;collation_unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(collation_unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.55%)</title><rect x="1014.9" y="341" width="6.5" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="1017.95" y="351.5" ></text>
</g>
<g >
<title>likely(bool) (1 samples, 0.55%)</title><rect x="541.6" y="405" width="6.5" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="544.65" y="415.5" ></text>
</g>
<g >
<title>JOIN::create_access_paths() (1 samples, 0.55%)</title><rect x="645.4" y="341" width="6.5" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="648.38" y="351.5" ></text>
</g>
<g >
<title>Opt_trace_struct::add_utf8_table(Table_ref const*) (1 samples, 0.55%)</title><rect x="801.0" y="325" width="6.5" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="803.99" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;collation_unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt;, std::default_delete&lt;collation_unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt; &gt; &gt;::get() const (1 samples, 0.55%)</title><rect x="1086.3" y="357" width="6.4" height="15.0" fill="rgb(85,85,195)" rx="2" ry="2" />
<text  x="1089.26" y="367.5" ></text>
</g>
<g >
<title>void my_internal_free&lt;&amp;(redirecting_deallocator(void*))&gt;(void*) (1 samples, 0.55%)</title><rect x="314.7" y="469" width="6.5" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="317.73" y="479.5" ></text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt;::_M_invoke&lt;0ul, 1ul, 2ul&gt;(std::_Index_tuple&lt;0ul, 1ul, 2ul&gt;) (1 samples, 0.55%)</title><rect x="1170.5" y="437" width="6.5" height="15.0" fill="rgb(131,131,236)" rx="2" ry="2" />
<text  x="1173.55" y="447.5" ></text>
</g>
<g >
<title>Session_tracker::store(THD*, String&amp;) (1 samples, 0.55%)</title><rect x="561.1" y="405" width="6.5" height="15.0" fill="rgb(117,117,223)" rx="2" ry="2" />
<text  x="564.10" y="415.5" ></text>
</g>
<g >
<title>WPACKET_init_static_len.constprop.0 (1 samples, 0.55%)</title><rect x="61.9" y="517" width="6.5" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="64.87" y="527.5" ></text>
</g>
<g >
<title>dd::cache::Local_multi_map&lt;dd::Schema&gt; const* dd::cache::Object_registry::m_map&lt;dd::Schema&gt;() const (1 samples, 0.55%)</title><rect x="1151.1" y="357" width="6.5" height="15.0" fill="rgb(112,112,220)" rx="2" ry="2" />
<text  x="1154.10" y="367.5" ></text>
</g>
<g >
<title>ossl_gcm_get_ctx_params (1 samples, 0.55%)</title><rect x="94.3" y="501" width="6.5" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="97.29" y="511.5" ></text>
</g>
<g >
<title>_db_enter_(char const*, int, char const*, unsigned int, _db_stack_frame_*) (1 samples, 0.55%)</title><rect x="613.0" y="389" width="6.5" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="615.97" y="399.5" ></text>
</g>
<g >
<title>pfs_unlock_mutex_v1(PSI_mutex*) (1 samples, 0.55%)</title><rect x="852.9" y="341" width="6.4" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="855.86" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.55%)</title><rect x="107.3" y="485" width="6.4" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="110.25" y="495.5" ></text>
</g>
<g >
<title>TrxInInnoDB::TrxInInnoDB(trx_t*, bool) (1 samples, 0.55%)</title><rect x="956.6" y="341" width="6.5" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="959.59" y="351.5" ></text>
</g>
<g >
<title>NextFunctionIterator&lt;Table_ref, &amp;(Table_ref* GetMember&lt;Table_ref, &amp;Table_ref::next_global&gt;(Table_ref const*))&gt;::NextFunctionIterator(Table_ref*) (1 samples, 0.55%)</title><rect x="859.3" y="341" width="6.5" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="862.34" y="351.5" ></text>
</g>
<g >
<title>btr_cur_search_to_nth_level(dict_index_t*, unsigned long, dtuple_t const*, page_cur_mode_t, unsigned long, btr_cur_t*, unsigned long, char const*, unsigned long, mtr_t*) (5 samples, 2.75%)</title><rect x="716.7" y="181" width="32.4" height="15.0" fill="rgb(123,123,230)" rx="2" ry="2" />
<text  x="719.70" y="191.5" >bt..</text>
</g>
<g >
<title>_db_keyword_(CODE_STATE*, char const*, int) (1 samples, 0.55%)</title><rect x="606.5" y="405" width="6.5" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="609.48" y="415.5" ></text>
</g>
<g >
<title>TrxInInnoDB::enter(trx_t*, bool) (2 samples, 1.10%)</title><rect x="911.2" y="229" width="13.0" height="15.0" fill="rgb(106,106,213)" rx="2" ry="2" />
<text  x="914.21" y="239.5" ></text>
</g>
<g >
<title>lf_hash_search(LF_HASH*, LF_PINS*, void const*, unsigned int) (1 samples, 0.55%)</title><rect x="1105.7" y="405" width="6.5" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="1108.71" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (4 samples, 2.20%)</title><rect x="113.7" y="485" width="26.0" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="116.74" y="495.5" >d..</text>
</g>
<g >
<title>THD::send_result_set_row(mem_root_deque&lt;Item*&gt; const&amp;) (1 samples, 0.55%)</title><rect x="625.9" y="341" width="6.5" height="15.0" fill="rgb(81,81,191)" rx="2" ry="2" />
<text  x="628.93" y="351.5" ></text>
</g>
<g >
<title>TrxInInnoDB::wait(trx_t const*) (1 samples, 0.55%)</title><rect x="956.6" y="309" width="6.5" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="959.59" y="319.5" ></text>
</g>
<g >
<title>caching_sha2_password_authenticate(MYSQL_PLUGIN_VIO*, MYSQL_SERVER_AUTH_INFO*) (2 samples, 1.10%)</title><rect x="1131.6" y="405" width="13.0" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="1134.65" y="415.5" ></text>
</g>
<g >
<title>THD::cleanup() (5 samples, 2.75%)</title><rect x="424.9" y="469" width="32.5" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="427.95" y="479.5" >TH..</text>
</g>
<g >
<title>AutoDebugTrace::~AutoDebugTrace() (1 samples, 0.55%)</title><rect x="528.7" y="421" width="6.5" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="531.68" y="431.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.55%)</title><rect x="87.8" y="501" width="6.5" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="90.80" y="511.5" ></text>
</g>
<g >
<title>ha_commit_low(THD*, bool, bool) (1 samples, 0.55%)</title><rect x="424.9" y="421" width="6.5" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="427.95" y="431.5" ></text>
</g>
<g >
<title>btr_search_guess_on_hash(dtuple_t const*, unsigned long, unsigned long, btr_cur_t*, unsigned long, mtr_t*) (4 samples, 2.20%)</title><rect x="723.2" y="165" width="25.9" height="15.0" fill="rgb(93,93,201)" rx="2" ry="2" />
<text  x="726.19" y="175.5" >b..</text>
</g>
<g >
<title>Table_cache::assert_owner() (1 samples, 0.55%)</title><rect x="995.5" y="309" width="6.5" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="998.49" y="319.5" ></text>
</g>
<g >
<title>pfs_memory_free_vc(unsigned int, unsigned long, PSI_thread*) (1 samples, 0.55%)</title><rect x="42.4" y="453" width="6.5" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="45.42" y="463.5" ></text>
</g>
<g >
<title>tcp_ack (1 samples, 0.55%)</title><rect x="256.4" y="245" width="6.5" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="259.37" y="255.5" ></text>
</g>
<g >
<title>mysql_change_db(THD*, MYSQL_LEX_CSTRING const&amp;, bool) (3 samples, 1.65%)</title><rect x="1144.6" y="421" width="19.5" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="1147.62" y="431.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::Context::locked(TTASEventMutex&lt;GenericPolicy&gt; const*, char const*, unsigned long) (1 samples, 0.55%)</title><rect x="963.1" y="213" width="6.5" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="966.08" y="223.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (1 samples, 0.55%)</title><rect x="483.3" y="181" width="6.5" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="486.30" y="191.5" ></text>
</g>
<g >
<title>my_malloc(unsigned int, unsigned long, int) (3 samples, 1.65%)</title><rect x="23.0" y="485" width="19.4" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="25.97" y="495.5" ></text>
</g>
<g >
<title>QEP_shared_owner::keys() const (1 samples, 0.55%)</title><rect x="664.8" y="309" width="6.5" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="667.84" y="319.5" ></text>
</g>
<g >
<title>netif_receive_skb_list_internal (1 samples, 0.55%)</title><rect x="256.4" y="373" width="6.5" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="259.37" y="383.5" ></text>
</g>
<g >
<title>Item_equal::add(THD*, Item*) (2 samples, 1.10%)</title><rect x="775.1" y="261" width="12.9" height="15.0" fill="rgb(86,86,196)" rx="2" ry="2" />
<text  x="778.05" y="271.5" ></text>
</g>
<g >
<title>read_const(TABLE*, Index_lookup*) (15 samples, 8.24%)</title><rect x="677.8" y="293" width="97.3" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="680.80" y="303.5" >read_const(..</text>
</g>
<g >
<title>Session_sysvars_tracker::vars_list::search(unsigned char const*, unsigned long) (1 samples, 0.55%)</title><rect x="1014.9" y="357" width="6.5" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="1017.95" y="367.5" ></text>
</g>
<g >
<title>make_join_query_block(JOIN*, Item*) (1 samples, 0.55%)</title><rect x="820.4" y="341" width="6.5" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="823.44" y="351.5" ></text>
</g>
<g >
<title>Malloc_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate(std::__detail::_Hash_node_base**, unsigned long) (1 samples, 0.55%)</title><rect x="891.8" y="213" width="6.4" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="894.76" y="223.5" ></text>
</g>
<g >
<title>TABLE::init(THD*, Table_ref*) (1 samples, 0.55%)</title><rect x="904.7" y="325" width="6.5" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="907.73" y="335.5" ></text>
</g>
<g >
<title>open_table_get_mdl_lock(THD*, Open_table_context*, Table_ref*, unsigned int, MDL_ticket**) (1 samples, 0.55%)</title><rect x="950.1" y="325" width="6.5" height="15.0" fill="rgb(129,129,234)" rx="2" ry="2" />
<text  x="953.11" y="335.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (1 samples, 0.55%)</title><rect x="1170.5" y="485" width="6.5" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="1173.55" y="495.5" ></text>
</g>
<g >
<title>dd::cache::Dictionary_client::rollback_modified_objects() (3 samples, 1.65%)</title><rect x="437.9" y="437" width="19.5" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="440.91" y="447.5" ></text>
</g>
<g >
<title>bool contextualize_array&lt;Parse_context, Mem_root_array_YY&lt;PT_table_reference*&gt; &gt;(Parse_context*, Mem_root_array_YY&lt;PT_table_reference*&gt;*) (2 samples, 1.10%)</title><rect x="1027.9" y="341" width="13.0" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="1030.91" y="351.5" ></text>
</g>
<g >
<title>std::operator&amp;(std::memory_order, std::__memory_order_modifier) (1 samples, 0.55%)</title><rect x="917.7" y="133" width="6.5" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="920.69" y="143.5" ></text>
</g>
<g >
<title>dd::cache::Local_multi_map&lt;dd::Abstract_table&gt;* dd::cache::Object_registry::create_map_if_needed&lt;dd::cache::Local_multi_map&lt;dd::Abstract_table&gt; &gt;(std::unique_ptr&lt;dd::cache::Local_multi_map&lt;dd::Abstract_table&gt;, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Abstract_table&gt; &gt; &gt;*) (1 samples, 0.55%)</title><rect x="437.9" y="357" width="6.5" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="440.91" y="367.5" ></text>
</g>
<g >
<title>security_socket_sendmsg (1 samples, 0.55%)</title><rect x="113.7" y="373" width="6.5" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="116.74" y="383.5" ></text>
</g>
<g >
<title>PT_set_variable::contextualize(Parse_context*) (1 samples, 0.55%)</title><rect x="1066.8" y="357" width="6.5" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="1069.81" y="367.5" ></text>
</g>
<g >
<title>Connection_acceptor&lt;Mysqld_socket_listener&gt;::connection_event_loop() (1 samples, 0.55%)</title><rect x="1183.5" y="485" width="6.5" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="1186.52" y="495.5" ></text>
</g>
<g >
<title>pfs_set_statement_rows_sent_vc(PSI_statement_locker*, unsigned long long) (1 samples, 0.55%)</title><rect x="619.5" y="309" width="6.4" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="622.45" y="319.5" ></text>
</g>
<g >
<title>TrxInInnoDB::exit(trx_t*) (1 samples, 0.55%)</title><rect x="943.6" y="245" width="6.5" height="15.0" fill="rgb(108,108,215)" rx="2" ry="2" />
<text  x="946.63" y="255.5" ></text>
</g>
<g >
<title>std::this_thread::get_id() (1 samples, 0.55%)</title><rect x="904.7" y="133" width="6.5" height="15.0" fill="rgb(85,85,195)" rx="2" ry="2" />
<text  x="907.73" y="143.5" ></text>
</g>
<g >
<title>find_memory_class(unsigned int) (1 samples, 0.55%)</title><rect x="42.4" y="437" width="6.5" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="45.42" y="447.5" ></text>
</g>
<g >
<title>send_server_handshake_packet(MPVIO_EXT*, char const*, unsigned int) (1 samples, 0.55%)</title><rect x="1138.1" y="373" width="6.5" height="15.0" fill="rgb(131,131,236)" rx="2" ry="2" />
<text  x="1141.13" y="383.5" ></text>
</g>
<g >
<title>ha_innobase::index_init(unsigned int, bool) (1 samples, 0.55%)</title><rect x="684.3" y="261" width="6.5" height="15.0" fill="rgb(136,136,241)" rx="2" ry="2" />
<text  x="687.29" y="271.5" ></text>
</g>
<g >
<title>trx_allocate_for_mysql() (1 samples, 0.55%)</title><rect x="930.7" y="213" width="6.4" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="933.66" y="223.5" ></text>
</g>
<g >
<title>Item_ident::Item_ident(YYLTYPE const&amp;, char const*, char const*, char const*) (1 samples, 0.55%)</title><rect x="1053.8" y="373" width="6.5" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="1056.85" y="383.5" ></text>
</g>
<g >
<title>dict_index_is_ibuf(dict_index_t const*) (1 samples, 0.55%)</title><rect x="684.3" y="197" width="6.5" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="687.29" y="207.5" ></text>
</g>
<g >
<title>tcp_sendmsg (1 samples, 0.55%)</title><rect x="1138.1" y="181" width="6.5" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="1141.13" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt;, Malloc_allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt; &gt;, std::__detail::_Select1st, Collation_key_equal, Collation_hasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) const (1 samples, 0.55%)</title><rect x="1014.9" y="309" width="6.5" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="1017.95" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;Malloc_allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) (1 samples, 0.55%)</title><rect x="891.8" y="245" width="6.4" height="15.0" fill="rgb(123,123,229)" rx="2" ry="2" />
<text  x="894.76" y="255.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;collation_unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt;, std::default_delete&lt;collation_unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt; &gt; &gt;::_M_ptr() const (1 samples, 0.55%)</title><rect x="1086.3" y="341" width="6.4" height="15.0" fill="rgb(81,81,191)" rx="2" ry="2" />
<text  x="1089.26" y="351.5" ></text>
</g>
<g >
<title>__release_sock (1 samples, 0.55%)</title><rect x="1138.1" y="149" width="6.5" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="1141.13" y="159.5" ></text>
</g>
<g >
<title>ha_innobase::update_thd(THD*) (1 samples, 0.55%)</title><rect x="898.2" y="293" width="6.5" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="901.24" y="303.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (3 samples, 1.65%)</title><rect x="120.2" y="37" width="19.5" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="123.22" y="47.5" ></text>
</g>
<g >
<title>tcp_try_coalesce (1 samples, 0.55%)</title><rect x="1138.1" y="85" width="6.5" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="1141.13" y="95.5" ></text>
</g>
<g >
<title>syscall_trace_enter.constprop.0 (1 samples, 0.55%)</title><rect x="107.3" y="469" width="6.4" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="110.25" y="479.5" ></text>
</g>
<g >
<title>TrxInInnoDB::TrxInInnoDB(trx_t*, bool) (2 samples, 1.10%)</title><rect x="911.2" y="245" width="13.0" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="914.21" y="255.5" ></text>
</g>
<g >
<title>evp_rand_generate_locked (1 samples, 0.55%)</title><rect x="373.1" y="533" width="6.5" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="376.08" y="543.5" ></text>
</g>
<g >
<title>pfs_ssl_bio_callback_ex(bio_st*, int, char const*, unsigned long, int, long, int, unsigned long*) (1 samples, 0.55%)</title><rect x="146.2" y="501" width="6.4" height="15.0" fill="rgb(97,97,205)" rx="2" ry="2" />
<text  x="149.15" y="511.5" ></text>
</g>
<g >
<title>tcp_sendmsg (3 samples, 1.65%)</title><rect x="120.2" y="389" width="19.5" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="123.22" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 2.20%)</title><rect x="113.7" y="501" width="26.0" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="116.74" y="511.5" >e..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 2.20%)</title><rect x="476.8" y="309" width="25.9" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="479.81" y="319.5" >e..</text>
</g>
<g >
<title>cmp_dtuple_rec_with_match_low(dtuple_t const*, unsigned char const*, dict_index_t const*, unsigned long const*, unsigned long, unsigned long*) (2 samples, 1.10%)</title><rect x="729.7" y="117" width="12.9" height="15.0" fill="rgb(99,99,208)" rx="2" ry="2" />
<text  x="732.67" y="127.5" ></text>
</g>
<g >
<title>__x64_sys_futex (1 samples, 0.55%)</title><rect x="1177.0" y="485" width="6.5" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="1180.03" y="495.5" ></text>
</g>
<g >
<title>to_string(MYSQL_LEX_CSTRING const&amp;) (1 samples, 0.55%)</title><rect x="1118.7" y="341" width="6.5" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="1121.68" y="351.5" ></text>
</g>
<g >
<title>__errno_location (1 samples, 0.55%)</title><rect x="502.7" y="293" width="6.5" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="505.75" y="303.5" ></text>
</g>
<g >
<title>ib_log_files_g (2 samples, 1.10%)</title><rect x="1170.5" y="549" width="13.0" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="1173.55" y="559.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.55%)</title><rect x="684.3" y="181" width="6.5" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="687.29" y="191.5" ></text>
</g>
<g >
<title>my_malloc(unsigned int, unsigned long, int) (1 samples, 0.55%)</title><rect x="16.5" y="485" width="6.5" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="19.48" y="495.5" ></text>
</g>
<g >
<title>Bitmap&lt;64u&gt;::init(unsigned int) (1 samples, 0.55%)</title><rect x="671.3" y="197" width="6.5" height="15.0" fill="rgb(110,110,218)" rx="2" ry="2" />
<text  x="674.32" y="207.5" ></text>
</g>
<g >
<title>trx_coordinator::commit_in_engines(THD*, bool, bool) (1 samples, 0.55%)</title><rect x="424.9" y="437" width="6.5" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="427.95" y="447.5" ></text>
</g>
<g >
<title>pfs_digest_end_vc(PSI_digest_locker*, sql_digest_storage const*) (1 samples, 0.55%)</title><rect x="1073.3" y="405" width="6.5" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="1076.30" y="415.5" ></text>
</g>
<g >
<title>open_tables_for_query(THD*, Table_ref*, unsigned int) (11 samples, 6.04%)</title><rect x="885.3" y="389" width="71.3" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="888.27" y="399.5" >open_tab..</text>
</g>
<g >
<title>__local_bh_enable_ip (3 samples, 1.65%)</title><rect x="120.2" y="277" width="19.5" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="123.22" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.55%)</title><rect x="1183.5" y="437" width="6.5" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="1186.52" y="447.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void (*(log_t*))(log_t*)&gt;::operator()&lt;, void&gt;() (1 samples, 0.55%)</title><rect x="1170.5" y="373" width="6.5" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="1173.55" y="383.5" ></text>
</g>
<g >
<title>innobase_trx_allocate(THD*) (2 samples, 1.10%)</title><rect x="924.2" y="229" width="12.9" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="927.18" y="239.5" ></text>
</g>
<g >
<title>release_sock (1 samples, 0.55%)</title><rect x="1138.1" y="165" width="6.5" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="1141.13" y="175.5" ></text>
</g>
<g >
<title>__libc_start_call_main (1 samples, 0.55%)</title><rect x="1183.5" y="533" width="6.5" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="1186.52" y="543.5" ></text>
</g>
<g >
<title>Query_expression::ExecuteIteratorQuery(THD*) (3 samples, 1.65%)</title><rect x="619.5" y="373" width="19.4" height="15.0" fill="rgb(96,96,204)" rx="2" ry="2" />
<text  x="622.45" y="383.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;dd::cache::Local_multi_map&lt;dd::Abstract_table&gt;, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Abstract_table&gt; &gt;, true, true&gt;::__uniq_ptr_impl() (1 samples, 0.55%)</title><rect x="1157.6" y="357" width="6.5" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="1160.58" y="367.5" ></text>
</g>
<g >
<title>dtuple_t::compare(unsigned char const*, dict_index_t const*, unsigned long const*, unsigned long*) const (3 samples, 1.65%)</title><rect x="729.7" y="133" width="19.4" height="15.0" fill="rgb(94,94,202)" rx="2" ry="2" />
<text  x="732.67" y="143.5" ></text>
</g>
<g >
<title>sha512_block_data_order_avx2 (3 samples, 1.65%)</title><rect x="282.3" y="517" width="19.5" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="285.31" y="527.5" ></text>
</g>
<g >
<title>invoke_post_parse_rewrite_plugins(THD*, bool) (1 samples, 0.55%)</title><rect x="593.5" y="437" width="6.5" height="15.0" fill="rgb(118,118,224)" rx="2" ry="2" />
<text  x="596.52" y="447.5" ></text>
</g>
<g >
<title>__strncmp_avx2 (1 samples, 0.55%)</title><rect x="1027.9" y="293" width="6.5" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="1030.91" y="303.5" ></text>
</g>
<g >
<title>carry_global_memory_stat_alloc_delta(PFS_memory_stat_alloc_delta*, unsigned int) (1 samples, 0.55%)</title><rect x="29.5" y="389" width="6.4" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="32.45" y="399.5" ></text>
</g>
<g >
<title>Arg_comparator::set_cmp_func(Item_result_field*, Item**, Item**, Item_result) (1 samples, 0.55%)</title><rect x="775.1" y="197" width="6.4" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="778.05" y="207.5" ></text>
</g>
<g >
<title>_db_enter_(char const*, int, char const*, unsigned int, _db_stack_frame_*) (1 samples, 0.55%)</title><rect x="463.8" y="309" width="6.5" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="466.85" y="319.5" ></text>
</g>
<g >
<title>vio_ssl_read(Vio*, unsigned char*, unsigned long) (5 samples, 2.75%)</title><rect x="476.8" y="357" width="32.4" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="479.81" y="367.5" >vi..</text>
</g>
<g >
<title>add_system_variable_assignment(THD*, MYSQL_LEX_CSTRING, MYSQL_LEX_CSTRING, enum_var_type, Item*) (1 samples, 0.55%)</title><rect x="1066.8" y="341" width="6.5" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="1069.81" y="351.5" ></text>
</g>
<g >
<title>TrxInInnoDB::~TrxInInnoDB() (1 samples, 0.55%)</title><rect x="943.6" y="261" width="6.5" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="946.63" y="271.5" ></text>
</g>
<g >
<title>CRYPTO_zalloc (3 samples, 1.65%)</title><rect x="23.0" y="517" width="19.4" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="25.97" y="527.5" ></text>
</g>
<g >
<title>row_sel_try_search_shortcut_for_mysql(unsigned char const**, row_prebuilt_t*, unsigned long**, mem_block_info_t**, mtr_t*) (6 samples, 3.30%)</title><rect x="716.7" y="213" width="38.9" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="719.70" y="223.5" >row..</text>
</g>
<g >
<title>Opt_trace_start::Opt_trace_start(THD*, Table_ref*, enum_sql_command, List&lt;set_var_base&gt;*, char const*, unsigned long, sp_printable*, CHARSET_INFO const*) (1 samples, 0.55%)</title><rect x="606.5" y="421" width="6.5" height="15.0" fill="rgb(107,107,215)" rx="2" ry="2" />
<text  x="609.48" y="431.5" ></text>
</g>
<g >
<title>ppoll (4 samples, 2.20%)</title><rect x="476.8" y="325" width="25.9" height="15.0" fill="rgb(138,138,244)" rx="2" ry="2" />
<text  x="479.81" y="335.5" >p..</text>
</g>
<g >
<title>ssl_read_internal (1 samples, 0.55%)</title><rect x="470.3" y="357" width="6.5" height="15.0" fill="rgb(109,109,216)" rx="2" ry="2" />
<text  x="473.33" y="367.5" ></text>
</g>
<g >
<title>Query_expression::execute(THD*) (3 samples, 1.65%)</title><rect x="619.5" y="389" width="19.4" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="622.45" y="399.5" ></text>
</g>
<g >
<title>void* my_internal_realloc&lt;&amp;(redirecting_allocator(unsigned long, int)), &amp;(redirecting_deallocator(void*))&gt;(unsigned int, void*, unsigned long, int) (1 samples, 0.55%)</title><rect x="515.7" y="437" width="6.5" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="518.71" y="447.5" ></text>
</g>
<g >
<title>store_key::store_key(THD*, Field*, unsigned char*, unsigned char*, unsigned int, Item*) (1 samples, 0.55%)</title><rect x="671.3" y="245" width="6.5" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="674.32" y="255.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.55%)</title><rect x="327.7" y="469" width="6.5" height="15.0" fill="rgb(123,123,229)" rx="2" ry="2" />
<text  x="330.69" y="479.5" ></text>
</g>
<g >
<title>trx_allocate_for_background() (1 samples, 0.55%)</title><rect x="930.7" y="197" width="6.4" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="933.66" y="207.5" ></text>
</g>
<g >
<title>do_sys_poll (1 samples, 0.55%)</title><rect x="1183.5" y="405" width="6.5" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="1186.52" y="415.5" ></text>
</g>
<g >
<title>my_openssl_free(void*, char const*, int) (1 samples, 0.55%)</title><rect x="314.7" y="501" width="6.5" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="317.73" y="511.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(unsigned int, unsigned int, char const*, unsigned int) (1 samples, 0.55%)</title><rect x="963.1" y="261" width="6.5" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="966.08" y="271.5" ></text>
</g>
<g >
<title>find_or_create_digest(PFS_thread*, sql_digest_storage const*, char const*, unsigned int) (1 samples, 0.55%)</title><rect x="1105.7" y="421" width="6.5" height="15.0" fill="rgb(118,118,224)" rx="2" ry="2" />
<text  x="1108.71" y="431.5" ></text>
</g>
<g >
<title>inline_mysql_set_statement_text(PSI_statement_locker*, char const*, unsigned int) (1 samples, 0.55%)</title><rect x="541.6" y="421" width="6.5" height="15.0" fill="rgb(131,131,237)" rx="2" ry="2" />
<text  x="544.65" y="431.5" ></text>
</g>
<g >
<title>Sql_cmd_dml::prepare(THD*) (15 samples, 8.24%)</title><rect x="859.3" y="405" width="97.3" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="862.34" y="415.5" >Sql_cmd_dml..</text>
</g>
<g >
<title>net_flush(NET*) (1 samples, 0.55%)</title><rect x="548.1" y="405" width="6.5" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="551.13" y="415.5" ></text>
</g>
<g >
<title>std::this_thread::get_id() (1 samples, 0.55%)</title><rect x="963.1" y="197" width="6.5" height="15.0" fill="rgb(85,85,195)" rx="2" ry="2" />
<text  x="966.08" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.55%)</title><rect x="1138.1" y="261" width="6.5" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="1141.13" y="271.5" ></text>
</g>
<g >
<title>QEP_shared_owner::type() const (1 samples, 0.55%)</title><rect x="651.9" y="309" width="6.5" height="15.0" fill="rgb(125,125,232)" rx="2" ry="2" />
<text  x="654.87" y="319.5" ></text>
</g>
<g >
<title>NewFakeSingleRowAccessPath(THD*, bool) (1 samples, 0.55%)</title><rect x="645.4" y="309" width="6.5" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="648.38" y="319.5" ></text>
</g>
<g >
<title>vfs_write (4 samples, 2.20%)</title><rect x="113.7" y="453" width="26.0" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="116.74" y="463.5" >v..</text>
</g>
<g >
<title>void std::_Bind&lt;void (*(log_t*))(log_t*)&gt;::__call&lt;void, , 0ul&gt;(std::tuple&lt;&gt;&amp;&amp;, std::_Index_tuple&lt;0ul&gt;) (1 samples, 0.55%)</title><rect x="1170.5" y="357" width="6.5" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="1173.55" y="367.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.55%)</title><rect x="489.8" y="197" width="6.5" height="15.0" fill="rgb(87,87,197)" rx="2" ry="2" />
<text  x="492.78" y="207.5" ></text>
</g>
<g >
<title>hrtimer_try_to_cancel.part.0 (1 samples, 0.55%)</title><rect x="476.8" y="213" width="6.5" height="15.0" fill="rgb(85,85,195)" rx="2" ry="2" />
<text  x="479.81" y="223.5" ></text>
</g>
<g >
<title>ha_innobase::store_lock(THD*, THR_LOCK_DATA**, thr_lock_type) (1 samples, 0.55%)</title><rect x="956.6" y="357" width="6.5" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="959.59" y="367.5" ></text>
</g>
<g >
<title>handler::index_read_map(unsigned char*, unsigned char const*, unsigned long, ha_rkey_function) (13 samples, 7.14%)</title><rect x="690.8" y="261" width="84.3" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="693.77" y="271.5" >handler::..</text>
</g>
<g >
<title>void mutex_enter_inline&lt;PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt; &gt;(PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;*, ut::Location) (1 samples, 0.55%)</title><rect x="930.7" y="133" width="6.4" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="933.66" y="143.5" ></text>
</g>
<g >
<title>Query_expression::ExecuteIteratorQuery(THD*)::{lambda()#1}::operator()() const (1 samples, 0.55%)</title><rect x="632.4" y="341" width="6.5" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="635.42" y="351.5" ></text>
</g>
<g >
<title>PROFILING::status_change(char const*, char const*, char const*, unsigned int) (1 samples, 0.55%)</title><rect x="463.8" y="341" width="6.5" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="466.85" y="351.5" ></text>
</g>
<g >
<title>set_var_collation_client::update(THD*) (1 samples, 0.55%)</title><rect x="1014.9" y="405" width="6.5" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="1017.95" y="415.5" ></text>
</g>
<g >
<title>main (1 samples, 0.55%)</title><rect x="1183.5" y="517" width="6.5" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="1186.52" y="527.5" ></text>
</g>
<g >
<title>Query_arena::free_items() (2 samples, 1.10%)</title><rect x="580.5" y="421" width="13.0" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="583.55" y="431.5" ></text>
</g>
<g >
<title>Item_bool_func2::set_cmp_func() (1 samples, 0.55%)</title><rect x="775.1" y="229" width="6.4" height="15.0" fill="rgb(109,109,216)" rx="2" ry="2" />
<text  x="778.05" y="239.5" ></text>
</g>
<g >
<title>__strchr_avx2 (1 samples, 0.55%)</title><rect x="424.9" y="373" width="6.5" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="427.95" y="383.5" ></text>
</g>
<g >
<title>native_rw_rdlock(pthread_rwlock_t*) (1 samples, 0.55%)</title><rect x="833.4" y="261" width="6.5" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="836.41" y="271.5" ></text>
</g>
<g >
<title>log_files_governor_iteration_low(log_t&amp;, bool) (1 samples, 0.55%)</title><rect x="1170.5" y="277" width="6.5" height="15.0" fill="rgb(135,135,241)" rx="2" ry="2" />
<text  x="1173.55" y="287.5" ></text>
</g>
<g >
<title>my_net_read(NET*) (7 samples, 3.85%)</title><rect x="463.8" y="437" width="45.4" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="466.85" y="447.5" >my_n..</text>
</g>
<g >
<title>__strchr_avx2 (1 samples, 0.55%)</title><rect x="814.0" y="325" width="6.4" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="816.96" y="335.5" ></text>
</g>
<g >
<title>net_read_uncompressed_packet(NET*, unsigned long&amp;) (1 samples, 0.55%)</title><rect x="1131.6" y="341" width="6.5" height="15.0" fill="rgb(85,85,195)" rx="2" ry="2" />
<text  x="1134.65" y="351.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.55%)</title><rect x="684.3" y="101" width="6.5" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="687.29" y="111.5" ></text>
</g>
<g >
<title>TrxInInnoDB::enter(trx_t*, bool) (1 samples, 0.55%)</title><rect x="982.5" y="293" width="6.5" height="15.0" fill="rgb(106,106,213)" rx="2" ry="2" />
<text  x="985.53" y="303.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (3 samples, 1.65%)</title><rect x="120.2" y="117" width="19.5" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="123.22" y="127.5" ></text>
</g>
<g >
<title>my_net_read(NET*) (1 samples, 0.55%)</title><rect x="1131.6" y="357" width="6.5" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="1134.65" y="367.5" ></text>
</g>
<g >
<title>tcp_write_xmit (3 samples, 1.65%)</title><rect x="120.2" y="341" width="19.5" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="123.22" y="351.5" ></text>
</g>
<g >
<title>dyn_buf_t&lt;512ul&gt;::push_back(dyn_buf_t&lt;512ul&gt;::block_t*) (1 samples, 0.55%)</title><rect x="710.2" y="165" width="6.5" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="713.22" y="175.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (1 samples, 0.55%)</title><rect x="35.9" y="389" width="6.5" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="38.93" y="399.5" ></text>
</g>
<g >
<title>net_read_packet(NET*, unsigned long*) (7 samples, 3.85%)</title><rect x="463.8" y="405" width="45.4" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="466.85" y="415.5" >net_..</text>
</g>
<g >
<title>void* my_internal_malloc&lt;&amp;(redirecting_allocator(unsigned long, int))&gt;(unsigned int, unsigned long, int) (1 samples, 0.55%)</title><rect x="515.7" y="421" width="6.5" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="518.71" y="431.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Malloc_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~unordered_set() (1 samples, 0.55%)</title><rect x="891.8" y="309" width="6.4" height="15.0" fill="rgb(131,131,237)" rx="2" ry="2" />
<text  x="894.76" y="319.5" ></text>
</g>
<g >
<title>bool std::operator==&lt;dd::cache::Local_multi_map&lt;dd::Abstract_table&gt;, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Abstract_table&gt; &gt; &gt;(std::unique_ptr&lt;dd::cache::Local_multi_map&lt;dd::Abstract_table&gt;, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Abstract_table&gt; &gt; &gt; const&amp;, decltype(nullptr)) (1 samples, 0.55%)</title><rect x="437.9" y="341" width="6.5" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="440.91" y="351.5" ></text>
</g>
<g >
<title>std::__cmpexch_failure_order(std::memory_order) (1 samples, 0.55%)</title><rect x="982.5" y="197" width="6.5" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="985.53" y="207.5" ></text>
</g>
<g >
<title>TrxInInnoDB::enter(trx_t*, bool) (1 samples, 0.55%)</title><rect x="904.7" y="229" width="6.5" height="15.0" fill="rgb(106,106,213)" rx="2" ry="2" />
<text  x="907.73" y="239.5" ></text>
</g>
<g >
<title>__netif_receive_skb_list_core (1 samples, 0.55%)</title><rect x="256.4" y="357" width="6.5" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="259.37" y="367.5" ></text>
</g>
<g >
<title>Collation_hasher::operator()(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) const (1 samples, 0.55%)</title><rect x="1014.9" y="277" width="6.5" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="1017.95" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.55%)</title><rect x="1177.0" y="501" width="6.5" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="1180.03" y="511.5" ></text>
</g>
<g >
<title>ssl_handshake_hash (1 samples, 0.55%)</title><rect x="314.7" y="517" width="6.5" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="317.73" y="527.5" ></text>
</g>
<g >
<title>my_hash_sort_uca_900 (1 samples, 0.55%)</title><rect x="1014.9" y="261" width="6.5" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="1017.95" y="271.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::Context::locked(TTASEventMutex&lt;GenericPolicy&gt; const*, char const*, unsigned long) (1 samples, 0.55%)</title><rect x="898.2" y="181" width="6.5" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="901.24" y="191.5" ></text>
</g>
<g >
<title>PFS_memory_safe_stat::count_alloc(unsigned long, PFS_memory_stat_alloc_delta*) (1 samples, 0.55%)</title><rect x="515.7" y="389" width="6.5" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="518.71" y="399.5" ></text>
</g>
<g >
<title>timespec64_add_safe (1 samples, 0.55%)</title><rect x="496.3" y="245" width="6.4" height="15.0" fill="rgb(93,93,201)" rx="2" ry="2" />
<text  x="499.26" y="255.5" ></text>
</g>
<g >
<title>_db_enter_(char const*, int, char const*, unsigned int, _db_stack_frame_*) (1 samples, 0.55%)</title><rect x="690.8" y="213" width="6.5" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="693.77" y="223.5" ></text>
</g>
<g >
<title>update_const_equal_items(THD*, Item*, JOIN_TAB*) (2 samples, 1.10%)</title><rect x="775.1" y="293" width="12.9" height="15.0" fill="rgb(85,85,195)" rx="2" ry="2" />
<text  x="778.05" y="303.5" ></text>
</g>
<g >
<title>AutoDebugTrace::~AutoDebugTrace() (1 samples, 0.55%)</title><rect x="502.7" y="309" width="6.5" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="505.75" y="319.5" ></text>
</g>
<g >
<title>rec_offs_n_fields(unsigned long const*) (1 samples, 0.55%)</title><rect x="742.6" y="117" width="6.5" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="745.64" y="127.5" ></text>
</g>
<g >
<title>trx_create_low() (1 samples, 0.55%)</title><rect x="930.7" y="181" width="6.4" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="933.66" y="191.5" ></text>
</g>
<g >
<title>btr_pcur_t::open_no_init(dict_index_t*, dtuple_t const*, page_cur_mode_t, unsigned long, unsigned long, mtr_t*, ut::Location) (6 samples, 3.30%)</title><rect x="716.7" y="197" width="38.9" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="719.70" y="207.5" >btr..</text>
</g>
<g >
<title>Scope_guard&lt;Query_expression::ExecuteIteratorQuery(THD*)::{lambda()#1}&gt;::~Scope_guard() (1 samples, 0.55%)</title><rect x="632.4" y="357" width="6.5" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="635.42" y="367.5" ></text>
</g>
<g >
<title>comparable_in_index(Item*, Field const*, Field::imagetype, Item_func::Functype, Item const*) (1 samples, 0.55%)</title><rect x="807.5" y="277" width="6.5" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="810.47" y="287.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1 samples, 0.55%)</title><rect x="476.8" y="181" width="6.5" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="479.81" y="191.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1 samples, 0.55%)</title><rect x="684.3" y="165" width="6.5" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="687.29" y="175.5" ></text>
</g>
<g >
<title>trx_mutex_own(trx_t const*) (1 samples, 0.55%)</title><rect x="956.6" y="277" width="6.5" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="959.59" y="287.5" ></text>
</g>
<g >
<title>buf_block_buf_fix_inc(buf_block_t*, ut::Location) (1 samples, 0.55%)</title><rect x="703.7" y="149" width="6.5" height="15.0" fill="rgb(99,99,208)" rx="2" ry="2" />
<text  x="706.74" y="159.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;dd::cache::Local_multi_map&lt;dd::Abstract_table&gt;, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Abstract_table&gt; &gt; &gt;::__uniq_ptr_impl() (1 samples, 0.55%)</title><rect x="1157.6" y="341" width="6.5" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="1160.58" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;dd::cache::Local_multi_map&lt;dd::Abstract_table&gt;, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Abstract_table&gt; &gt; &gt;::operator bool() const (1 samples, 0.55%)</title><rect x="437.9" y="325" width="6.5" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="440.91" y="335.5" ></text>
</g>
<g >
<title>dd::cache::Local_multi_map&lt;dd::Abstract_table&gt;* dd::cache::Object_registry::m_map&lt;dd::Abstract_table&gt;() (1 samples, 0.55%)</title><rect x="437.9" y="389" width="6.5" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="440.91" y="399.5" ></text>
</g>
<g >
<title>tcp_sendmsg_locked (3 samples, 1.65%)</title><rect x="120.2" y="373" width="19.5" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="123.22" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;dd::cache::Local_multi_map&lt;dd::Abstract_table&gt;, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Abstract_table&gt; &gt; &gt;::get() const (1 samples, 0.55%)</title><rect x="437.9" y="309" width="6.5" height="15.0" fill="rgb(107,107,215)" rx="2" ry="2" />
<text  x="440.91" y="319.5" ></text>
</g>
<g >
<title>MEM_ROOT::ClearForReuse() (1 samples, 0.55%)</title><rect x="424.9" y="389" width="6.5" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="427.95" y="399.5" ></text>
</g>
<g >
<title>Protocol_classic::store_string(char const*, unsigned long, CHARSET_INFO const*) (1 samples, 0.55%)</title><rect x="625.9" y="261" width="6.5" height="15.0" fill="rgb(85,85,195)" rx="2" ry="2" />
<text  x="628.93" y="271.5" ></text>
</g>
<g >
<title>my_mutex_lock(my_mutex_t*, char const*, unsigned int) (1 samples, 0.55%)</title><rect x="567.6" y="421" width="6.5" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="570.58" y="431.5" ></text>
</g>
<g >
<title>PFS_memory_shared_stat::apply_alloc_delta(PFS_memory_stat_alloc_delta const*, PFS_memory_stat_alloc_delta*) (1 samples, 0.55%)</title><rect x="29.5" y="373" width="6.4" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="32.45" y="383.5" ></text>
</g>
<g >
<title>void dd::cache::Object_registry::erase&lt;dd::Abstract_table&gt;() (1 samples, 0.55%)</title><rect x="450.9" y="421" width="6.5" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="453.88" y="431.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.55%)</title><rect x="1177.0" y="517" width="6.5" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="1180.03" y="527.5" ></text>
</g>
<g >
<title>LEX::destroy() (1 samples, 0.55%)</title><rect x="574.1" y="437" width="6.4" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="577.07" y="447.5" ></text>
</g>
<g >
<title>tcp_xmit_recovery (1 samples, 0.55%)</title><rect x="256.4" y="213" width="6.5" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="259.37" y="223.5" ></text>
</g>
<g >
<title>JOIN::extract_func_dependent_tables() (19 samples, 10.44%)</title><rect x="664.8" y="325" width="123.2" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="667.84" y="335.5" >JOIN::extract_f..</text>
</g>
<g >
<title>THD::reset_query_for_display() (2 samples, 1.10%)</title><rect x="535.2" y="453" width="12.9" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="538.16" y="463.5" ></text>
</g>
<g >
<title>JOIN::query_expression() const (1 samples, 0.55%)</title><rect x="846.4" y="357" width="6.5" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="849.37" y="367.5" ></text>
</g>
<g >
<title>futex_wait_queue (1 samples, 0.55%)</title><rect x="1177.0" y="437" width="6.5" height="15.0" fill="rgb(111,111,219)" rx="2" ry="2" />
<text  x="1180.03" y="447.5" ></text>
</g>
<g >
<title>my_free(void*) (1 samples, 0.55%)</title><rect x="42.4" y="485" width="6.5" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="45.42" y="495.5" ></text>
</g>
<g >
<title>mysql_audit_notify(THD*, mysql_event_command_subclass_t, char const*, enum_server_command, char const*) (1 samples, 0.55%)</title><rect x="1112.2" y="469" width="6.5" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="1115.20" y="479.5" ></text>
</g>
<g >
<title>JOIN::make_join_plan() (25 samples, 13.74%)</title><rect x="651.9" y="341" width="162.1" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="654.87" y="351.5" >JOIN::make_join_plan()</text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::is_owned() const (1 samples, 0.55%)</title><rect x="943.6" y="213" width="6.5" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="946.63" y="223.5" ></text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::is_owned() const (1 samples, 0.55%)</title><rect x="904.7" y="149" width="6.5" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="907.73" y="159.5" ></text>
</g>
<g >
<title>init_ref_part(THD*, unsigned int, Item*, bool*, bool, unsigned long, unsigned long, bool, KEY_PART_INFO const*, unsigned char*, Index_lookup*) (1 samples, 0.55%)</title><rect x="671.3" y="293" width="6.5" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="674.32" y="303.5" ></text>
</g>
<g >
<title>void Detached_thread::operator()&lt;void (*)(log_t*), log_t*&gt;(void (*&amp;&amp;)(log_t*), log_t*&amp;&amp;) (1 samples, 0.55%)</title><rect x="1170.5" y="389" width="6.5" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="1173.55" y="399.5" ></text>
</g>
<g >
<title>void dd::cache::Object_registry::erase&lt;dd::Abstract_table&gt;() (2 samples, 1.10%)</title><rect x="437.9" y="405" width="13.0" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="440.91" y="415.5" ></text>
</g>
<g >
<title>Query_block::prepare(THD*, mem_root_deque&lt;Item*&gt;*) (3 samples, 1.65%)</title><rect x="865.8" y="373" width="19.5" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="868.82" y="383.5" ></text>
</g>
<g >
<title>rw_lock_debug_mutex_exit() (1 samples, 0.55%)</title><rect x="924.2" y="165" width="6.5" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="927.18" y="175.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (1 samples, 0.55%)</title><rect x="625.9" y="245" width="6.5" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="628.93" y="255.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(unsigned int, unsigned int, char const*, unsigned int) (1 samples, 0.55%)</title><rect x="917.7" y="197" width="6.5" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="920.69" y="207.5" ></text>
</g>
<g >
<title>Item_field::send(Protocol*, String*) (1 samples, 0.55%)</title><rect x="625.9" y="325" width="6.5" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="628.93" y="335.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (1 samples, 0.55%)</title><rect x="256.4" y="469" width="6.5" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="259.37" y="479.5" ></text>
</g>
<g >
<title>login_connection(THD*) (5 samples, 2.75%)</title><rect x="1131.6" y="469" width="32.5" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="1134.65" y="479.5" >lo..</text>
</g>
<g >
<title>open_table(THD*, Table_ref*, Open_table_context*) (8 samples, 4.40%)</title><rect x="904.7" y="341" width="51.9" height="15.0" fill="rgb(110,110,217)" rx="2" ry="2" />
<text  x="907.73" y="351.5" >open_..</text>
</g>
<g >
<title>TrxInInnoDB::TrxInInnoDB(trx_t*, bool) (2 samples, 1.10%)</title><rect x="982.5" y="309" width="13.0" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="985.53" y="319.5" ></text>
</g>
<g >
<title>acl_authenticate(THD*, enum_server_command) (5 samples, 2.75%)</title><rect x="1131.6" y="437" width="32.5" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="1134.65" y="447.5" >ac..</text>
</g>
<g >
<title>connection (179 samples, 98.35%)</title><rect x="10.0" y="549" width="1160.5" height="15.0" fill="rgb(120,120,226)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >connection</text>
</g>
<g >
<title>PT_start_option_value_list_no_type::contextualize(Parse_context*) (1 samples, 0.55%)</title><rect x="1066.8" y="373" width="6.5" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="1069.81" y="383.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.55%)</title><rect x="736.2" y="69" width="6.4" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="739.15" y="79.5" ></text>
</g>
<g >
<title>skb_try_coalesce (1 samples, 0.55%)</title><rect x="1138.1" y="69" width="6.5" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="1141.13" y="79.5" ></text>
</g>
<g >
<title>Session_sysvars_tracker::mark_as_changed(THD*, MYSQL_LEX_CSTRING) (1 samples, 0.55%)</title><rect x="1014.9" y="389" width="6.5" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="1017.95" y="399.5" ></text>
</g>
<g >
<title>rec_init_offsets_new(unsigned char const*, dict_index_t const*, unsigned long*) (1 samples, 0.55%)</title><rect x="723.2" y="85" width="6.5" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="726.19" y="95.5" ></text>
</g>
<g >
<title>_db_return_(unsigned int, _db_stack_frame_*) (1 samples, 0.55%)</title><rect x="878.8" y="293" width="6.5" height="15.0" fill="rgb(131,131,237)" rx="2" ry="2" />
<text  x="881.79" y="303.5" ></text>
</g>
<g >
<title>ha_innobase::external_lock(THD*, int) (1 samples, 0.55%)</title><rect x="963.1" y="341" width="6.5" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="966.08" y="351.5" ></text>
</g>
<g >
<title>rec_init_offsets_comp_ordinary(unsigned char const*, bool, dict_index_t const*, unsigned long*) (1 samples, 0.55%)</title><rect x="723.2" y="69" width="6.5" height="15.0" fill="rgb(88,88,198)" rx="2" ry="2" />
<text  x="726.19" y="79.5" ></text>
</g>
<g >
<title>refill_obj_stock (1 samples, 0.55%)</title><rect x="327.7" y="389" width="6.5" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="330.69" y="399.5" ></text>
</g>
<g >
<title>net_send_ok(THD*, unsigned int, unsigned int, unsigned long long, unsigned long long, char const*, bool) (2 samples, 1.10%)</title><rect x="554.6" y="421" width="13.0" height="15.0" fill="rgb(100,100,209)" rx="2" ry="2" />
<text  x="557.62" y="431.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::exit() (1 samples, 0.55%)</title><rect x="924.2" y="149" width="6.5" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="927.18" y="159.5" ></text>
</g>
<g >
<title>Session_consistency_gtids_ctx::notify_after_response_packet(THD const*) (1 samples, 0.55%)</title><rect x="522.2" y="453" width="6.5" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="525.20" y="463.5" ></text>
</g>
<g >
<title>IteratorContainer&lt;IntrusiveListIterator&lt;Table_ref, &amp;Table_ref::next_global&gt; &gt;::begin() (1 samples, 0.55%)</title><rect x="859.3" y="357" width="6.5" height="15.0" fill="rgb(136,136,242)" rx="2" ry="2" />
<text  x="862.34" y="367.5" ></text>
</g>
<g >
<title>rec_get_offsets(unsigned char const*, dict_index_t const*, unsigned long*, unsigned long, ut::Location, mem_block_info_t**) (1 samples, 0.55%)</title><rect x="723.2" y="117" width="6.5" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="726.19" y="127.5" ></text>
</g>
<g >
<title>my_openssl_malloc(unsigned long, char const*, int) (3 samples, 1.65%)</title><rect x="23.0" y="501" width="19.4" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="25.97" y="511.5" ></text>
</g>
<g >
<title>JOIN::estimate_rowcount() (2 samples, 1.10%)</title><rect x="651.9" y="325" width="12.9" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="654.87" y="335.5" ></text>
</g>
<g >
<title>napi_complete_done (1 samples, 0.55%)</title><rect x="256.4" y="389" width="6.5" height="15.0" fill="rgb(123,123,230)" rx="2" ry="2" />
<text  x="259.37" y="399.5" ></text>
</g>
<g >
<title>Sql_cmd_dml::execute(THD*) (54 samples, 29.67%)</title><rect x="619.5" y="421" width="350.1" height="15.0" fill="rgb(94,94,202)" rx="2" ry="2" />
<text  x="622.45" y="431.5" >Sql_cmd_dml::execute(THD*)</text>
</g>
<g >
<title>add_key_fields(THD*, JOIN*, Key_field**, unsigned int*, Item*, unsigned long, SARGABLE_PARAM**) (1 samples, 0.55%)</title><rect x="807.5" y="309" width="6.5" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="810.47" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Session_sysvars_tracker::sysvar_node_st**, std::vector&lt;Session_sysvars_tracker::sysvar_node_st*, std::allocator&lt;Session_sysvars_tracker::sysvar_node_st*&gt; &gt; &gt;::difference_type __gnu_cxx::operator-&lt;Session_sysvars_tracker::sysvar_node_st**, std::vector&lt;Session_sysvars_tracker::sysvar_node_st*, std::allocator&lt;Session_sysvars_tracker::sysvar_node_st*&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Session_sysvars_tracker::sysvar_node_st**, std::vector&lt;Session_sysvars_tracker::sysvar_node_st*, std::allocator&lt;Session_sysvars_tracker::sysvar_node_st*&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Session_sysvars_tracker::sysvar_node_st**, std::vector&lt;Session_sysvars_tracker::sysvar_node_st*, std::allocator&lt;Session_sysvars_tracker::sysvar_node_st*&gt; &gt; &gt; const&amp;) (1 samples, 0.55%)</title><rect x="561.1" y="341" width="6.5" height="15.0" fill="rgb(110,110,217)" rx="2" ry="2" />
<text  x="564.10" y="351.5" ></text>
</g>
<g >
<title>pfs_memory_alloc_vc(unsigned int, unsigned long, PSI_thread**) (2 samples, 1.10%)</title><rect x="29.5" y="453" width="12.9" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="32.45" y="463.5" ></text>
</g>
<g >
<title>ha_innobase::update_thd(THD*) (1 samples, 0.55%)</title><rect x="943.6" y="277" width="6.5" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="946.63" y="287.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.55%)</title><rect x="483.3" y="197" width="6.5" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="486.30" y="207.5" ></text>
</g>
<g >
<title>Session_sysvars_tracker::vars_list::parse_var_list(THD*, MYSQL_LEX_STRING, bool, CHARSET_INFO const*, bool) (1 samples, 0.55%)</title><rect x="1118.7" y="373" width="6.5" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="1121.68" y="383.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::pfs_end(PSI_mutex_locker*, int) (1 samples, 0.55%)</title><rect x="1170.5" y="229" width="6.5" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="1173.55" y="239.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (1 samples, 0.55%)</title><rect x="1138.1" y="133" width="6.5" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="1141.13" y="143.5" ></text>
</g>
<g >
<title>vio_read(Vio*, unsigned char*, unsigned long) (1 samples, 0.55%)</title><rect x="1131.6" y="277" width="6.5" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="1134.65" y="287.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;collation_unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt;*, std::default_delete&lt;collation_unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt; &gt; &gt; &gt;::type const&amp; std::get&lt;0ul, collation_unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt;*, std::default_delete&lt;collation_unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt; &gt; &gt;(std::tuple&lt;collation_unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt;*, std::default_delete&lt;collation_unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.55%)</title><rect x="1086.3" y="325" width="6.4" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="1089.26" y="335.5" ></text>
</g>
<g >
<title>TrxInInnoDB::~TrxInInnoDB() (1 samples, 0.55%)</title><rect x="898.2" y="277" width="6.5" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="901.24" y="287.5" ></text>
</g>
<g >
<title>rcu_core (1 samples, 0.55%)</title><rect x="684.3" y="117" width="6.5" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="687.29" y="127.5" ></text>
</g>
<g >
<title>AutoDebugTrace::AutoDebugTrace(char const*, char const*, int) (1 samples, 0.55%)</title><rect x="833.4" y="293" width="6.5" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="836.41" y="303.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (1 samples, 0.55%)</title><rect x="327.7" y="485" width="6.5" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="330.69" y="495.5" ></text>
</g>
<g >
<title>void dd::cache::Dictionary_client::acquire_uncommitted&lt;dd::Primary_id_key, dd::Schema&gt;(dd::Primary_id_key const&amp;, dd::Schema**, bool*) (1 samples, 0.55%)</title><rect x="1151.1" y="373" width="6.5" height="15.0" fill="rgb(109,109,216)" rx="2" ry="2" />
<text  x="1154.10" y="383.5" ></text>
</g>
<g >
<title>_db_return_(unsigned int, _db_stack_frame_*) (1 samples, 0.55%)</title><rect x="528.7" y="405" width="6.5" height="15.0" fill="rgb(131,131,237)" rx="2" ry="2" />
<text  x="531.68" y="415.5" ></text>
</g>
<g >
<title>row_search_mvcc(unsigned char*, page_cur_mode_t, row_prebuilt_t*, unsigned long, unsigned long) (12 samples, 6.59%)</title><rect x="697.3" y="229" width="77.8" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="700.25" y="239.5" >row_sear..</text>
</g>
<g >
<title>std::thread::id::id(unsigned long) (1 samples, 0.55%)</title><rect x="898.2" y="149" width="6.5" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="901.24" y="159.5" ></text>
</g>
<g >
<title>ha_innobase::extra(ha_extra_function) (3 samples, 1.65%)</title><rect x="976.0" y="357" width="19.5" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="979.04" y="367.5" ></text>
</g>
<g >
<title>[unknown] (6 samples, 3.30%)</title><rect x="68.4" y="517" width="38.9" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="71.35" y="527.5" >[un..</text>
</g>
<g >
<title>native_rw_unlock(pthread_rwlock_t*) (1 samples, 0.55%)</title><rect x="690.8" y="181" width="6.5" height="15.0" fill="rgb(87,87,197)" rx="2" ry="2" />
<text  x="693.77" y="191.5" ></text>
</g>
<g >
<title>start_thread (114 samples, 62.64%)</title><rect x="424.9" y="533" width="739.2" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="427.95" y="543.5" >start_thread</text>
</g>
<g >
<title>[unknown] (1 samples, 0.55%)</title><rect x="1170.5" y="533" width="6.5" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="1173.55" y="543.5" ></text>
</g>
<g >
<title>rw_lock_own(rw_lock_t const*, unsigned long) (1 samples, 0.55%)</title><rect x="924.2" y="181" width="6.5" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="927.18" y="191.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (3 samples, 1.65%)</title><rect x="476.8" y="229" width="19.5" height="15.0" fill="rgb(109,109,216)" rx="2" ry="2" />
<text  x="479.81" y="239.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (1 samples, 0.55%)</title><rect x="256.4" y="325" width="6.5" height="15.0" fill="rgb(112,112,220)" rx="2" ry="2" />
<text  x="259.37" y="335.5" ></text>
</g>
<g >
<title>Query_result_send::send_data(THD*, mem_root_deque&lt;Item*&gt; const&amp;) (2 samples, 1.10%)</title><rect x="619.5" y="357" width="12.9" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="622.45" y="367.5" ></text>
</g>
<g >
<title>std::atomic&lt;std::thread::id&gt;::compare_exchange_strong(std::thread::id&amp;, std::thread::id, std::memory_order) (1 samples, 0.55%)</title><rect x="917.7" y="149" width="6.5" height="15.0" fill="rgb(89,89,199)" rx="2" ry="2" />
<text  x="920.69" y="159.5" ></text>
</g>
<g >
<title>sock_sendmsg (1 samples, 0.55%)</title><rect x="1138.1" y="197" width="6.5" height="15.0" fill="rgb(135,135,241)" rx="2" ry="2" />
<text  x="1141.13" y="207.5" ></text>
</g>
<g >
<title>std::this_thread::get_id() (1 samples, 0.55%)</title><rect x="956.6" y="229" width="6.5" height="15.0" fill="rgb(85,85,195)" rx="2" ry="2" />
<text  x="959.59" y="239.5" ></text>
</g>
<g >
<title>inline_mysql_digest_end(PSI_digest_locker*, sql_digest_storage const*) (1 samples, 0.55%)</title><rect x="1073.3" y="421" width="6.5" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="1076.30" y="431.5" ></text>
</g>
<g >
<title>LEX::make_sql_cmd(Parse_tree_root*) (2 samples, 1.10%)</title><rect x="1027.9" y="405" width="13.0" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="1030.91" y="415.5" ></text>
</g>
<g >
<title>PROFILING::status_change(char const*, char const*, char const*, unsigned int) (1 samples, 0.55%)</title><rect x="528.7" y="437" width="6.5" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="531.68" y="447.5" ></text>
</g>
<g >
<title>Channel_info::create_thd() (1 samples, 0.55%)</title><rect x="1118.7" y="453" width="6.5" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="1121.68" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Malloc_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::~_Hashtable() (1 samples, 0.55%)</title><rect x="891.8" y="293" width="6.4" height="15.0" fill="rgb(107,107,214)" rx="2" ry="2" />
<text  x="894.76" y="303.5" ></text>
</g>
<g >
<title>unlock_stack(CODE_STATE*) (1 samples, 0.55%)</title><rect x="690.8" y="197" width="6.5" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="693.77" y="207.5" ></text>
</g>
<g >
<title>btr_pcur_t::open_no_init(dict_index_t*, dtuple_t const*, page_cur_mode_t, unsigned long, unsigned long, mtr_t*, ut::Location) (2 samples, 1.10%)</title><rect x="697.3" y="213" width="12.9" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="700.25" y="223.5" ></text>
</g>
<g >
<title>mysql_audit_acquire_plugins(THD*, mysql_event_class_t, unsigned long, bool) (1 samples, 0.55%)</title><rect x="593.5" y="405" width="6.5" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="596.52" y="415.5" ></text>
</g>
<g >
<title>rebalance_domains (1 samples, 0.55%)</title><rect x="35.9" y="357" width="6.5" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="38.93" y="367.5" ></text>
</g>
<g >
<title>mem_root_deque&lt;Table_ref*&gt;::Iterator&lt;Table_ref*&gt;::operator++() (1 samples, 0.55%)</title><rect x="865.8" y="341" width="6.5" height="15.0" fill="rgb(130,130,235)" rx="2" ry="2" />
<text  x="868.82" y="351.5" ></text>
</g>
<g >
<title>insert_events_statements_history(PFS_thread*, PFS_events_statements*) (1 samples, 0.55%)</title><rect x="1092.7" y="437" width="6.5" height="15.0" fill="rgb(114,114,222)" rx="2" ry="2" />
<text  x="1095.75" y="447.5" ></text>
</g>
<g >
<title>ha_innobase::extra(ha_extra_function) (5 samples, 2.75%)</title><rect x="911.2" y="293" width="32.4" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="914.21" y="303.5" >ha..</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.55%)</title><rect x="684.3" y="85" width="6.5" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="687.29" y="95.5" ></text>
</g>
<g >
<title>THD::cleanup_after_query() (2 samples, 1.10%)</title><rect x="580.5" y="437" width="13.0" height="15.0" fill="rgb(110,110,217)" rx="2" ry="2" />
<text  x="583.55" y="447.5" ></text>
</g>
<g >
<title>mysql_execute_command(THD*, bool) (66 samples, 36.26%)</title><rect x="600.0" y="437" width="427.9" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="603.00" y="447.5" >mysql_execute_command(THD*, bool)</text>
</g>
<g >
<title>handler::ha_extra(ha_extra_function) (1 samples, 0.55%)</title><rect x="943.6" y="325" width="6.5" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="946.63" y="335.5" ></text>
</g>
<g >
<title>MDL_context::mdl_savepoint() (1 samples, 0.55%)</title><rect x="885.3" y="373" width="6.5" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="888.27" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Malloc_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) (1 samples, 0.55%)</title><rect x="891.8" y="261" width="6.4" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="894.76" y="271.5" ></text>
</g>
<g >
<title>Query_term::owning_operand() (1 samples, 0.55%)</title><rect x="574.1" y="421" width="6.4" height="15.0" fill="rgb(84,84,193)" rx="2" ry="2" />
<text  x="577.07" y="431.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt;, Collation_hasher, Collation_key_equal, Malloc_allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt; &gt; &gt;::find(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) const (1 samples, 0.55%)</title><rect x="1014.9" y="325" width="6.5" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="1017.95" y="335.5" ></text>
</g>
<g >
<title>pfs_memory_alloc_vc(unsigned int, unsigned long, PSI_thread**) (1 samples, 0.55%)</title><rect x="16.5" y="453" width="6.5" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="19.48" y="463.5" ></text>
</g>
<g >
<title>btr_cur_search_to_nth_level(dict_index_t*, unsigned long, dtuple_t const*, page_cur_mode_t, unsigned long, btr_cur_t*, unsigned long, char const*, unsigned long, mtr_t*) (1 samples, 0.55%)</title><rect x="703.7" y="197" width="6.5" height="15.0" fill="rgb(123,123,230)" rx="2" ry="2" />
<text  x="706.74" y="207.5" ></text>
</g>
<g >
<title>THD::inc_sent_row_count(unsigned long long) (1 samples, 0.55%)</title><rect x="619.5" y="341" width="6.4" height="15.0" fill="rgb(95,95,204)" rx="2" ry="2" />
<text  x="622.45" y="351.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt; &gt;::~_State_impl() (1 samples, 0.55%)</title><rect x="1170.5" y="517" width="6.5" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="1173.55" y="527.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt;, Collation_hasher, Collation_key_equal, Malloc_allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt; &gt; &gt;::find(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) const (1 samples, 0.55%)</title><rect x="1079.8" y="357" width="6.5" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="1082.78" y="367.5" ></text>
</g>
<g >
<title>inline_mysql_set_statement_rows_sent(PSI_statement_locker*, unsigned long long) (1 samples, 0.55%)</title><rect x="619.5" y="325" width="6.4" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="622.45" y="335.5" ></text>
</g>
<g >
<title>my_lsearch(std::atomic&lt;LF_SLIST*&gt;*, int (*)(unsigned char const*, unsigned long, unsigned char const*, unsigned long), CHARSET_INFO*, unsigned int, unsigned char const*, unsigned int, LF_PINS*) (1 samples, 0.55%)</title><rect x="1105.7" y="389" width="6.5" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="1108.71" y="399.5" ></text>
</g>
<g >
<title>std::atomic&lt;PFS_memory_class*&gt;::operator PFS_memory_class*() const (1 samples, 0.55%)</title><rect x="35.9" y="437" width="6.5" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="38.93" y="447.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::try_lock() (1 samples, 0.55%)</title><rect x="982.5" y="229" width="6.5" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="985.53" y="239.5" ></text>
</g>
<g >
<title>dict_index_is_ibuf(dict_index_t const*) (1 samples, 0.55%)</title><rect x="729.7" y="101" width="6.5" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="732.67" y="111.5" ></text>
</g>
<g >
<title>check_table_access(THD*, unsigned long, Table_ref*, bool, unsigned int, bool) (1 samples, 0.55%)</title><rect x="969.6" y="421" width="6.4" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="972.56" y="431.5" ></text>
</g>
<g >
<title>mysql_lock_tables(THD*, TABLE**, unsigned long, unsigned int) (2 samples, 1.10%)</title><rect x="956.6" y="389" width="13.0" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="959.59" y="399.5" ></text>
</g>
<g >
<title>__futex_queue (1 samples, 0.55%)</title><rect x="1177.0" y="421" width="6.5" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="1180.03" y="431.5" ></text>
</g>
<g >
<title>lock_tables(THD*, Table_ref*, unsigned int, unsigned int) (2 samples, 1.10%)</title><rect x="956.6" y="405" width="13.0" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="959.59" y="415.5" ></text>
</g>
<g >
<title>statement_id_to_session(THD*) (2 samples, 1.10%)</title><rect x="1079.8" y="437" width="12.9" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="1082.78" y="447.5" ></text>
</g>
<g >
<title>ip_protocol_deliver_rcu (3 samples, 1.65%)</title><rect x="120.2" y="149" width="19.5" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="123.22" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;Table_ref*, std::allocator&lt;Table_ref*&gt; &gt;::empty() const (1 samples, 0.55%)</title><rect x="969.6" y="389" width="6.4" height="15.0" fill="rgb(109,109,216)" rx="2" ry="2" />
<text  x="972.56" y="399.5" ></text>
</g>
<g >
<title>__tcp_push_pending_frames (3 samples, 1.65%)</title><rect x="120.2" y="357" width="19.5" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="123.22" y="367.5" ></text>
</g>
<g >
<title>pfs_memory_free_vc(unsigned int, unsigned long, PSI_thread*) (1 samples, 0.55%)</title><rect x="269.3" y="453" width="6.5" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="272.34" y="463.5" ></text>
</g>
<g >
<title>MDL_context::try_acquire_lock_impl(MDL_request*, MDL_ticket**) (1 samples, 0.55%)</title><rect x="950.1" y="293" width="6.5" height="15.0" fill="rgb(88,88,198)" rx="2" ry="2" />
<text  x="953.11" y="303.5" ></text>
</g>
<g >
<title>Protocol_classic::get_command(COM_DATA*, enum_server_command*) (7 samples, 3.85%)</title><rect x="463.8" y="469" width="45.4" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="466.85" y="479.5" >Prot..</text>
</g>
<g >
<title>trx_mutex_own(trx_t const*) (1 samples, 0.55%)</title><rect x="943.6" y="229" width="6.5" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="946.63" y="239.5" ></text>
</g>
<g >
<title>Item_func::fix_fields(THD*, Item**) (1 samples, 0.55%)</title><rect x="872.3" y="341" width="6.5" height="15.0" fill="rgb(137,137,243)" rx="2" ry="2" />
<text  x="875.31" y="351.5" ></text>
</g>
<g >
<title>handler::ha_reset() (3 samples, 1.65%)</title><rect x="976.0" y="373" width="19.5" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="979.04" y="383.5" ></text>
</g>
<g >
<title>HMAC_Init_ex (1 samples, 0.55%)</title><rect x="48.9" y="517" width="6.5" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="51.90" y="527.5" ></text>
</g>
<g >
<title>Item_equal::compare_const(THD*, Item*) (2 samples, 1.10%)</title><rect x="775.1" y="245" width="12.9" height="15.0" fill="rgb(81,81,191)" rx="2" ry="2" />
<text  x="778.05" y="255.5" ></text>
</g>
<g >
<title>PFS_thread::carry_memory_stat_alloc_delta(PFS_memory_stat_alloc_delta*, unsigned int) (1 samples, 0.55%)</title><rect x="29.5" y="437" width="6.4" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="32.45" y="447.5" ></text>
</g>
<g >
<title>Sql_cmd_dml::execute_inner(THD*) (37 samples, 20.33%)</title><rect x="619.5" y="405" width="239.8" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="622.45" y="415.5" >Sql_cmd_dml::execute_inner(THD*)</text>
</g>
<g >
<title>tcp_v4_rcv (3 samples, 1.65%)</title><rect x="120.2" y="133" width="19.5" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="123.22" y="143.5" ></text>
</g>
<g >
<title>asm_common_interrupt (1 samples, 0.55%)</title><rect x="256.4" y="501" width="6.5" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="259.37" y="511.5" ></text>
</g>
<g >
<title>handler::ha_index_init(unsigned int, bool) (1 samples, 0.55%)</title><rect x="684.3" y="277" width="6.5" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="687.29" y="287.5" ></text>
</g>
<g >
<title>THD::THD(bool) (1 samples, 0.55%)</title><rect x="1118.7" y="437" width="6.5" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="1121.68" y="447.5" ></text>
</g>
<g >
<title>ha_innobase::extra(ha_extra_function) (1 samples, 0.55%)</title><rect x="904.7" y="293" width="6.5" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="907.73" y="303.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.55%)</title><rect x="256.4" y="453" width="6.5" height="15.0" fill="rgb(123,123,229)" rx="2" ry="2" />
<text  x="259.37" y="463.5" ></text>
</g>
<g >
<title>rcu_core (1 samples, 0.55%)</title><rect x="327.7" y="453" width="6.5" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="330.69" y="463.5" ></text>
</g>
<g >
<title>schedule (2 samples, 1.10%)</title><rect x="483.3" y="213" width="13.0" height="15.0" fill="rgb(87,87,197)" rx="2" ry="2" />
<text  x="486.30" y="223.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::is_owned() const (1 samples, 0.55%)</title><rect x="943.6" y="197" width="6.5" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="946.63" y="207.5" ></text>
</g>
<g >
<title>ip_finish_output2 (3 samples, 1.65%)</title><rect x="120.2" y="293" width="19.5" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="123.22" y="303.5" ></text>
</g>
<g >
<title>init_new_thd(Channel_info*) (1 samples, 0.55%)</title><rect x="1118.7" y="485" width="6.5" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="1121.68" y="495.5" ></text>
</g>
<g >
<title>Session_sysvars_tracker::vars_list::insert(Session_sysvars_tracker::sysvar_node_st*, MYSQL_LEX_CSTRING const&amp;) (1 samples, 0.55%)</title><rect x="1118.7" y="357" width="6.5" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="1121.68" y="367.5" ></text>
</g>
<g >
<title>JOIN::init_planner_arrays() (2 samples, 1.10%)</title><rect x="788.0" y="325" width="13.0" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="791.02" y="335.5" ></text>
</g>
<g >
<title>net_write_raw_loop(NET*, unsigned char const*, unsigned long) (1 samples, 0.55%)</title><rect x="548.1" y="373" width="6.5" height="15.0" fill="rgb(109,109,216)" rx="2" ry="2" />
<text  x="551.13" y="383.5" ></text>
</g>
<g >
<title>open_and_process_table(THD*, LEX*, Table_ref*, unsigned int*, Prelocking_strategy*, bool, Open_table_context*) (9 samples, 4.95%)</title><rect x="898.2" y="357" width="58.4" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="901.24" y="367.5" >open_a..</text>
</g>
<g >
<title>net_flush(NET*) (1 samples, 0.55%)</title><rect x="1138.1" y="341" width="6.5" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="1141.13" y="351.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::is_owned() const (1 samples, 0.55%)</title><rect x="956.6" y="261" width="6.5" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="959.59" y="271.5" ></text>
</g>
<g >
<title>handler::ha_extra(ha_extra_function) (5 samples, 2.75%)</title><rect x="911.2" y="309" width="32.4" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="914.21" y="319.5" >ha..</text>
</g>
<g >
<title>net_after_header_psi(NET*, void*, unsigned long, bool) (1 samples, 0.55%)</title><rect x="463.8" y="373" width="6.5" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="466.85" y="383.5" ></text>
</g>
<g >
<title>handle_connection (114 samples, 62.64%)</title><rect x="424.9" y="501" width="739.2" height="15.0" fill="rgb(97,97,206)" rx="2" ry="2" />
<text  x="427.95" y="511.5" >handle_connection</text>
</g>
<g >
<title>ha_innobase::info(unsigned int) (2 samples, 1.10%)</title><rect x="788.0" y="293" width="13.0" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="791.02" y="303.5" ></text>
</g>
<g >
<title>get_and_lock_tablespace_names(THD*, Table_ref*, Table_ref*, unsigned long, unsigned int) (1 samples, 0.55%)</title><rect x="891.8" y="341" width="6.4" height="15.0" fill="rgb(122,122,228)" rx="2" ry="2" />
<text  x="894.76" y="351.5" ></text>
</g>
<g >
<title>do_sys_poll (3 samples, 1.65%)</title><rect x="476.8" y="261" width="19.5" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="479.81" y="271.5" ></text>
</g>
<g >
<title>bn_sqrx8x_internal (3 samples, 1.65%)</title><rect x="353.6" y="533" width="19.5" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="356.63" y="543.5" ></text>
</g>
<g >
<title>bn_sqrx8x_internal (15 samples, 8.24%)</title><rect x="152.6" y="517" width="97.3" height="15.0" fill="rgb(84,84,194)" rx="2" ry="2" />
<text  x="155.64" y="527.5" >bn_sqrx8x_i..</text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1 samples, 0.55%)</title><rect x="327.7" y="501" width="6.5" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="330.69" y="511.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt;::operator()() (1 samples, 0.55%)</title><rect x="1170.5" y="453" width="6.5" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="1173.55" y="463.5" ></text>
</g>
<g >
<title>net_read_raw_loop(NET*, unsigned long) (6 samples, 3.30%)</title><rect x="470.3" y="373" width="38.9" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="473.33" y="383.5" >net..</text>
</g>
<g >
<title>Protocol_classic::send_ok(unsigned int, unsigned int, unsigned long long, unsigned long long, char const*) (2 samples, 1.10%)</title><rect x="554.6" y="437" width="13.0" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="557.62" y="447.5" ></text>
</g>
<g >
<title>ha_commit_trans(THD*, bool, bool) (1 samples, 0.55%)</title><rect x="1021.4" y="405" width="6.5" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="1024.43" y="415.5" ></text>
</g>
<g >
<title>HKDF_Expand (1 samples, 0.55%)</title><rect x="42.4" y="517" width="6.5" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="45.42" y="527.5" ></text>
</g>
<g >
<title>THD::release_resources() (5 samples, 2.75%)</title><rect x="424.9" y="485" width="32.5" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="427.95" y="495.5" >TH..</text>
</g>
<g >
<title>read_lock_stack(CODE_STATE*) (1 samples, 0.55%)</title><rect x="528.7" y="389" width="6.5" height="15.0" fill="rgb(81,81,191)" rx="2" ry="2" />
<text  x="531.68" y="399.5" ></text>
</g>
<g >
<title>rw_lock_s_lock_func(rw_lock_t*, unsigned long, ut::Location) (2 samples, 1.10%)</title><rect x="755.6" y="197" width="13.0" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="758.60" y="207.5" ></text>
</g>
<g >
<title>void mutex_enter_inline&lt;PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt; &gt;(PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;*, ut::Location) (1 samples, 0.55%)</title><rect x="898.2" y="245" width="6.5" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="901.24" y="255.5" ></text>
</g>
<g >
<title>net_read_packet(NET*, unsigned long*) (1 samples, 0.55%)</title><rect x="1131.6" y="325" width="6.5" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="1134.65" y="335.5" ></text>
</g>
<g >
<title>PFS_memory_safe_stat::count_free(unsigned long, PFS_memory_stat_free_delta*) (1 samples, 0.55%)</title><rect x="314.7" y="437" width="6.5" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="317.73" y="447.5" ></text>
</g>
<g >
<title>JOIN::alloc_func_list() (1 samples, 0.55%)</title><rect x="638.9" y="341" width="6.5" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="641.90" y="351.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;dd::cache::Local_multi_map&lt;dd::Abstract_table&gt;, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Abstract_table&gt; &gt; &gt;::_M_ptr() const (1 samples, 0.55%)</title><rect x="437.9" y="293" width="6.5" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="440.91" y="303.5" ></text>
</g>
<g >
<title>close_thread_tables(THD*) (5 samples, 2.75%)</title><rect x="976.0" y="421" width="32.5" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="979.04" y="431.5" >cl..</text>
</g>
<g >
<title>new_sync_write (4 samples, 2.20%)</title><rect x="113.7" y="437" width="26.0" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="116.74" y="447.5" >n..</text>
</g>
<g >
<title>vio_socket_io_wait(Vio*, enum_vio_io_event) (1 samples, 0.55%)</title><rect x="1131.6" y="261" width="6.5" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="1134.65" y="271.5" ></text>
</g>
<g >
<title>kmem_cache_free (1 samples, 0.55%)</title><rect x="327.7" y="421" width="6.5" height="15.0" fill="rgb(86,86,196)" rx="2" ry="2" />
<text  x="330.69" y="431.5" ></text>
</g>
<g >
<title>void mutex_enter_inline&lt;PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt; &gt;(PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;*, ut::Location) (1 samples, 0.55%)</title><rect x="917.7" y="213" width="6.5" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="920.69" y="223.5" ></text>
</g>
<g >
<title>rec_init_null_and_len_comp(unsigned char const*, dict_index_t const*, unsigned char const**, unsigned char const**, unsigned short*, unsigned short&amp;, unsigned char&amp;) (1 samples, 0.55%)</title><rect x="723.2" y="53" width="6.5" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="726.19" y="63.5" ></text>
</g>
<g >
<title>rcu_do_batch (1 samples, 0.55%)</title><rect x="327.7" y="437" width="6.5" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="330.69" y="447.5" ></text>
</g>
<g >
<title>Arg_comparator::compare_int_signed() (1 samples, 0.55%)</title><rect x="781.5" y="213" width="6.5" height="15.0" fill="rgb(95,95,204)" rx="2" ry="2" />
<text  x="784.54" y="223.5" ></text>
</g>
<g >
<title>mysqld_main(int, char**) (1 samples, 0.55%)</title><rect x="1183.5" y="501" width="6.5" height="15.0" fill="rgb(84,84,193)" rx="2" ry="2" />
<text  x="1186.52" y="511.5" ></text>
</g>
<g >
<title>trans_commit_stmt(THD*, bool) (1 samples, 0.55%)</title><rect x="1021.4" y="421" width="6.5" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="1024.43" y="431.5" ></text>
</g>
<g >
<title>bool std::operator==&lt;std::unordered_multimap&lt;MDL_key const*, MDL_ticket_store::MDL_ticket_handle, MDL_ticket_store::Hash, MDL_ticket_store::Key_equal, std::allocator&lt;std::pair&lt;MDL_key const* const, MDL_ticket_store::MDL_ticket_handle&gt; &gt; &gt;, std::default_delete&lt;std::unordered_multimap&lt;MDL_key const*, MDL_ticket_store::MDL_ticket_handle, MDL_ticket_store::Hash, MDL_ticket_store::Key_equal, std::allocator&lt;std::pair&lt;MDL_key const* const, MDL_ticket_store::MDL_ticket_handle&gt; &gt; &gt; &gt; &gt;(std::unique_ptr&lt;std::unordered_multimap&lt;MDL_key const*, MDL_ticket_store::MDL_ticket_handle, MDL_ticket_store::Hash, MDL_ticket_store::Key_equal, std::allocator&lt;std::pair&lt;MDL_key const* const, MDL_ticket_store::MDL_ticket_handle&gt; &gt; &gt;, std::default_delete&lt;std::unordered_multimap&lt;MDL_key const*, MDL_ticket_store::MDL_ticket_handle, MDL_ticket_store::Hash, MDL_ticket_store::Key_equal, std::allocator&lt;std::pair&lt;MDL_key const* const, MDL_ticket_store::MDL_ticket_handle&gt; &gt; &gt; &gt; &gt; const&amp;, decltype(nullptr)) (1 samples, 0.55%)</title><rect x="950.1" y="245" width="6.5" height="15.0" fill="rgb(132,132,238)" rx="2" ry="2" />
<text  x="953.11" y="255.5" ></text>
</g>
<g >
<title>I_P_List&lt;MDL_ticket, I_P_List_adapter&lt;MDL_ticket, &amp;MDL_ticket::next_in_context, &amp;MDL_ticket::prev_in_context&gt;, I_P_List_null_counter, I_P_List_no_push_back&lt;MDL_ticket&gt; &gt;::front() (1 samples, 0.55%)</title><rect x="885.3" y="357" width="6.5" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="888.27" y="367.5" ></text>
</g>
<g >
<title>_db_enter_(char const*, int, char const*, unsigned int, _db_stack_frame_*) (1 samples, 0.55%)</title><rect x="716.7" y="149" width="6.5" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="719.70" y="159.5" ></text>
</g>
<g >
<title>__GI___pthread_rwlock_unlock (1 samples, 0.55%)</title><rect x="327.7" y="533" width="6.5" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="330.69" y="543.5" ></text>
</g>
<g >
<title>Item_bool_func2::~Item_bool_func2() (1 samples, 0.55%)</title><rect x="580.5" y="341" width="6.5" height="15.0" fill="rgb(88,88,197)" rx="2" ry="2" />
<text  x="583.55" y="351.5" ></text>
</g>
<g >
<title>uca_scanner_900&lt;Mb_wc_utf8mb4, 1&gt;::uca_scanner_900(Mb_wc_utf8mb4, CHARSET_INFO const*, unsigned char const*, unsigned long) (1 samples, 0.55%)</title><rect x="1014.9" y="229" width="6.5" height="15.0" fill="rgb(107,107,215)" rx="2" ry="2" />
<text  x="1017.95" y="239.5" ></text>
</g>
<g >
<title>void mutex_enter_inline&lt;PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt; &gt;(PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;*, ut::Location) (1 samples, 0.55%)</title><rect x="904.7" y="213" width="6.5" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="907.73" y="223.5" ></text>
</g>
<g >
<title>Item_func_eq::~Item_func_eq() (1 samples, 0.55%)</title><rect x="587.0" y="405" width="6.5" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="590.03" y="415.5" ></text>
</g>
<g >
<title>ssl_security_default_callback.lto_priv.0 (1 samples, 0.55%)</title><rect x="321.2" y="517" width="6.5" height="15.0" fill="rgb(111,111,219)" rx="2" ry="2" />
<text  x="324.21" y="527.5" ></text>
</g>
<g >
<title>bool dd::cache::Dictionary_client::acquire&lt;dd::Schema&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, Stateless_allocator&lt;char, dd::String_type_alloc, My_free_functor&gt; &gt; const&amp;, dd::Schema const**) (1 samples, 0.55%)</title><rect x="1151.1" y="405" width="6.5" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="1154.10" y="415.5" ></text>
</g>
<g >
<title>PT_set::contextualize(Parse_context*) (1 samples, 0.55%)</title><rect x="1066.8" y="389" width="6.5" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="1069.81" y="399.5" ></text>
</g>
<g >
<title>unlock_external(THD*, TABLE**, unsigned int) (2 samples, 1.10%)</title><rect x="833.4" y="309" width="13.0" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="836.41" y="319.5" ></text>
</g>
<g >
<title>AutoDebugTrace::AutoDebugTrace(char const*, char const*, int) (1 samples, 0.55%)</title><rect x="716.7" y="165" width="6.5" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="719.70" y="175.5" ></text>
</g>
<g >
<title>parse_sql(THD*, Parser_state*, Object_creation_ctx*) (8 samples, 4.40%)</title><rect x="1027.9" y="437" width="51.9" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="1030.91" y="447.5" >parse..</text>
</g>
<g >
<title>std::thread::id const* std::__addressof&lt;std::thread::id const&gt;(std::thread::id const&amp;) (1 samples, 0.55%)</title><rect x="943.6" y="165" width="6.5" height="15.0" fill="rgb(91,91,200)" rx="2" ry="2" />
<text  x="946.63" y="175.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (1 samples, 0.55%)</title><rect x="256.4" y="293" width="6.5" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="259.37" y="303.5" ></text>
</g>
<g >
<title>MDL_context::acquire_lock(MDL_request*, unsigned long) (1 samples, 0.55%)</title><rect x="950.1" y="309" width="6.5" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="953.11" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Malloc_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_deallocate_buckets() (1 samples, 0.55%)</title><rect x="891.8" y="277" width="6.4" height="15.0" fill="rgb(89,89,198)" rx="2" ry="2" />
<text  x="894.76" y="287.5" ></text>
</g>
<g >
<title>net_write_raw_loop(NET*, unsigned char const*, unsigned long) (1 samples, 0.55%)</title><rect x="1138.1" y="309" width="6.5" height="15.0" fill="rgb(109,109,216)" rx="2" ry="2" />
<text  x="1141.13" y="319.5" ></text>
</g>
<g >
<title>DoTrace(CODE_STATE*) (1 samples, 0.55%)</title><rect x="716.7" y="133" width="6.5" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="719.70" y="143.5" ></text>
</g>
<g >
<title>get_store_key(THD*, Item*, unsigned long, unsigned long, KEY_PART_INFO const*, unsigned char*, unsigned int) (1 samples, 0.55%)</title><rect x="671.3" y="277" width="6.5" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="674.32" y="287.5" ></text>
</g>
<g >
<title>ha_innobase::update_thd() (5 samples, 2.75%)</title><rect x="911.2" y="277" width="32.4" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="914.21" y="287.5" >ha..</text>
</g>
<g >
<title>handler::ha_index_read_map(unsigned char*, unsigned char const*, unsigned long, ha_rkey_function) (13 samples, 7.14%)</title><rect x="690.8" y="277" width="84.3" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="693.77" y="287.5" >handler::..</text>
</g>
<g >
<title>aggregate_thread(PFS_thread*, PFS_account*, PFS_user*, PFS_host*) (1 samples, 0.55%)</title><rect x="1125.2" y="469" width="6.4" height="15.0" fill="rgb(110,110,218)" rx="2" ry="2" />
<text  x="1128.16" y="479.5" ></text>
</g>
<g >
<title>do_command(THD*) (102 samples, 56.04%)</title><rect x="457.4" y="485" width="661.3" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="460.36" y="495.5" >do_command(THD*)</text>
</g>
<g >
<title>tcp_rcv_established (1 samples, 0.55%)</title><rect x="1138.1" y="117" width="6.5" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="1141.13" y="127.5" ></text>
</g>
<g >
<title>innobase_trx_init(THD*, trx_t*) (1 samples, 0.55%)</title><rect x="937.1" y="245" width="6.5" height="15.0" fill="rgb(85,85,194)" rx="2" ry="2" />
<text  x="940.14" y="255.5" ></text>
</g>
<g >
<title>handler::ha_extra(ha_extra_function) (1 samples, 0.55%)</title><rect x="904.7" y="309" width="6.5" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="907.73" y="319.5" ></text>
</g>
<g >
<title>Protocol_classic::read_packet() (7 samples, 3.85%)</title><rect x="463.8" y="453" width="45.4" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="466.85" y="463.5" >Prot..</text>
</g>
<g >
<title>virtnet_poll (1 samples, 0.55%)</title><rect x="256.4" y="405" width="6.5" height="15.0" fill="rgb(112,112,219)" rx="2" ry="2" />
<text  x="259.37" y="415.5" ></text>
</g>
<g >
<title>__write (4 samples, 2.20%)</title><rect x="113.7" y="517" width="26.0" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="116.74" y="527.5" >_..</text>
</g>
<g >
<title>net_write_packet(NET*, unsigned char const*, unsigned long) (1 samples, 0.55%)</title><rect x="1138.1" y="325" width="6.5" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="1141.13" y="335.5" ></text>
</g>
<g >
<title>dyn_buf_t&lt;512ul&gt;::dyn_buf_t() (1 samples, 0.55%)</title><rect x="710.2" y="181" width="6.5" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="713.22" y="191.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::exit() (1 samples, 0.55%)</title><rect x="924.2" y="133" width="6.5" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="927.18" y="143.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (1 samples, 0.55%)</title><rect x="684.3" y="149" width="6.5" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="687.29" y="159.5" ></text>
</g>
<g >
<title>Field::new_key_field(MEM_ROOT*, TABLE*, unsigned char*, unsigned char*, unsigned int) const (1 samples, 0.55%)</title><rect x="671.3" y="229" width="6.5" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="674.32" y="239.5" ></text>
</g>
<g >
<title>get_lock_data(THD*, TABLE**, unsigned long, unsigned int) (1 samples, 0.55%)</title><rect x="956.6" y="373" width="6.5" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="959.59" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Table_ref* const*, std::vector&lt;Table_ref*, std::allocator&lt;Table_ref*&gt; &gt; &gt;::__normal_iterator(Table_ref* const* const&amp;) (1 samples, 0.55%)</title><rect x="969.6" y="373" width="6.4" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="972.56" y="383.5" ></text>
</g>
<g >
<title>my_hash_sort_uca_900 (1 samples, 0.55%)</title><rect x="1079.8" y="293" width="6.5" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="1082.78" y="303.5" ></text>
</g>
<g >
<title>Session_sysvars_tracker::vars_list::search(Session_sysvars_tracker::sysvar_node_st*, MYSQL_LEX_CSTRING const&amp;) (1 samples, 0.55%)</title><rect x="1014.9" y="373" width="6.5" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="1017.95" y="383.5" ></text>
</g>
<g >
<title>Sql_cmd_select::precheck(THD*) (1 samples, 0.55%)</title><rect x="859.3" y="389" width="6.5" height="15.0" fill="rgb(134,134,240)" rx="2" ry="2" />
<text  x="862.34" y="399.5" ></text>
</g>
<g >
<title>pfs_delete_current_thread_vc() (1 samples, 0.55%)</title><rect x="1125.2" y="485" width="6.4" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="1128.16" y="495.5" ></text>
</g>
<g >
<title>dd::cache::Dictionary_client::Auto_releaser::Auto_releaser(dd::cache::Dictionary_client*) (1 samples, 0.55%)</title><rect x="1157.6" y="405" width="6.5" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="1160.58" y="415.5" ></text>
</g>
<g >
<title>evp_cipher_init_internal (1 samples, 0.55%)</title><rect x="262.9" y="517" width="6.4" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="265.86" y="527.5" ></text>
</g>
<g >
<title>__rcu_read_lock (1 samples, 0.55%)</title><rect x="35.9" y="325" width="6.5" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="38.93" y="335.5" ></text>
</g>
<g >
<title>std::operator|(std::memory_order, std::__memory_order_modifier) (1 samples, 0.55%)</title><rect x="982.5" y="181" width="6.5" height="15.0" fill="rgb(96,96,204)" rx="2" ry="2" />
<text  x="985.53" y="191.5" ></text>
</g>
<g >
<title>btr_search_guess_on_hash(dtuple_t const*, unsigned long, unsigned long, btr_cur_t*, unsigned long, mtr_t*) (1 samples, 0.55%)</title><rect x="703.7" y="181" width="6.5" height="15.0" fill="rgb(93,93,201)" rx="2" ry="2" />
<text  x="706.74" y="191.5" ></text>
</g>
<g >
<title>namemap_name2num_n.lto_priv.0 (1 samples, 0.55%)</title><rect x="269.3" y="517" width="6.5" height="15.0" fill="rgb(83,83,192)" rx="2" ry="2" />
<text  x="272.34" y="527.5" ></text>
</g>
<g >
<title>ha_innobase::external_lock(THD*, int) (1 samples, 0.55%)</title><rect x="839.9" y="277" width="6.5" height="15.0" fill="rgb(133,133,239)" rx="2" ry="2" />
<text  x="842.89" y="287.5" ></text>
</g>
<g >
<title>do_poll.constprop.0 (1 samples, 0.55%)</title><rect x="1183.5" y="373" width="6.5" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="1186.52" y="383.5" ></text>
</g>
<g >
<title>dispatch_sql_command(THD*, Parser_state*) (80 samples, 43.96%)</title><rect x="574.1" y="453" width="518.6" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="577.07" y="463.5" >dispatch_sql_command(THD*, Parser_state*)</text>
</g>
<g >
<title>[unknown] (1 samples, 0.55%)</title><rect x="81.3" y="501" width="6.5" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="84.32" y="511.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core.constprop.0 (1 samples, 0.55%)</title><rect x="256.4" y="341" width="6.5" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="259.37" y="351.5" ></text>
</g>
<g >
<title>Session_sysvars_tracker::enable(THD*) (1 samples, 0.55%)</title><rect x="1118.7" y="389" width="6.5" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="1121.68" y="399.5" ></text>
</g>
<g >
<title>GenericPolicy&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::locked(TTASEventMutex&lt;GenericPolicy&gt; const&amp;, char const*, unsigned long) (1 samples, 0.55%)</title><rect x="963.1" y="245" width="6.5" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="966.08" y="255.5" ></text>
</g>
<g >
<title>AutoDebugTrace::AutoDebugTrace(char const*, char const*, int) (1 samples, 0.55%)</title><rect x="613.0" y="405" width="6.5" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="615.97" y="415.5" ></text>
</g>
<g >
<title>__x64_sys_ppoll (4 samples, 2.20%)</title><rect x="476.8" y="277" width="25.9" height="15.0" fill="rgb(108,108,215)" rx="2" ry="2" />
<text  x="479.81" y="287.5" >_..</text>
</g>
<g >
<title>process_backlog (3 samples, 1.65%)</title><rect x="120.2" y="197" width="19.5" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="123.22" y="207.5" ></text>
</g>
<g >
<title>mysql_ull_cleanup(THD*) (1 samples, 0.55%)</title><rect x="431.4" y="453" width="6.5" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="434.43" y="463.5" ></text>
</g>
<g >
<title>AutoDebugTrace::AutoDebugTrace(char const*, char const*, int) (1 samples, 0.55%)</title><rect x="632.4" y="309" width="6.5" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="635.42" y="319.5" ></text>
</g>
<g >
<title>__rcu_read_lock (1 samples, 0.55%)</title><rect x="35.9" y="341" width="6.5" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="38.93" y="351.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (3 samples, 1.65%)</title><rect x="120.2" y="245" width="19.5" height="15.0" fill="rgb(123,123,229)" rx="2" ry="2" />
<text  x="123.22" y="255.5" ></text>
</g>
<g >
<title>Query_block::apply_local_transforms(THD*, bool) (1 samples, 0.55%)</title><rect x="865.8" y="357" width="6.5" height="15.0" fill="rgb(123,123,229)" rx="2" ry="2" />
<text  x="868.82" y="367.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (1 samples, 0.55%)</title><rect x="256.4" y="277" width="6.5" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="259.37" y="287.5" ></text>
</g>
<g >
<title>safe_mutex_lock(safe_mutex_t*, bool, char const*, unsigned int) (1 samples, 0.55%)</title><rect x="567.6" y="405" width="6.5" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="570.58" y="415.5" ></text>
</g>
<g >
<title>TrxInInnoDB::exit(trx_t*) (1 samples, 0.55%)</title><rect x="963.1" y="293" width="6.5" height="15.0" fill="rgb(108,108,215)" rx="2" ry="2" />
<text  x="966.08" y="303.5" ></text>
</g>
<g >
<title>syscall_trace_enter.constprop.0 (1 samples, 0.55%)</title><rect x="107.3" y="453" width="6.4" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="110.25" y="463.5" ></text>
</g>
<g >
<title>AutoDebugTrace::~AutoDebugTrace() (1 samples, 0.55%)</title><rect x="878.8" y="309" width="6.5" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="881.79" y="319.5" ></text>
</g>
<g >
<title>my_openssl_free(void*, char const*, int) (1 samples, 0.55%)</title><rect x="81.3" y="485" width="6.5" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="84.32" y="495.5" ></text>
</g>
<g >
<title>Sql_cmd_select::prepare_inner(THD*) (3 samples, 1.65%)</title><rect x="865.8" y="389" width="19.5" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="868.82" y="399.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::is_owned() const (1 samples, 0.55%)</title><rect x="956.6" y="245" width="6.5" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="959.59" y="255.5" ></text>
</g>
<g >
<title>do_ssl3_write.localalias (1 samples, 0.55%)</title><rect x="256.4" y="517" width="6.5" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="259.37" y="527.5" ></text>
</g>
<g >
<title>[unknown] (49 samples, 26.92%)</title><rect x="10.0" y="533" width="317.7" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >[unknown]</text>
</g>
<g >
<title>buf_page_get_known_nowait(unsigned long, buf_block_t*, Cache_hint, char const*, unsigned long, mtr_t*) (1 samples, 0.55%)</title><rect x="703.7" y="165" width="6.5" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="706.74" y="175.5" ></text>
</g>
<g >
<title>tcp_queue_rcv (1 samples, 0.55%)</title><rect x="1138.1" y="101" width="6.5" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="1141.13" y="111.5" ></text>
</g>
<g >
<title>assert_invalid_stats_is_locked(TABLE const*) (1 samples, 0.55%)</title><rect x="995.5" y="341" width="6.5" height="15.0" fill="rgb(129,129,235)" rx="2" ry="2" />
<text  x="998.49" y="351.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (3 samples, 1.65%)</title><rect x="120.2" y="53" width="19.5" height="15.0" fill="rgb(115,115,222)" rx="2" ry="2" />
<text  x="123.22" y="63.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (3 samples, 1.65%)</title><rect x="120.2" y="69" width="19.5" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="123.22" y="79.5" ></text>
</g>
<g >
<title>__futex_abstimed_wait_common (1 samples, 0.55%)</title><rect x="1177.0" y="533" width="6.5" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="1180.03" y="543.5" ></text>
</g>
<g >
<title>Query_block::setup_wild(THD*) (1 samples, 0.55%)</title><rect x="878.8" y="357" width="6.5" height="15.0" fill="rgb(136,136,242)" rx="2" ry="2" />
<text  x="881.79" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt;, std::__detail::_Select1st, Collation_hasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) const (1 samples, 0.55%)</title><rect x="1014.9" y="293" width="6.5" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="1017.95" y="303.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Abstract_table&gt; &gt;, true&gt;::_Head_base() (1 samples, 0.55%)</title><rect x="1157.6" y="293" width="6.5" height="15.0" fill="rgb(112,112,220)" rx="2" ry="2" />
<text  x="1160.58" y="303.5" ></text>
</g>
<g >
<title>void mutex_enter_inline&lt;PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt; &gt;(PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;*, ut::Location) (1 samples, 0.55%)</title><rect x="982.5" y="277" width="6.5" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="985.53" y="287.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.55%)</title><rect x="35.9" y="421" width="6.5" height="15.0" fill="rgb(121,121,227)" rx="2" ry="2" />
<text  x="38.93" y="431.5" ></text>
</g>
<g >
<title>THD::set_query_for_display(char const*, unsigned long) (2 samples, 1.10%)</title><rect x="535.2" y="437" width="12.9" height="15.0" fill="rgb(110,110,218)" rx="2" ry="2" />
<text  x="538.16" y="447.5" ></text>
</g>
<g >
<title>Item::delete_self() (1 samples, 0.55%)</title><rect x="580.5" y="405" width="6.5" height="15.0" fill="rgb(131,131,236)" rx="2" ry="2" />
<text  x="583.55" y="415.5" ></text>
</g>
<g >
<title>my_openssl_free(void*, char const*, int) (1 samples, 0.55%)</title><rect x="269.3" y="501" width="6.5" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="272.34" y="511.5" ></text>
</g>
<g >
<title>JOIN::create_root_access_path_for_join() (1 samples, 0.55%)</title><rect x="645.4" y="325" width="6.5" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="648.38" y="335.5" ></text>
</g>
<g >
<title>__list_add_valid (1 samples, 0.55%)</title><rect x="1177.0" y="389" width="6.5" height="15.0" fill="rgb(95,95,203)" rx="2" ry="2" />
<text  x="1180.03" y="399.5" ></text>
</g>
<g >
<title>ha_innobase::update_thd(THD*) (1 samples, 0.55%)</title><rect x="963.1" y="325" width="6.5" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="966.08" y="335.5" ></text>
</g>
<g >
<title>do_futex (1 samples, 0.55%)</title><rect x="1177.0" y="469" width="6.5" height="15.0" fill="rgb(135,135,241)" rx="2" ry="2" />
<text  x="1180.03" y="479.5" ></text>
</g>
<g >
<title>MDL_ticket_store::find(MDL_request const&amp;) const (1 samples, 0.55%)</title><rect x="950.1" y="261" width="6.5" height="15.0" fill="rgb(128,128,234)" rx="2" ry="2" />
<text  x="953.11" y="271.5" ></text>
</g>
<g >
<title>mtr_t::mtr_t() (1 samples, 0.55%)</title><rect x="710.2" y="213" width="6.5" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="713.22" y="223.5" ></text>
</g>
<g >
<title>std::thread::id::id(unsigned long) (1 samples, 0.55%)</title><rect x="963.1" y="181" width="6.5" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="966.08" y="191.5" ></text>
</g>
<g >
<title>TABLE::has_invalid_stats() (1 samples, 0.55%)</title><rect x="995.5" y="357" width="6.5" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="998.49" y="367.5" ></text>
</g>
<g >
<title>dispatch_command(THD*, COM_DATA const*, enum_server_command) (91 samples, 50.00%)</title><rect x="522.2" y="469" width="590.0" height="15.0" fill="rgb(80,80,190)" rx="2" ry="2" />
<text  x="525.20" y="479.5" >dispatch_command(THD*, COM_DATA const*, enum_server_command)</text>
</g>
<g >
<title>Protocol_classic::read_packet() (1 samples, 0.55%)</title><rect x="1131.6" y="373" width="6.5" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="1134.65" y="383.5" ></text>
</g>
<g >
<title>mulx4x_internal (6 samples, 3.30%)</title><rect x="386.0" y="533" width="38.9" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="389.04" y="543.5" >mul..</text>
</g>
<g >
<title>void mutex_enter_inline&lt;PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt; &gt;(PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;*, ut::Location) (1 samples, 0.55%)</title><rect x="963.1" y="277" width="6.5" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="966.08" y="287.5" ></text>
</g>
<g >
<title>Table_cache_manager::assert_owner(THD*) (1 samples, 0.55%)</title><rect x="995.5" y="325" width="6.5" height="15.0" fill="rgb(123,123,229)" rx="2" ry="2" />
<text  x="998.49" y="335.5" ></text>
</g>
<g >
<title>Atomic_xor_of_things&lt;std::thread::id, unsigned long&gt;::xor_thing(std::thread::id) (1 samples, 0.55%)</title><rect x="755.6" y="181" width="6.5" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="758.60" y="191.5" ></text>
</g>
<g >
<title>copy_events_statements(PFS_events_statements*, PFS_events_statements const*) (1 samples, 0.55%)</title><rect x="1099.2" y="421" width="6.5" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="1102.23" y="431.5" ></text>
</g>
<g >
<title>sql_set_variables(THD*, List&lt;set_var_base&gt;*, bool) (2 samples, 1.10%)</title><rect x="1008.5" y="421" width="12.9" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="1011.46" y="431.5" ></text>
</g>
<g >
<title>void my_hash_sort_uca_900_tmpl&lt;Mb_wc_utf8mb4, 1&gt;(CHARSET_INFO const*, Mb_wc_utf8mb4, unsigned char const*, unsigned long, unsigned long*) (1 samples, 0.55%)</title><rect x="1014.9" y="245" width="6.5" height="15.0" fill="rgb(86,86,196)" rx="2" ry="2" />
<text  x="1017.95" y="255.5" ></text>
</g>
<g >
<title>dd::cache::Object_registry::Object_registry() (1 samples, 0.55%)</title><rect x="1157.6" y="389" width="6.5" height="15.0" fill="rgb(96,96,204)" rx="2" ry="2" />
<text  x="1160.58" y="399.5" ></text>
</g>
<g >
<title>mysql_audit_notify(THD*, mysql_event_parse_subclass_t, char const*, mysql_event_parse_rewrite_plugin_flag*, MYSQL_LEX_CSTRING*) (1 samples, 0.55%)</title><rect x="593.5" y="421" width="6.5" height="15.0" fill="rgb(133,133,238)" rx="2" ry="2" />
<text  x="596.52" y="431.5" ></text>
</g>
<g >
<title>row_prebuilt_t::init_tuple_types(dtuple_t*) (1 samples, 0.55%)</title><rect x="684.3" y="213" width="6.5" height="15.0" fill="rgb(114,114,221)" rx="2" ry="2" />
<text  x="687.29" y="223.5" ></text>
</g>
<g >
<title>CRYPTO_strndup (1 samples, 0.55%)</title><rect x="16.5" y="517" width="6.5" height="15.0" fill="rgb(107,107,215)" rx="2" ry="2" />
<text  x="19.48" y="527.5" ></text>
</g>
<g >
<title>Arg_comparator::set_cmp_func(Item_result_field*, Item**, Item**, bool) (1 samples, 0.55%)</title><rect x="775.1" y="213" width="6.4" height="15.0" fill="rgb(137,137,242)" rx="2" ry="2" />
<text  x="778.05" y="223.5" ></text>
</g>
<g >
<title>vio_write(Vio*, unsigned char const*, unsigned long) (1 samples, 0.55%)</title><rect x="1138.1" y="293" width="6.5" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="1141.13" y="303.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(unsigned int, unsigned int, char const*, unsigned int) (1 samples, 0.55%)</title><rect x="898.2" y="229" width="6.5" height="15.0" fill="rgb(120,120,227)" rx="2" ry="2" />
<text  x="901.24" y="239.5" ></text>
</g>
<g >
<title>THD::enter_stage(PSI_stage_info_v1 const*, PSI_stage_info_v1*, char const*, char const*, unsigned int) (1 samples, 0.55%)</title><rect x="463.8" y="357" width="6.5" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="466.85" y="367.5" ></text>
</g>
<g >
<title>ha_innobase::update_thd() (2 samples, 1.10%)</title><rect x="982.5" y="341" width="13.0" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="985.53" y="351.5" ></text>
</g>
<g >
<title>__sys_sendto (1 samples, 0.55%)</title><rect x="1138.1" y="213" width="6.5" height="15.0" fill="rgb(125,125,232)" rx="2" ry="2" />
<text  x="1141.13" y="223.5" ></text>
</g>
<g >
<title>check_audit_mask(unsigned long, unsigned long) (1 samples, 0.55%)</title><rect x="593.5" y="389" width="6.5" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="596.52" y="399.5" ></text>
</g>
<g >
<title>TrxInInnoDB::exit(trx_t*) (1 samples, 0.55%)</title><rect x="898.2" y="261" width="6.5" height="15.0" fill="rgb(108,108,215)" rx="2" ry="2" />
<text  x="901.24" y="271.5" ></text>
</g>
<g >
<title>tcp_rcv_established (1 samples, 0.55%)</title><rect x="256.4" y="261" width="6.5" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="259.37" y="271.5" ></text>
</g>
<g >
<title>Collation_hasher::operator()(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) const (1 samples, 0.55%)</title><rect x="1079.8" y="309" width="6.5" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="1082.78" y="319.5" ></text>
</g>
<g >
<title>close_thread_table(THD*, TABLE**) (5 samples, 2.75%)</title><rect x="976.0" y="389" width="32.5" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="979.04" y="399.5" >cl..</text>
</g>
<g >
<title>inline_mysql_mutex_lock(mysql_mutex_t*, char const*, unsigned int) (1 samples, 0.55%)</title><rect x="567.6" y="437" width="6.5" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="570.58" y="447.5" ></text>
</g>
<g >
<title>TrxInInnoDB::enter(trx_t*, bool) (1 samples, 0.55%)</title><rect x="956.6" y="325" width="6.5" height="15.0" fill="rgb(106,106,213)" rx="2" ry="2" />
<text  x="959.59" y="335.5" ></text>
</g>
<g >
<title>pfs_memory_free_vc(unsigned int, unsigned long, PSI_thread*) (1 samples, 0.55%)</title><rect x="314.7" y="453" width="6.5" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="317.73" y="463.5" ></text>
</g>
<g >
<title>THD::init() (1 samples, 0.55%)</title><rect x="1118.7" y="421" width="6.5" height="15.0" fill="rgb(106,106,214)" rx="2" ry="2" />
<text  x="1121.68" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void (*&amp;)(log_t*), log_t*&amp;&gt;::type std::__invoke&lt;void (*&amp;)(log_t*), log_t*&amp;&gt;(void (*&amp;)(log_t*), log_t*&amp;) (1 samples, 0.55%)</title><rect x="1170.5" y="341" width="6.5" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="1173.55" y="351.5" ></text>
</g>
<g >
<title>TrxInInnoDB::~TrxInInnoDB() (1 samples, 0.55%)</title><rect x="963.1" y="309" width="6.5" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="966.08" y="319.5" ></text>
</g>
<g >
<title>__list_add_valid (1 samples, 0.55%)</title><rect x="1177.0" y="373" width="6.5" height="15.0" fill="rgb(95,95,203)" rx="2" ry="2" />
<text  x="1180.03" y="383.5" ></text>
</g>
<g >
<title>net_send_ok(THD*, unsigned int, unsigned int, unsigned long long, unsigned long long, char const*, bool) (1 samples, 0.55%)</title><rect x="548.1" y="421" width="6.5" height="15.0" fill="rgb(100,100,209)" rx="2" ry="2" />
<text  x="551.13" y="431.5" ></text>
</g>
<g >
<title>dd::cache::Local_multi_map&lt;dd::Abstract_table&gt;::erase() (1 samples, 0.55%)</title><rect x="444.4" y="389" width="6.5" height="15.0" fill="rgb(99,99,208)" rx="2" ry="2" />
<text  x="447.40" y="399.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.55%)</title><rect x="1138.1" y="245" width="6.5" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="1141.13" y="255.5" ></text>
</g>
<g >
<title>vio_socket_io_wait(Vio*, enum_vio_io_event) (5 samples, 2.75%)</title><rect x="476.8" y="341" width="32.4" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="479.81" y="351.5" >vi..</text>
</g>
<g >
<title>_int_free (2 samples, 1.10%)</title><rect x="340.7" y="533" width="12.9" height="15.0" fill="rgb(131,131,236)" rx="2" ry="2" />
<text  x="343.66" y="543.5" ></text>
</g>
<g >
<title>TABLE::mark_column_used(Field*, enum_mark_columns) (1 samples, 0.55%)</title><rect x="878.8" y="325" width="6.5" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="881.79" y="335.5" ></text>
</g>
<g >
<title>KEY::set_in_memory_estimate(double) (1 samples, 0.55%)</title><rect x="794.5" y="261" width="6.5" height="15.0" fill="rgb(83,83,193)" rx="2" ry="2" />
<text  x="797.51" y="271.5" ></text>
</g>
<g >
<title>Session_sysvars_tracker::vars_list::search(Session_sysvars_tracker::sysvar_node_st*, MYSQL_LEX_CSTRING const&amp;) (2 samples, 1.10%)</title><rect x="1079.8" y="405" width="12.9" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="1082.78" y="415.5" ></text>
</g>
<g >
<title>net_read_raw_loop(NET*, unsigned long) (1 samples, 0.55%)</title><rect x="1131.6" y="293" width="6.5" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="1134.65" y="303.5" ></text>
</g>
<g >
<title>free (1 samples, 0.55%)</title><rect x="891.8" y="149" width="6.4" height="15.0" fill="rgb(89,89,199)" rx="2" ry="2" />
<text  x="894.76" y="159.5" ></text>
</g>
<g >
<title>buf_block_buf_fix_inc_func(ut::Location, buf_block_t*) (1 samples, 0.55%)</title><rect x="703.7" y="133" width="6.5" height="15.0" fill="rgb(125,125,231)" rx="2" ry="2" />
<text  x="706.74" y="143.5" ></text>
</g>
<g >
<title>ERR_peek_error (1 samples, 0.55%)</title><rect x="548.1" y="357" width="6.5" height="15.0" fill="rgb(113,113,220)" rx="2" ry="2" />
<text  x="551.13" y="367.5" ></text>
</g>
<g >
<title>pfs_spawn_thread (114 samples, 62.64%)</title><rect x="424.9" y="517" width="739.2" height="15.0" fill="rgb(81,81,190)" rx="2" ry="2" />
<text  x="427.95" y="527.5" >pfs_spawn_thread</text>
</g>
<g >
<title>pfs_memory_alloc_vc(unsigned int, unsigned long, PSI_thread**) (1 samples, 0.55%)</title><rect x="515.7" y="405" width="6.5" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="518.71" y="415.5" ></text>
</g>
<g >
<title>rw_lock_s_lock(rw_lock_t*, ut::Location) (2 samples, 1.10%)</title><rect x="755.6" y="213" width="13.0" height="15.0" fill="rgb(118,118,224)" rx="2" ry="2" />
<text  x="758.60" y="223.5" ></text>
</g>
<g >
<title>unlink_chunk.constprop.0 (1 samples, 0.55%)</title><rect x="100.8" y="501" width="6.5" height="15.0" fill="rgb(100,100,209)" rx="2" ry="2" />
<text  x="103.77" y="511.5" ></text>
</g>
<g >
<title>SSL_has_matching_session_id (1 samples, 0.55%)</title><rect x="55.4" y="517" width="6.5" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="58.38" y="527.5" ></text>
</g>
<g >
<title>ha_innobase::update_thd(THD*) (2 samples, 1.10%)</title><rect x="982.5" y="325" width="13.0" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="985.53" y="335.5" ></text>
</g>
<g >
<title>void mutex_enter_inline&lt;PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt; &gt;(PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;*, ut::Location) (1 samples, 0.55%)</title><rect x="1170.5" y="245" width="6.5" height="15.0" fill="rgb(139,139,244)" rx="2" ry="2" />
<text  x="1173.55" y="255.5" ></text>
</g>
<g >
<title>AutoDebugTrace::AutoDebugTrace(char const*, char const*, int) (1 samples, 0.55%)</title><rect x="690.8" y="229" width="6.5" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="693.77" y="239.5" ></text>
</g>
<g >
<title>Session_sysvars_tracker::store(THD*, String&amp;) (1 samples, 0.55%)</title><rect x="561.1" y="389" width="6.5" height="15.0" fill="rgb(117,117,224)" rx="2" ry="2" />
<text  x="564.10" y="399.5" ></text>
</g>
<g >
<title>THD::sql_parser() (7 samples, 3.85%)</title><rect x="1027.9" y="421" width="45.4" height="15.0" fill="rgb(123,123,230)" rx="2" ry="2" />
<text  x="1030.91" y="431.5" >THD:..</text>
</g>
<g >
<title>std::__invoke_result&lt;Detached_thread, void (*)(log_t*), log_t*&gt;::type std::__invoke&lt;Detached_thread, void (*)(log_t*), log_t*&gt;(Detached_thread&amp;&amp;, void (*&amp;&amp;)(log_t*), log_t*&amp;&amp;) (1 samples, 0.55%)</title><rect x="1170.5" y="421" width="6.5" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="1173.55" y="431.5" ></text>
</g>
<g >
<title>MDL_context::find_ticket(MDL_request*, enum_mdl_duration*) (1 samples, 0.55%)</title><rect x="950.1" y="277" width="6.5" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="953.11" y="287.5" ></text>
</g>
<g >
<title>sock_def_readable (3 samples, 1.65%)</title><rect x="120.2" y="85" width="19.5" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="123.22" y="95.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::try_lock() (1 samples, 0.55%)</title><rect x="917.7" y="165" width="6.5" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="920.69" y="175.5" ></text>
</g>
<g >
<title>tcp_rcv_established (3 samples, 1.65%)</title><rect x="120.2" y="101" width="19.5" height="15.0" fill="rgb(132,132,237)" rx="2" ry="2" />
<text  x="123.22" y="111.5" ></text>
</g>
<g >
<title>mysqld (1 samples, 0.55%)</title><rect x="1183.5" y="549" width="6.5" height="15.0" fill="rgb(87,87,196)" rx="2" ry="2" />
<text  x="1186.52" y="559.5" ></text>
</g>
<g >
<title>__napi_poll (1 samples, 0.55%)</title><rect x="256.4" y="421" width="6.5" height="15.0" fill="rgb(138,138,243)" rx="2" ry="2" />
<text  x="259.37" y="431.5" ></text>
</g>
<g >
<title>Query_block::setup_conds(THD*) (1 samples, 0.55%)</title><rect x="872.3" y="357" width="6.5" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="875.31" y="367.5" ></text>
</g>
<g >
<title>ha_innobase::change_active_index(unsigned int) (1 samples, 0.55%)</title><rect x="684.3" y="245" width="6.5" height="15.0" fill="rgb(116,116,223)" rx="2" ry="2" />
<text  x="687.29" y="255.5" ></text>
</g>
<g >
<title>inline_mysql_end_statement(PSI_statement_locker*, Diagnostics_area*) (3 samples, 1.65%)</title><rect x="1092.7" y="453" width="19.5" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="1095.75" y="463.5" ></text>
</g>
<g >
<title>__x64_sys_poll (1 samples, 0.55%)</title><rect x="1183.5" y="421" width="6.5" height="15.0" fill="rgb(136,136,241)" rx="2" ry="2" />
<text  x="1186.52" y="431.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::peek_owner() const (1 samples, 0.55%)</title><rect x="943.6" y="181" width="6.5" height="15.0" fill="rgb(94,94,203)" rx="2" ry="2" />
<text  x="946.63" y="191.5" ></text>
</g>
<g >
<title>ha_innobase::update_thd() (1 samples, 0.55%)</title><rect x="898.2" y="309" width="6.5" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="901.24" y="319.5" ></text>
</g>
<g >
<title>all (182 samples, 100%)</title><rect x="10.0" y="565" width="1180.0" height="15.0" fill="rgb(90,90,199)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>futex_wait (1 samples, 0.55%)</title><rect x="1177.0" y="453" width="6.5" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="1180.03" y="463.5" ></text>
</g>
<g >
<title>__x64_sys_sendto (1 samples, 0.55%)</title><rect x="1138.1" y="229" width="6.5" height="15.0" fill="rgb(97,97,206)" rx="2" ry="2" />
<text  x="1141.13" y="239.5" ></text>
</g>
<g >
<title>net_read_packet_header(NET*) (1 samples, 0.55%)</title><rect x="1131.6" y="309" width="6.5" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="1134.65" y="319.5" ></text>
</g>
<g >
<title>Transaction_ctx::cleanup() (1 samples, 0.55%)</title><rect x="424.9" y="405" width="6.5" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="427.95" y="415.5" ></text>
</g>
<g >
<title>std::this_thread::get_id() (1 samples, 0.55%)</title><rect x="911.2" y="213" width="6.5" height="15.0" fill="rgb(85,85,195)" rx="2" ry="2" />
<text  x="914.21" y="223.5" ></text>
</g>
<g >
<title>dict_index_get_n_fields(dict_index_t const*) (1 samples, 0.55%)</title><rect x="736.2" y="85" width="6.4" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="739.15" y="95.5" ></text>
</g>
<g >
<title>release_or_close_table(THD*, TABLE*) (2 samples, 1.10%)</title><rect x="995.5" y="373" width="13.0" height="15.0" fill="rgb(97,97,206)" rx="2" ry="2" />
<text  x="998.49" y="383.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.55%)</title><rect x="684.3" y="133" width="6.5" height="15.0" fill="rgb(123,123,229)" rx="2" ry="2" />
<text  x="687.29" y="143.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (3 samples, 1.65%)</title><rect x="120.2" y="325" width="19.5" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="123.22" y="335.5" ></text>
</g>
<g >
<title>bio_read_intern (1 samples, 0.55%)</title><rect x="146.2" y="517" width="6.4" height="15.0" fill="rgb(84,84,193)" rx="2" ry="2" />
<text  x="149.15" y="527.5" ></text>
</g>
<g >
<title>Protocol_classic::flush() (1 samples, 0.55%)</title><rect x="1138.1" y="357" width="6.5" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="1141.13" y="367.5" ></text>
</g>
<g >
<title>void* my_internal_malloc&lt;&amp;(redirecting_allocator(unsigned long, int))&gt;(unsigned int, unsigned long, int) (3 samples, 1.65%)</title><rect x="23.0" y="469" width="19.4" height="15.0" fill="rgb(108,108,216)" rx="2" ry="2" />
<text  x="25.97" y="479.5" ></text>
</g>
<g >
<title>__poll (1 samples, 0.55%)</title><rect x="1183.5" y="469" width="6.5" height="15.0" fill="rgb(134,134,239)" rx="2" ry="2" />
<text  x="1186.52" y="479.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.55%)</title><rect x="1105.7" y="373" width="6.5" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="1108.71" y="383.5" ></text>
</g>
<g >
<title>Item_asterisk::Item_asterisk(YYLTYPE const&amp;, char const*, char const*) (1 samples, 0.55%)</title><rect x="1053.8" y="389" width="6.5" height="15.0" fill="rgb(110,110,217)" rx="2" ry="2" />
<text  x="1056.85" y="399.5" ></text>
</g>
<g >
<title>Session_tracker::enable(THD*) (1 samples, 0.55%)</title><rect x="1118.7" y="405" width="6.5" height="15.0" fill="rgb(102,102,210)" rx="2" ry="2" />
<text  x="1121.68" y="415.5" ></text>
</g>
<g >
<title>bio_call_callback (1 samples, 0.55%)</title><rect x="139.7" y="517" width="6.5" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="142.67" y="527.5" ></text>
</g>
<g >
<title>check_locking_clause_access(THD*, IteratorContainer&lt;IntrusiveListIterator&lt;Table_ref, &amp;Table_ref::next_global&gt; &gt;) (1 samples, 0.55%)</title><rect x="859.3" y="373" width="6.5" height="15.0" fill="rgb(119,119,226)" rx="2" ry="2" />
<text  x="862.34" y="383.5" ></text>
</g>
<g >
<title>server_mpvio_read_packet (1 samples, 0.55%)</title><rect x="1131.6" y="389" width="6.5" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="1134.65" y="399.5" ></text>
</g>
<g >
<title>Item_eq_base::~Item_eq_base() (1 samples, 0.55%)</title><rect x="580.5" y="357" width="6.5" height="15.0" fill="rgb(124,124,231)" rx="2" ry="2" />
<text  x="583.55" y="367.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1 samples, 0.55%)</title><rect x="35.9" y="405" width="6.5" height="15.0" fill="rgb(105,105,213)" rx="2" ry="2" />
<text  x="38.93" y="415.5" ></text>
</g>
<g >
<title>TTASEventMutex&lt;GenericPolicy&gt;::enter(unsigned int, unsigned int, char const*, unsigned int) (1 samples, 0.55%)</title><rect x="982.5" y="245" width="6.5" height="15.0" fill="rgb(127,127,233)" rx="2" ry="2" />
<text  x="985.53" y="255.5" ></text>
</g>
<g >
<title>unlikely(bool) (1 samples, 0.55%)</title><rect x="749.1" y="181" width="6.5" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="752.12" y="191.5" ></text>
</g>
<g >
<title>Item_equal::update_const(THD*) (2 samples, 1.10%)</title><rect x="775.1" y="277" width="12.9" height="15.0" fill="rgb(124,124,230)" rx="2" ry="2" />
<text  x="778.05" y="287.5" ></text>
</g>
<g >
<title>Rec_offsets::compute(unsigned char const*, dict_index_t const*, unsigned long) (1 samples, 0.55%)</title><rect x="723.2" y="133" width="6.5" height="15.0" fill="rgb(109,109,217)" rx="2" ry="2" />
<text  x="726.19" y="143.5" ></text>
</g>
<g >
<title>thd_prepare_connection(THD*) (5 samples, 2.75%)</title><rect x="1131.6" y="485" width="32.5" height="15.0" fill="rgb(135,135,240)" rx="2" ry="2" />
<text  x="1134.65" y="495.5" >th..</text>
</g>
<g >
<title>MutexDebug&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::locked(TTASEventMutex&lt;GenericPolicy&gt; const*, char const*, unsigned long) (1 samples, 0.55%)</title><rect x="904.7" y="165" width="6.5" height="15.0" fill="rgb(82,82,192)" rx="2" ry="2" />
<text  x="907.73" y="175.5" ></text>
</g>
<g >
<title>Protocol_classic::store_field(Field const*) (1 samples, 0.55%)</title><rect x="625.9" y="309" width="6.5" height="15.0" fill="rgb(85,85,195)" rx="2" ry="2" />
<text  x="628.93" y="319.5" ></text>
</g>
<g >
<title>aggregate_thread_memory(bool, PFS_thread*, PFS_account*, PFS_user*, PFS_host*) (1 samples, 0.55%)</title><rect x="1125.2" y="453" width="6.4" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="1128.16" y="463.5" ></text>
</g>
<g >
<title>rw_lock_add_debug_info(rw_lock_t*, unsigned long, unsigned long, ut::Location) (1 samples, 0.55%)</title><rect x="762.1" y="181" width="6.5" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="765.09" y="191.5" ></text>
</g>
<g >
<title>THD::send_statement_status() (3 samples, 1.65%)</title><rect x="548.1" y="453" width="19.5" height="15.0" fill="rgb(86,86,196)" rx="2" ry="2" />
<text  x="551.13" y="463.5" ></text>
</g>
<g >
<title>PT_select_stmt::make_cmd(THD*) (2 samples, 1.10%)</title><rect x="1027.9" y="389" width="13.0" height="15.0" fill="rgb(107,107,215)" rx="2" ry="2" />
<text  x="1030.91" y="399.5" ></text>
</g>
<g >
<title>Transactional_ddl_context::inited() (1 samples, 0.55%)</title><rect x="1144.6" y="405" width="6.5" height="15.0" fill="rgb(86,86,196)" rx="2" ry="2" />
<text  x="1147.62" y="415.5" ></text>
</g>
<g >
<title>Cost_model_table::page_read_cost(double) const (1 samples, 0.55%)</title><rect x="658.4" y="293" width="6.4" height="15.0" fill="rgb(99,99,207)" rx="2" ry="2" />
<text  x="661.35" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;collation_unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt;, std::default_delete&lt;collation_unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt; &gt; &gt;::operator*() const (1 samples, 0.55%)</title><rect x="1086.3" y="373" width="6.4" height="15.0" fill="rgb(130,130,235)" rx="2" ry="2" />
<text  x="1089.26" y="383.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, collation_unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt;*, std::default_delete&lt;collation_unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt; &gt; &gt;::_M_head(std::_Tuple_impl&lt;0ul, collation_unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt;*, std::default_delete&lt;collation_unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unique_ptr&lt;Session_sysvars_tracker::sysvar_node_st, My_free_deleter&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.55%)</title><rect x="1086.3" y="309" width="6.4" height="15.0" fill="rgb(93,93,201)" rx="2" ry="2" />
<text  x="1089.26" y="319.5" ></text>
</g>
<g >
<title>String::shrink(unsigned long) (1 samples, 0.55%)</title><rect x="515.7" y="469" width="6.5" height="15.0" fill="rgb(103,103,211)" rx="2" ry="2" />
<text  x="518.71" y="479.5" ></text>
</g>
<g >
<title>common_interrupt (1 samples, 0.55%)</title><rect x="256.4" y="485" width="6.5" height="15.0" fill="rgb(100,100,208)" rx="2" ry="2" />
<text  x="259.37" y="495.5" ></text>
</g>
<g >
<title>MYSQLparse(THD*, Parse_tree_root**) (5 samples, 2.75%)</title><rect x="1040.9" y="405" width="32.4" height="15.0" fill="rgb(98,98,207)" rx="2" ry="2" />
<text  x="1043.88" y="415.5" >MY..</text>
</g>
<g >
<title>my_openssl_malloc(unsigned long, char const*, int) (1 samples, 0.55%)</title><rect x="16.5" y="501" width="6.5" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="19.48" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;dd::cache::Local_multi_map&lt;dd::Abstract_table&gt;, std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Abstract_table&gt; &gt; &gt;::unique_ptr&lt;std::default_delete&lt;dd::cache::Local_multi_map&lt;dd::Abstract_table&gt; &gt;, void&gt;() (1 samples, 0.55%)</title><rect x="1157.6" y="373" width="6.5" height="15.0" fill="rgb(111,111,218)" rx="2" ry="2" />
<text  x="1160.58" y="383.5" ></text>
</g>
<g >
<title>my_ismbchar(CHARSET_INFO const*, char const*, char const*) (1 samples, 0.55%)</title><rect x="1034.4" y="293" width="6.5" height="15.0" fill="rgb(123,123,230)" rx="2" ry="2" />
<text  x="1037.40" y="303.5" ></text>
</g>
<g >
<title>timespec64_add_safe (1 samples, 0.55%)</title><rect x="496.3" y="261" width="6.4" height="15.0" fill="rgb(93,93,201)" rx="2" ry="2" />
<text  x="499.26" y="271.5" ></text>
</g>
<g >
<title>net_read_packet_header(NET*) (7 samples, 3.85%)</title><rect x="463.8" y="389" width="45.4" height="15.0" fill="rgb(126,126,232)" rx="2" ry="2" />
<text  x="466.85" y="399.5" >net_..</text>
</g>
<g >
<title>sha256_block_data_order_shaext (1 samples, 0.55%)</title><rect x="275.8" y="517" width="6.5" height="15.0" fill="rgb(97,97,205)" rx="2" ry="2" />
<text  x="278.82" y="527.5" ></text>
</g>
<g >
<title>ksys_write (4 samples, 2.20%)</title><rect x="113.7" y="469" width="26.0" height="15.0" fill="rgb(88,88,198)" rx="2" ry="2" />
<text  x="116.74" y="479.5" >k..</text>
</g>
<g >
<title>ha_innobase::index_read(unsigned char*, unsigned char const*, unsigned int, ha_rkey_function) (13 samples, 7.14%)</title><rect x="690.8" y="245" width="84.3" height="15.0" fill="rgb(118,118,225)" rx="2" ry="2" />
<text  x="693.77" y="255.5" >ha_innoba..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.55%)</title><rect x="107.3" y="501" width="6.4" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="110.25" y="511.5" ></text>
</g>
<g >
<title>dd::cache::Object_registry::m_map(dd::cache::Object_registry::Type_selector&lt;dd::Abstract_table&gt;) (1 samples, 0.55%)</title><rect x="437.9" y="373" width="6.5" height="15.0" fill="rgb(104,104,212)" rx="2" ry="2" />
<text  x="440.91" y="383.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (3 samples, 1.65%)</title><rect x="120.2" y="165" width="19.5" height="15.0" fill="rgb(112,112,220)" rx="2" ry="2" />
<text  x="123.22" y="175.5" ></text>
</g>
<g >
<title>Cost_model_table::io_block_read_cost(double) const (1 samples, 0.55%)</title><rect x="658.4" y="277" width="6.4" height="15.0" fill="rgb(136,136,241)" rx="2" ry="2" />
<text  x="661.35" y="287.5" ></text>
</g>
<g >
<title>log_files_governor(log_t*) (1 samples, 0.55%)</title><rect x="1170.5" y="309" width="6.5" height="15.0" fill="rgb(122,122,229)" rx="2" ry="2" />
<text  x="1173.55" y="319.5" ></text>
</g>
<g >
<title>read_lock_stack(CODE_STATE*) (1 samples, 0.55%)</title><rect x="613.0" y="373" width="6.5" height="15.0" fill="rgb(81,81,191)" rx="2" ry="2" />
<text  x="615.97" y="383.5" ></text>
</g>
<g >
<title>PT_query_expression::contextualize(Parse_context*) (2 samples, 1.10%)</title><rect x="1027.9" y="373" width="13.0" height="15.0" fill="rgb(98,98,206)" rx="2" ry="2" />
<text  x="1030.91" y="383.5" ></text>
</g>
<g >
<title>ha_innobase::update_thd() (1 samples, 0.55%)</title><rect x="943.6" y="293" width="6.5" height="15.0" fill="rgb(101,101,209)" rx="2" ry="2" />
<text  x="946.63" y="303.5" ></text>
</g>
<g >
<title>__ip_queue_xmit (3 samples, 1.65%)</title><rect x="120.2" y="309" width="19.5" height="15.0" fill="rgb(86,86,195)" rx="2" ry="2" />
<text  x="123.22" y="319.5" ></text>
</g>
<g >
<title>vio_io_wait(Vio*, enum_vio_io_event, int) (1 samples, 0.55%)</title><rect x="502.7" y="325" width="6.5" height="15.0" fill="rgb(134,134,240)" rx="2" ry="2" />
<text  x="505.75" y="335.5" ></text>
</g>
<g >
<title>net_rx_action (1 samples, 0.55%)</title><rect x="256.4" y="437" width="6.5" height="15.0" fill="rgb(130,130,236)" rx="2" ry="2" />
<text  x="259.37" y="447.5" ></text>
</g>
<g >
<title>join_read_const_table(JOIN_TAB*, POSITION*) (17 samples, 9.34%)</title><rect x="677.8" y="309" width="110.2" height="15.0" fill="rgb(92,92,201)" rx="2" ry="2" />
<text  x="680.80" y="319.5" >join_read_con..</text>
</g>
<g >
<title>TrxInInnoDB::TrxInInnoDB(trx_t*, bool) (1 samples, 0.55%)</title><rect x="904.7" y="245" width="6.5" height="15.0" fill="rgb(93,93,202)" rx="2" ry="2" />
<text  x="907.73" y="255.5" ></text>
</g>
<g >
<title>void my_raw_free&lt;&amp;(redirecting_deallocator(void*))&gt;(void*) (1 samples, 0.55%)</title><rect x="891.8" y="165" width="6.4" height="15.0" fill="rgb(121,121,228)" rx="2" ry="2" />
<text  x="894.76" y="175.5" ></text>
</g>
<g >
<title>is_deprecated(char const*) (1 samples, 0.55%)</title><rect x="1060.3" y="357" width="6.5" height="15.0" fill="rgb(96,96,205)" rx="2" ry="2" />
<text  x="1063.33" y="367.5" ></text>
</g>
</g>
</svg>
